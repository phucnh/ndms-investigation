<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NDMSInvestigation.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlResultsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.Results"/> entity.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.Results"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userId">. Primary Key.</param>	
            <param name="_groupId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.Results objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.Results objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.Results objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.Results objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.GetByUserId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Results_aspnet_Users key.
            	FK_Results_aspnet_Users Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.Results objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.GetByGroupId(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_Results_QuestionGroup key.
            	FK_Results_QuestionGroup Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_groupId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.Results objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.GetByUserIdGroupIdTestTimes(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_Results index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="_groupId"></param>
            <param name="_testTimes"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.Results"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.GetByUserIdGroupId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Results index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.Results"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.Results})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.Results object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.Results)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.Results object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.Results object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.Results object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.Results)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.Results object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.Results object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlResultsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlResultsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlResultsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> entity.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_pathId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPersonalizationAllUsers objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPersonalizationAllUsers objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPersonalizationAllUsers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPersonalizationAllUsers objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.GetByPathId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__aspnet_Personali__4AB81AF0 index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_pathId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationAllUsers})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetPersonalizationAllUsers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetPersonalizationAllUsers)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.AspnetPersonalizationAllUsers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetPersonalizationAllUsers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetPersonalizationAllUsers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetPersonalizationAllUsers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetPersonalizationAllUsers object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.AspnetPersonalizationAllUsers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationAllUsersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.CompanyDetails"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_companyId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.CompanyDetails objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.CompanyDetails objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.CompanyDetails objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.CompanyDetails objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.GetByTraceChange(NDMSInvestigation.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CompanyDetails_TraceChange key.
            	FK_CompanyDetails_TraceChange Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_traceChange"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.CompanyDetails objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.GetByUserId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_CompanyDetails index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.CompanyDetails"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.GetByCompanyId(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CompanyDetails index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_companyId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.CompanyDetails"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.CompanyDetails})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.CompanyDetails object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.CompanyDetails)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.CompanyDetails object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.CompanyDetails object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.CompanyDetails object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.CompanyDetails)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.CompanyDetails object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.CompanyDetails object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:NDMSInvestigation.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(NDMSInvestigation.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(NDMSInvestigation.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(NDMSInvestigation.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(NDMSInvestigation.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(NDMSInvestigation.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(NDMSInvestigation.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(NDMSInvestigation.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(NDMSInvestigation.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(NDMSInvestigation.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(NDMSInvestigation.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(NDMSInvestigation.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(NDMSInvestigation.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:NDMSInvestigation.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.CompanyDetailsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.CompanyDetails"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlCompanyDetailsProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlCompanyDetailsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.AspnetUsersInRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetUsersInRolesProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetUsersInRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.AnswerDetailsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAnswerDetailsProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAnswerDetailsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.AspnetWebEventEventsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetWebEventEventsProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetWebEventEventsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.QuestionGroupsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.QuestionGroups"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlQuestionGroupsProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlQuestionGroupsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.QuestionDetailsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlQuestionDetailsProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlQuestionDetailsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.AspnetUsersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetUsersProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetUsersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.QuestionAnswerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlQuestionAnswerProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlQuestionAnswerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.ResultsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.Results"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlResultsProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlResultsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.AspnetSchemaVersionsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetSchemaVersionsProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetSchemaVersionsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.AspnetApplicationsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetApplicationsProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetApplicationsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.AspnetMembershipProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetMembershipProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetMembershipProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.AspnetPathsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetPathsProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetPathsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.AspnetPersonalizationAllUsersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetPersonalizationAllUsersProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetPersonalizationAllUsersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.AspnetRolesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetRolesProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetRolesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.AspnetPersonalizationPerUserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetPersonalizationPerUserProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetPersonalizationPerUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.TraceChangeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.TraceChange"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlTraceChangeProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlTraceChangeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.AspnetProfileProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetProfileProvider">
            <summary>
            Gets the current <c cref="P:NDMSInvestigation.Data.SqlClient.SqlNetTiersProvider.SqlAspnetProfileProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> entity.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.GetByUserIdFromAspnetUsersInRoles(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets AspnetRoles objects from the datasource by UserId in the
            	aspnet_UsersInRoles table. Table aspnet_Roles is related to table aspnet_Users
            	through the (M:N) relationship defined in the aspnet_UsersInRoles table.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of AspnetRoles objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_roleId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetRoles objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetRoles objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetRoles objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.GetByApplicationId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__aspnet_Ro__Appli__32E0915F key.
            	FK__aspnet_Ro__Appli__32E0915F Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_applicationId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.GetByApplicationIdLoweredRoleName(NDMSInvestigation.Data.TransactionManager,System.Guid,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the aspnet_Roles_index1 index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_applicationId"></param>
            <param name="_loweredRoleName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.GetByRoleId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__aspnet_Roles__31EC6D26 index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetRoles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetRoles)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.AspnetRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetRoles object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.AspnetRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_pathId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPaths objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPaths objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPaths objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPaths objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.GetByApplicationId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__aspnet_Pa__Appli__45F365D3 key.
            	FK__aspnet_Pa__Appli__45F365D3 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_applicationId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPaths objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.GetByApplicationIdLoweredPath(NDMSInvestigation.Data.TransactionManager,System.Guid,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the aspnet_Paths_index index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_applicationId"></param>
            <param name="_loweredPath"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.GetByPathId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__aspnet_Paths__44FF419A index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_pathId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPaths})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetPaths object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetPaths)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.AspnetPaths object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetPaths object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetPaths object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetPaths)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetPaths object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.AspnetPaths object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPathsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.TraceChange"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_traceId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.TraceChange objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.TraceChange objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.TraceChange objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.TraceChange objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.GetByTraceId(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_TraceChange index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_traceId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TraceChange"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.TraceChange})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.TraceChange object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TraceChange)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.TraceChange object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.TraceChange object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.TraceChange object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TraceChange)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.TraceChange object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.TraceChange object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.GetByAnswerIdFromQuestionAnswer(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets QuestionDetails objects from the datasource by AnswerId in the
            	QuestionAnswer table. Table QuestionDetails is related to table AnswerDetails
            	through the (M:N) relationship defined in the QuestionAnswer table.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_answerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of QuestionDetails objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_questionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionDetails objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionDetails objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionDetails objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionDetails objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.GetByGroupId(NDMSInvestigation.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QuestionDetails_QuestionGroup key.
            	FK_QuestionDetails_QuestionGroup Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_groupId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionDetails objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.GetByOrderNumberGroupId(NDMSInvestigation.Data.TransactionManager,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_QuestionDetails index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_orderNumber"></param>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.GetByQuestionId(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_QuestionDetails index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionDetails})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.QuestionDetails object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.QuestionDetails)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.QuestionDetails object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.QuestionDetails object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.QuestionDetails object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.QuestionDetails)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.QuestionDetails object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.QuestionDetails object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.CompanyDetails"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlCompanyDetailsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.GetByRoleIdFromAspnetUsersInRoles(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets AspnetUsers objects from the datasource by RoleId in the
            	aspnet_UsersInRoles table. Table aspnet_Users is related to table aspnet_Roles
            	through the (M:N) relationship defined in the aspnet_UsersInRoles table.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of AspnetUsers objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.GetByGroupIdFromResults(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets AspnetUsers objects from the datasource by GroupId in the
            	Results table. Table aspnet_Users is related to table QuestionGroups
            	through the (M:N) relationship defined in the Results table.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of AspnetUsers objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetUsers objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetUsers objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetUsers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetUsers objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.GetByApplicationId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__aspnet_Us__Appli__0425A276 key.
            	FK__aspnet_Us__Appli__0425A276 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_applicationId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetUsers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.GetByApplicationIdLoweredUserName(NDMSInvestigation.Data.TransactionManager,System.Guid,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the aspnet_Users_Index index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_applicationId"></param>
            <param name="_loweredUserName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.GetByApplicationIdLastActivityDate(NDMSInvestigation.Data.TransactionManager,System.Guid,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the aspnet_Users_Index2 index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_applicationId"></param>
            <param name="_lastActivityDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.GetByUserId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__aspnet_Users__03317E3D index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsers})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetUsers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetUsers)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.AspnetUsers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetUsers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetUsers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetUsers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetUsers object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.AspnetUsers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPersonalizationPerUser objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPersonalizationPerUser objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPersonalizationPerUser objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPersonalizationPerUser objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.GetByPathId(NDMSInvestigation.Data.TransactionManager,System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__aspnet_Pe__PathI__4F7CD00D key.
            	FK__aspnet_Pe__PathI__4F7CD00D Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_pathId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPersonalizationPerUser objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.GetByUserId(NDMSInvestigation.Data.TransactionManager,System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__aspnet_Pe__UserI__5070F446 key.
            	FK__aspnet_Pe__UserI__5070F446 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetPersonalizationPerUser objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.GetByPathIdUserId(NDMSInvestigation.Data.TransactionManager,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the aspnet_PersonalizationPerUser_index1 index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_pathId"></param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.GetByUserIdPathId(NDMSInvestigation.Data.TransactionManager,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the aspnet_PersonalizationPerUser_ncindex2 index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="_pathId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.GetById(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__aspnet_Personali__4D94879B index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationPerUser})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetPersonalizationPerUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetPersonalizationPerUser)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.AspnetPersonalizationPerUser object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetPersonalizationPerUser object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetPersonalizationPerUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetPersonalizationPerUser)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetPersonalizationPerUser object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.AspnetPersonalizationPerUser object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.GetByQuestionIdFromQuestionAnswer(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets AnswerDetails objects from the datasource by QuestionId in the
            	QuestionAnswer table. Table AnswerDetails is related to table QuestionDetails
            	through the (M:N) relationship defined in the QuestionAnswer table.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of AnswerDetails objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_answerId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AnswerDetails objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AnswerDetails objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AnswerDetails objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AnswerDetails objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.GetByAnswerId(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_AnswerDetails index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_answerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AnswerDetails})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AnswerDetails object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AnswerDetails)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.AnswerDetails object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AnswerDetails object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AnswerDetails object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AnswerDetails)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AnswerDetails object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.AnswerDetails object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_feature">. Primary Key.</param>	
            <param name="_compatibleSchemaVersion">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetSchemaVersions objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetSchemaVersions objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetSchemaVersions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetSchemaVersions objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.GetByFeatureCompatibleSchemaVersion(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__aspnet_SchemaVer__08EA5793 index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_feature"></param>
            <param name="_compatibleSchemaVersion"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetSchemaVersions})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetSchemaVersions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetSchemaVersions)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.AspnetSchemaVersions object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetSchemaVersions object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetSchemaVersions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetSchemaVersions)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetSchemaVersions object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.AspnetSchemaVersions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> entity.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetProfile objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetProfile objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetProfile objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetProfile objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.GetByUserId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__aspnet_Profile__286302EC index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetProfile})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetProfile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetProfile)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.AspnetProfile object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetProfile object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetProfile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetProfile)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetProfile object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.AspnetProfile object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetProfileProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAnswerDetailsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_eventId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetWebEventEvents objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetWebEventEvents objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetWebEventEvents objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetWebEventEvents objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.GetByEventId(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__aspnet_WebEvent___5FB337D6 index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_eventId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetWebEventEvents})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetWebEventEvents object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetWebEventEvents)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.AspnetWebEventEvents object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetWebEventEvents object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetWebEventEvents object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetWebEventEvents)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetWebEventEvents object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.AspnetWebEventEvents object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlQuestionDetailsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.QuestionGroups"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.GetByUserIdFromResults(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets QuestionGroups objects from the datasource by UserId in the
            	Results table. Table QuestionGroups is related to table aspnet_Users
            	through the (M:N) relationship defined in the Results table.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of QuestionGroups objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_groupId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionGroups objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionGroups objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionGroups objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionGroups objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.GetByOrderNumber(NDMSInvestigation.Data.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the IX_QuestionGroup index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_orderNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionGroups"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.GetByGroupId(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_QuestionGroup index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionGroups"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionGroups})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.QuestionGroups object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.QuestionGroups)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.QuestionGroups object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.QuestionGroups object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.QuestionGroups object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.QuestionGroups)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.QuestionGroups object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.QuestionGroups object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetSchemaVersionsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetPersonalizationPerUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_applicationId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetApplications objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetApplications objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetApplications objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetApplications objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.GetByLoweredApplicationName(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the aspnet_Applications_Index index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_loweredApplicationName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.GetByApplicationId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__aspnet_Applicati__7E6CC920 index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_applicationId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.GetByApplicationName(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the UQ__aspnet_Applicati__00551192 index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_applicationName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetApplications})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetApplications object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetApplications)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.AspnetApplications object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetApplications object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetApplications object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetApplications)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetApplications object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.AspnetApplications object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetWebEventEventsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_questionId">. Primary Key.</param>	
            <param name="_answerId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionAnswer objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionAnswer objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionAnswer objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.GetByAnswerId(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QuestionAnswer_AnswerDetails key.
            	FK_QuestionAnswer_AnswerDetails Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_answerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.GetByQuestionId(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_QuestionAnswer_QuestionDetails key.
            	FK_QuestionAnswer_QuestionDetails Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_questionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.QuestionAnswer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.GetByQuestionIdAnswerId(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_QuestionAnswer index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_questionId"></param>
            <param name="_answerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionAnswer})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.QuestionAnswer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.QuestionAnswer)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.QuestionAnswer object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.QuestionAnswer object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.QuestionAnswer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.QuestionAnswer)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.QuestionAnswer object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.QuestionAnswer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userId">. Primary Key.</param>	
            <param name="_roleId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetUsersInRoles objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetUsersInRoles objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetUsersInRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetUsersInRoles objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.GetByUserId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__aspnet_Us__UserI__36B12243 key.
            	FK__aspnet_Us__UserI__36B12243 Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetUsersInRoles objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.GetByRoleId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the aspnet_UsersInRoles_index index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.GetByUserIdRoleId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__aspnet_UsersInRo__35BCFE0A index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="_roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsersInRoles})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetUsersInRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetUsersInRoles)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.AspnetUsersInRoles object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetUsersInRoles object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetUsersInRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetUsersInRoles)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetUsersInRoles object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.AspnetUsersInRoles object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.QuestionGroups"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlQuestionGroupsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.Delete(NDMSInvestigation.Data.TransactionManager,System.Guid)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.Find(NDMSInvestigation.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetMembership objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.Find(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetMembership objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.GetAll(NDMSInvestigation.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetMembership objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.GetPaged(NDMSInvestigation.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetMembership objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.GetByApplicationId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK__aspnet_Me__Appli__145C0A3F key.
            	FK__aspnet_Me__Appli__145C0A3F Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_applicationId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of NDMSInvestigation.Entities.AspnetMembership objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.GetByApplicationIdLoweredEmail(NDMSInvestigation.Data.TransactionManager,System.Guid,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the aspnet_Membership_index index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_applicationId"></param>
            <param name="_loweredEmail"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.GetByUserId(NDMSInvestigation.Data.TransactionManager,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK__aspnet_Membershi__1367E606 index.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.BulkInsert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetMembership})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetMembership object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.Insert(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetMembership)">
            <summary>
            	Inserts a NDMSInvestigation.Entities.AspnetMembership object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetMembership object to insert.</param>
            <remarks>
            	After inserting into the datasource, the NDMSInvestigation.Entities.AspnetMembership object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.Update(NDMSInvestigation.Data.TransactionManager,NDMSInvestigation.Entities.AspnetMembership)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:NDMSInvestigation.Data.TransactionManager"/> object</param>
            <param name="entity">NDMSInvestigation.Entities.AspnetMembership object to update.</param>
            <remarks>
            	After updating the datasource, the NDMSInvestigation.Entities.AspnetMembership object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlQuestionAnswerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersInRolesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetUsersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetApplicationsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,NDMSInvestigation.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:NDMSInvestigation.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:NDMSInvestigation.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NDMSInvestigation.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:NDMSInvestigation.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.TraceChange"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlTraceChangeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> entity.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:NDMSInvestigation.Data.SqlClient.SqlAspnetMembershipProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
