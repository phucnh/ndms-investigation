
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AspnetUsers.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using NDMSInvestigation.Entities.Validation;
#endregion

namespace NDMSInvestigation.Entities
{
	///<summary>
	/// An object representation of the 'aspnet_Users' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AspnetUsersBase : EntityBase, IAspnetUsers, IEntityId<AspnetUsersKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AspnetUsersEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AspnetUsersEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AspnetUsersEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AspnetUsers> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AspnetUsersEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AspnetUsersEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AspnetUsersBase"/> instance.
		///</summary>
		public AspnetUsersBase()
		{
			this.entityData = new AspnetUsersEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AspnetUsersBase"/> instance.
		///</summary>
		///<param name="_applicationId"></param>
		///<param name="_userId"></param>
		///<param name="_userName"></param>
		///<param name="_loweredUserName"></param>
		///<param name="_mobileAlias"></param>
		///<param name="_isAnonymous"></param>
		///<param name="_lastActivityDate"></param>
		public AspnetUsersBase(System.Guid _applicationId, System.Guid _userId, System.String _userName, 
			System.String _loweredUserName, System.String _mobileAlias, System.Boolean _isAnonymous, 
			System.DateTime _lastActivityDate)
		{
			this.entityData = new AspnetUsersEntityData();
			this.backupData = null;

			this.ApplicationId = _applicationId;
			this.UserId = _userId;
			this.UserName = _userName;
			this.LoweredUserName = _loweredUserName;
			this.MobileAlias = _mobileAlias;
			this.IsAnonymous = _isAnonymous;
			this.LastActivityDate = _lastActivityDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AspnetUsers"/> instance.
		///</summary>
		///<param name="_applicationId"></param>
		///<param name="_userId"></param>
		///<param name="_userName"></param>
		///<param name="_loweredUserName"></param>
		///<param name="_mobileAlias"></param>
		///<param name="_isAnonymous"></param>
		///<param name="_lastActivityDate"></param>
		public static AspnetUsers CreateAspnetUsers(System.Guid _applicationId, System.Guid _userId, System.String _userName, 
			System.String _loweredUserName, System.String _mobileAlias, System.Boolean _isAnonymous, 
			System.DateTime _lastActivityDate)
		{
			AspnetUsers newAspnetUsers = new AspnetUsers();
			newAspnetUsers.ApplicationId = _applicationId;
			newAspnetUsers.UserId = _userId;
			newAspnetUsers.UserName = _userName;
			newAspnetUsers.LoweredUserName = _loweredUserName;
			newAspnetUsers.MobileAlias = _mobileAlias;
			newAspnetUsers.IsAnonymous = _isAnonymous;
			newAspnetUsers.LastActivityDate = _lastActivityDate;
			return newAspnetUsers;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ApplicationId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Guid ApplicationId
		{
			get
			{
				return this.entityData.ApplicationId; 
			}
			
			set
			{
				if (this.entityData.ApplicationId == value)
					return;
					
				OnColumnChanging(AspnetUsersColumn.ApplicationId, this.entityData.ApplicationId);
				this.entityData.ApplicationId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetUsersColumn.ApplicationId, this.entityData.ApplicationId);
				OnPropertyChanged("ApplicationId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Guid UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(AspnetUsersColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				this.EntityId.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetUsersColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the UserId property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the UserId property.</remarks>
		/// <value>This type is uniqueidentifier</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Guid OriginalUserId
		{
			get { return this.entityData.OriginalUserId; }
			set { this.entityData.OriginalUserId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the UserName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="UserName")]
		[ValidatorComposition(CompositionType.And, Tag="UserName")]

		[StringLengthValidator(256, MessageTemplate="Maximum length has been exceeded.", Tag="UserName")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 256)]
		public virtual System.String UserName
		{
			get
			{
				return this.entityData.UserName; 
			}
			
			set
			{
				if (this.entityData.UserName == value)
					return;
					
				OnColumnChanging(AspnetUsersColumn.UserName, this.entityData.UserName);
				this.entityData.UserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetUsersColumn.UserName, this.entityData.UserName);
				OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoweredUserName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="LoweredUserName")]
		[ValidatorComposition(CompositionType.And, Tag="LoweredUserName")]

		[StringLengthValidator(256, MessageTemplate="Maximum length has been exceeded.", Tag="LoweredUserName")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 256)]
		public virtual System.String LoweredUserName
		{
			get
			{
				return this.entityData.LoweredUserName; 
			}
			
			set
			{
				if (this.entityData.LoweredUserName == value)
					return;
					
				OnColumnChanging(AspnetUsersColumn.LoweredUserName, this.entityData.LoweredUserName);
				this.entityData.LoweredUserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetUsersColumn.LoweredUserName, this.entityData.LoweredUserName);
				OnPropertyChanged("LoweredUserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MobileAlias property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="MobileAlias")]
		[ValidatorComposition(CompositionType.Or, Tag="MobileAlias")]
		[StringLengthValidator(16, MessageTemplate="Maximum length has been exceeded.", Tag="MobileAlias")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 16)]
		public virtual System.String MobileAlias
		{
			get
			{
				return this.entityData.MobileAlias; 
			}
			
			set
			{
				if (this.entityData.MobileAlias == value)
					return;
					
				OnColumnChanging(AspnetUsersColumn.MobileAlias, this.entityData.MobileAlias);
				this.entityData.MobileAlias = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetUsersColumn.MobileAlias, this.entityData.MobileAlias);
				OnPropertyChanged("MobileAlias");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsAnonymous property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsAnonymous
		{
			get
			{
				return this.entityData.IsAnonymous; 
			}
			
			set
			{
				if (this.entityData.IsAnonymous == value)
					return;
					
				OnColumnChanging(AspnetUsersColumn.IsAnonymous, this.entityData.IsAnonymous);
				this.entityData.IsAnonymous = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetUsersColumn.IsAnonymous, this.entityData.IsAnonymous);
				OnPropertyChanged("IsAnonymous");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastActivityDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastActivityDate
		{
			get
			{
				return this.entityData.LastActivityDate; 
			}
			
			set
			{
				if (this.entityData.LastActivityDate == value)
					return;
					
				OnColumnChanging(AspnetUsersColumn.LastActivityDate, this.entityData.LastActivityDate);
				this.entityData.LastActivityDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetUsersColumn.LastActivityDate, this.entityData.LastActivityDate);
				OnPropertyChanged("LastActivityDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AspnetApplications"/>.
		/// </summary>
		/// <value>The source AspnetApplications for ApplicationId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AspnetApplications ApplicationIdSource
      	{
            get { return entityData.ApplicationIdSource; }
            set { entityData.ApplicationIdSource = value; }
      	}
		#endregion
		
		#region Children Collections

		/// <summary>
		///	Holds a AspnetMembership object
		///	which is related to this object through the relation AspnetMembership
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AspnetMembership AspnetMembership
		{
			get { return entityData.AspnetMembership; }
			set { entityData.AspnetMembership = value; }	
		}

		/// <summary>
		///	Holds a AspnetProfile object
		///	which is related to this object through the relation AspnetProfile
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AspnetProfile AspnetProfile
		{
			get { return entityData.AspnetProfile; }
			set { entityData.AspnetProfile = value; }	
		}

		/// <summary>
		///	Holds a collection of QuestionGroupsFromResults objects
		///	which are related to this object through the junction table Results
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<QuestionGroups> GroupIdQuestionGroupsCollection_From_Results
		{
			get { return entityData.GroupIdQuestionGroupsCollection_From_Results; }
			set { entityData.GroupIdQuestionGroupsCollection_From_Results = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AspnetPersonalizationPerUser objects
		///	which are related to this object through the relation FK__aspnet_Pe__UserI__5070F446
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AspnetPersonalizationPerUser> AspnetPersonalizationPerUserCollection
		{
			get { return entityData.AspnetPersonalizationPerUserCollection; }
			set { entityData.AspnetPersonalizationPerUserCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AspnetUsersInRoles objects
		///	which are related to this object through the relation FK__aspnet_Us__UserI__36B12243
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AspnetUsersInRoles> AspnetUsersInRolesCollection
		{
			get { return entityData.AspnetUsersInRolesCollection; }
			set { entityData.AspnetUsersInRolesCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Results objects
		///	which are related to this object through the relation FK_Results_aspnet_Users
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Results> ResultsCollection
		{
			get { return entityData.ResultsCollection; }
			set { entityData.ResultsCollection = value; }	
		}

		/// <summary>
		///	Holds a CompanyDetails object
		///	which is related to this object through the relation CompanyDetails
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CompanyDetails CompanyDetails
		{
			get { return entityData.CompanyDetails; }
			set { entityData.CompanyDetails = value; }	
		}

		/// <summary>
		///	Holds a collection of AspnetRolesFromAspnetUsersInRoles objects
		///	which are related to this object through the junction table AspnetUsersInRoles
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AspnetRoles> RoleIdAspnetRolesCollection_From_AspnetUsersInRoles
		{
			get { return entityData.RoleIdAspnetRolesCollection_From_AspnetUsersInRoles; }
			set { entityData.RoleIdAspnetRolesCollection_From_AspnetUsersInRoles = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "aspnet_Users"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ApplicationId", "UserId", "UserName", "LoweredUserName", "MobileAlias", "IsAnonymous", "LastActivityDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AspnetUsersEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AspnetUsers) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AspnetUsers>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AspnetUsers);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AspnetUsers Entity 
		///</summary>
		protected virtual AspnetUsers Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AspnetUsers copy = new AspnetUsers();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ApplicationId = this.ApplicationId;
				copy.UserId = this.UserId;
					copy.OriginalUserId = this.OriginalUserId;
				copy.UserName = this.UserName;
				copy.LoweredUserName = this.LoweredUserName;
				copy.MobileAlias = this.MobileAlias;
				copy.IsAnonymous = this.IsAnonymous;
				copy.LastActivityDate = this.LastActivityDate;
			
			if (this.ApplicationIdSource != null && existingCopies.Contains(this.ApplicationIdSource))
				copy.ApplicationIdSource = existingCopies[this.ApplicationIdSource] as AspnetApplications;
			else
				copy.ApplicationIdSource = MakeCopyOf(this.ApplicationIdSource, existingCopies) as AspnetApplications;
		
			//deep copy nested objects
			copy.AspnetMembership = (AspnetMembership) MakeCopyOf(this.AspnetMembership, existingCopies); 
			copy.AspnetProfile = (AspnetProfile) MakeCopyOf(this.AspnetProfile, existingCopies); 
			copy.GroupIdQuestionGroupsCollection_From_Results = (TList<QuestionGroups>) MakeCopyOf(this.GroupIdQuestionGroupsCollection_From_Results, existingCopies); 
			copy.AspnetPersonalizationPerUserCollection = (TList<AspnetPersonalizationPerUser>) MakeCopyOf(this.AspnetPersonalizationPerUserCollection, existingCopies); 
			copy.AspnetUsersInRolesCollection = (TList<AspnetUsersInRoles>) MakeCopyOf(this.AspnetUsersInRolesCollection, existingCopies); 
			copy.ResultsCollection = (TList<Results>) MakeCopyOf(this.ResultsCollection, existingCopies); 
			copy.CompanyDetails = (CompanyDetails) MakeCopyOf(this.CompanyDetails, existingCopies); 
			copy.RoleIdAspnetRolesCollection_From_AspnetUsersInRoles = (TList<AspnetRoles>) MakeCopyOf(this.RoleIdAspnetRolesCollection_From_AspnetUsersInRoles, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AspnetUsers Entity 
		///</summary>
		public virtual AspnetUsers Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AspnetUsers Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AspnetUsers DeepCopy()
		{
			return EntityHelper.Clone<AspnetUsers>(this as AspnetUsers);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AspnetUsersEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AspnetUsersEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AspnetUsersEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AspnetUsersColumn column)
		{
			switch(column)
			{
					case AspnetUsersColumn.ApplicationId:
					return entityData.ApplicationId != _originalData.ApplicationId;
					case AspnetUsersColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case AspnetUsersColumn.UserName:
					return entityData.UserName != _originalData.UserName;
					case AspnetUsersColumn.LoweredUserName:
					return entityData.LoweredUserName != _originalData.LoweredUserName;
					case AspnetUsersColumn.MobileAlias:
					return entityData.MobileAlias != _originalData.MobileAlias;
					case AspnetUsersColumn.IsAnonymous:
					return entityData.IsAnonymous != _originalData.IsAnonymous;
					case AspnetUsersColumn.LastActivityDate:
					return entityData.LastActivityDate != _originalData.LastActivityDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AspnetUsersColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ApplicationId != _originalData.ApplicationId;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.UserName != _originalData.UserName;
			result = result || entityData.LoweredUserName != _originalData.LoweredUserName;
			result = result || entityData.MobileAlias != _originalData.MobileAlias;
			result = result || entityData.IsAnonymous != _originalData.IsAnonymous;
			result = result || entityData.LastActivityDate != _originalData.LastActivityDate;
			return result;
		}	
		
		///<summary>
		///  Returns a AspnetUsers Entity with the original data.
		///</summary>
		public AspnetUsers GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAspnetUsers(
				_originalData.ApplicationId,
				_originalData.UserId,
				_originalData.UserName,
				_originalData.LoweredUserName,
				_originalData.MobileAlias,
				_originalData.IsAnonymous,
				_originalData.LastActivityDate
				);
				
			return (AspnetUsers)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AspnetUsersBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AspnetUsersBase)
				return ValueEquals(this, (AspnetUsersBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AspnetUsersBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ApplicationId.GetHashCode() ^ 
					this.UserId.GetHashCode() ^ 
					this.UserName.GetHashCode() ^ 
					this.LoweredUserName.GetHashCode() ^ 
					((this.MobileAlias == null) ? string.Empty : this.MobileAlias.ToString()).GetHashCode() ^ 
					this.IsAnonymous.GetHashCode() ^ 
					this.LastActivityDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AspnetUsersBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AspnetUsersBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AspnetUsersBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AspnetUsersBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AspnetUsersBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AspnetUsersBase Object1, AspnetUsersBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ApplicationId != Object2.ApplicationId)
				equal = false;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.UserName != Object2.UserName)
				equal = false;
			if (Object1.LoweredUserName != Object2.LoweredUserName)
				equal = false;
			if ( Object1.MobileAlias != null && Object2.MobileAlias != null )
			{
				if (Object1.MobileAlias != Object2.MobileAlias)
					equal = false;
			}
			else if (Object1.MobileAlias == null ^ Object2.MobileAlias == null )
			{
				equal = false;
			}
			if (Object1.IsAnonymous != Object2.IsAnonymous)
				equal = false;
			if (Object1.LastActivityDate != Object2.LastActivityDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AspnetUsersBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AspnetUsersComparer GetComparer()
        {
            return new AspnetUsersComparer();
        }
        */

        // Comparer delegates back to AspnetUsers
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AspnetUsers rhs, AspnetUsersColumn which)
        {
            switch (which)
            {
            	
            	
            	case AspnetUsersColumn.ApplicationId:
            		return this.ApplicationId.CompareTo(rhs.ApplicationId);
            		
            		                 
            	
            	
            	case AspnetUsersColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            	
            	
            	case AspnetUsersColumn.UserName:
            		return this.UserName.CompareTo(rhs.UserName);
            		
            		                 
            	
            	
            	case AspnetUsersColumn.LoweredUserName:
            		return this.LoweredUserName.CompareTo(rhs.LoweredUserName);
            		
            		                 
            	
            	
            	case AspnetUsersColumn.MobileAlias:
            		return this.MobileAlias.CompareTo(rhs.MobileAlias);
            		
            		                 
            	
            	
            	case AspnetUsersColumn.IsAnonymous:
            		return this.IsAnonymous.CompareTo(rhs.IsAnonymous);
            		
            		                 
            	
            	
            	case AspnetUsersColumn.LastActivityDate:
            		return this.LastActivityDate.CompareTo(rhs.LastActivityDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AspnetUsersKey> Members
		
		// member variable for the EntityId property
		private AspnetUsersKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AspnetUsersKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AspnetUsersKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AspnetUsers")
					.Append("|").Append( this.UserId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- ApplicationId: {0}{7}- UserId: {1}{7}- UserName: {2}{7}- LoweredUserName: {3}{7}- MobileAlias: {4}{7}- IsAnonymous: {5}{7}- LastActivityDate: {6}{7}{9}", 
				this.ApplicationId,
				this.UserId,
				this.UserName,
				this.LoweredUserName,
				(this.MobileAlias == null) ? string.Empty : this.MobileAlias.ToString(),
				this.IsAnonymous,
				this.LastActivityDate,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'aspnet_Users' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AspnetUsersEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// UserId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "aspnet_Users"</remarks>
		public System.Guid UserId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Guid OriginalUserId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ApplicationId : 
		/// </summary>
		public System.Guid		  ApplicationId = Guid.Empty;
		
		/// <summary>
		/// UserName : 
		/// </summary>
		public System.String		  UserName = string.Empty;
		
		/// <summary>
		/// LoweredUserName : 
		/// </summary>
		public System.String		  LoweredUserName = string.Empty;
		
		/// <summary>
		/// MobileAlias : 
		/// </summary>
		public System.String		  MobileAlias = null;
		
		/// <summary>
		/// IsAnonymous : 
		/// </summary>
		public System.Boolean		  IsAnonymous = false;
		
		/// <summary>
		/// LastActivityDate : 
		/// </summary>
		public System.DateTime		  LastActivityDate = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		private AspnetApplications _applicationIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AspnetApplications"/>.
		/// </summary>
		/// <value>The source AspnetApplications for ApplicationId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AspnetApplications ApplicationIdSource
      	{
            get { return this._applicationIdSource; }
            set { this._applicationIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region AspnetMembership
		
		private AspnetMembership _aspnetMembershipUserId;
		
		/// <summary>
		///	Holds a  AspnetMembership entity object
		///	which is related to this object through the relation _aspnetMembershipUserId
		/// </summary>
		
		public AspnetMembership AspnetMembership
		{
			get {		return _aspnetMembershipUserId;		}
			set { 	_aspnetMembershipUserId = value; 	}
		}
		
		#endregion 

		#region AspnetProfile
		
		private AspnetProfile _aspnetProfileUserId;
		
		/// <summary>
		///	Holds a  AspnetProfile entity object
		///	which is related to this object through the relation _aspnetProfileUserId
		/// </summary>
		
		public AspnetProfile AspnetProfile
		{
			get {		return _aspnetProfileUserId;		}
			set { 	_aspnetProfileUserId = value; 	}
		}
		
		#endregion 

		#region GroupIdQuestionGroupsCollection_From_Results
		
		private TList<QuestionGroups> groupIdQuestionGroupsCollectionFromResults;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table groupIdQuestionGroupsCollectionFromResults
		/// </summary>
		
		public TList<QuestionGroups> GroupIdQuestionGroupsCollection_From_Results
		{
			get
			{
				if (groupIdQuestionGroupsCollectionFromResults == null)
				{
				groupIdQuestionGroupsCollectionFromResults = new TList<QuestionGroups>();
				}
	
				return groupIdQuestionGroupsCollectionFromResults;
			}
			set { groupIdQuestionGroupsCollectionFromResults = value; }
		}
		
		#endregion 

		#region AspnetPersonalizationPerUserCollection
		
		private TList<AspnetPersonalizationPerUser> _aspnetPersonalizationPerUserUserId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _aspnetPersonalizationPerUserUserId
		/// </summary>
		
		public TList<AspnetPersonalizationPerUser> AspnetPersonalizationPerUserCollection
		{
			get
			{
				if (_aspnetPersonalizationPerUserUserId == null)
				{
				_aspnetPersonalizationPerUserUserId = new TList<AspnetPersonalizationPerUser>();
				}
	
				return _aspnetPersonalizationPerUserUserId;
			}
			set { _aspnetPersonalizationPerUserUserId = value; }
		}
		
		#endregion

		#region AspnetUsersInRolesCollection
		
		private TList<AspnetUsersInRoles> _aspnetUsersInRolesUserId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _aspnetUsersInRolesUserId
		/// </summary>
		
		public TList<AspnetUsersInRoles> AspnetUsersInRolesCollection
		{
			get
			{
				if (_aspnetUsersInRolesUserId == null)
				{
				_aspnetUsersInRolesUserId = new TList<AspnetUsersInRoles>();
				}
	
				return _aspnetUsersInRolesUserId;
			}
			set { _aspnetUsersInRolesUserId = value; }
		}
		
		#endregion

		#region ResultsCollection
		
		private TList<Results> _resultsUserId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _resultsUserId
		/// </summary>
		
		public TList<Results> ResultsCollection
		{
			get
			{
				if (_resultsUserId == null)
				{
				_resultsUserId = new TList<Results>();
				}
	
				return _resultsUserId;
			}
			set { _resultsUserId = value; }
		}
		
		#endregion

		#region CompanyDetails
		
		private CompanyDetails _companyDetailsUserId;
		
		/// <summary>
		///	Holds a  CompanyDetails entity object
		///	which is related to this object through the relation _companyDetailsUserId
		/// </summary>
		
		public CompanyDetails CompanyDetails
		{
			get {		return _companyDetailsUserId;		}
			set { 	_companyDetailsUserId = value; 	}
		}
		
		#endregion 

		#region RoleIdAspnetRolesCollection_From_AspnetUsersInRoles
		
		private TList<AspnetRoles> roleIdAspnetRolesCollectionFromAspnetUsersInRoles;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table roleIdAspnetRolesCollectionFromAspnetUsersInRoles
		/// </summary>
		
		public TList<AspnetRoles> RoleIdAspnetRolesCollection_From_AspnetUsersInRoles
		{
			get
			{
				if (roleIdAspnetRolesCollectionFromAspnetUsersInRoles == null)
				{
				roleIdAspnetRolesCollectionFromAspnetUsersInRoles = new TList<AspnetRoles>();
				}
	
				return roleIdAspnetRolesCollectionFromAspnetUsersInRoles;
			}
			set { roleIdAspnetRolesCollectionFromAspnetUsersInRoles = value; }
		}
		
		#endregion 

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AspnetUsersEntityData _tmp = new AspnetUsersEntityData();
						
			_tmp.UserId = this.UserId;
			_tmp.OriginalUserId = this.OriginalUserId;
			
			_tmp.ApplicationId = this.ApplicationId;
			_tmp.UserName = this.UserName;
			_tmp.LoweredUserName = this.LoweredUserName;
			_tmp.MobileAlias = this.MobileAlias;
			_tmp.IsAnonymous = this.IsAnonymous;
			_tmp.LastActivityDate = this.LastActivityDate;
			
			#region Source Parent Composite Entities
			if (this.ApplicationIdSource != null)
				_tmp.ApplicationIdSource = MakeCopyOf(this.ApplicationIdSource) as AspnetApplications;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._aspnetMembershipUserId != null)
				_tmp.AspnetMembership = (AspnetMembership) MakeCopyOf(this.AspnetMembership); 
			if (this._aspnetProfileUserId != null)
				_tmp.AspnetProfile = (AspnetProfile) MakeCopyOf(this.AspnetProfile); 
			if (this.groupIdQuestionGroupsCollectionFromResults != null)
				_tmp.GroupIdQuestionGroupsCollection_From_Results = (TList<QuestionGroups>) MakeCopyOf(this.GroupIdQuestionGroupsCollection_From_Results); 
			if (this._aspnetPersonalizationPerUserUserId != null)
				_tmp.AspnetPersonalizationPerUserCollection = (TList<AspnetPersonalizationPerUser>) MakeCopyOf(this.AspnetPersonalizationPerUserCollection); 
			if (this._aspnetUsersInRolesUserId != null)
				_tmp.AspnetUsersInRolesCollection = (TList<AspnetUsersInRoles>) MakeCopyOf(this.AspnetUsersInRolesCollection); 
			if (this._resultsUserId != null)
				_tmp.ResultsCollection = (TList<Results>) MakeCopyOf(this.ResultsCollection); 
			if (this._companyDetailsUserId != null)
				_tmp.CompanyDetails = (CompanyDetails) MakeCopyOf(this.CompanyDetails); 
			if (this.roleIdAspnetRolesCollectionFromAspnetUsersInRoles != null)
				_tmp.RoleIdAspnetRolesCollection_From_AspnetUsersInRoles = (TList<AspnetRoles>) MakeCopyOf(this.RoleIdAspnetRolesCollection_From_AspnetUsersInRoles); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AspnetUsersEntityData _tmp = new AspnetUsersEntityData();
						
			_tmp.UserId = this.UserId;
			_tmp.OriginalUserId = this.OriginalUserId;
			
			_tmp.ApplicationId = this.ApplicationId;
			_tmp.UserName = this.UserName;
			_tmp.LoweredUserName = this.LoweredUserName;
			_tmp.MobileAlias = this.MobileAlias;
			_tmp.IsAnonymous = this.IsAnonymous;
			_tmp.LastActivityDate = this.LastActivityDate;
			
			#region Source Parent Composite Entities
			if (this.ApplicationIdSource != null && existingCopies.Contains(this.ApplicationIdSource))
				_tmp.ApplicationIdSource = existingCopies[this.ApplicationIdSource] as AspnetApplications;
			else
				_tmp.ApplicationIdSource = MakeCopyOf(this.ApplicationIdSource, existingCopies) as AspnetApplications;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.AspnetMembership = (AspnetMembership) MakeCopyOf(this.AspnetMembership, existingCopies); 
			_tmp.AspnetProfile = (AspnetProfile) MakeCopyOf(this.AspnetProfile, existingCopies); 
			_tmp.GroupIdQuestionGroupsCollection_From_Results = (TList<QuestionGroups>) MakeCopyOf(this.GroupIdQuestionGroupsCollection_From_Results, existingCopies); 
			_tmp.AspnetPersonalizationPerUserCollection = (TList<AspnetPersonalizationPerUser>) MakeCopyOf(this.AspnetPersonalizationPerUserCollection, existingCopies); 
			_tmp.AspnetUsersInRolesCollection = (TList<AspnetUsersInRoles>) MakeCopyOf(this.AspnetUsersInRolesCollection, existingCopies); 
			_tmp.ResultsCollection = (TList<Results>) MakeCopyOf(this.ResultsCollection, existingCopies); 
			_tmp.CompanyDetails = (CompanyDetails) MakeCopyOf(this.CompanyDetails, existingCopies); 
			_tmp.RoleIdAspnetRolesCollection_From_AspnetUsersInRoles = (TList<AspnetRoles>) MakeCopyOf(this.RoleIdAspnetRolesCollection_From_AspnetUsersInRoles, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AspnetUsersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AspnetUsersColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AspnetUsersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AspnetUsersColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AspnetUsersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AspnetUsersColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AspnetUsersEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AspnetUsersEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AspnetUsersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AspnetUsersColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AspnetUsersEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AspnetUsersEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AspnetUsersEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AspnetUsers"/> object.
	/// </remarks>
	public class AspnetUsersEventArgs : System.EventArgs
	{
		private AspnetUsersColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AspnetUsersEventArgs class.
		///</summary>
		public AspnetUsersEventArgs(AspnetUsersColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AspnetUsersEventArgs class.
		///</summary>
		public AspnetUsersEventArgs(AspnetUsersColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AspnetUsersColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AspnetUsersColumn" />
		public AspnetUsersColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AspnetUsers related events.
	///</summary>
	public delegate void AspnetUsersEventHandler(object sender, AspnetUsersEventArgs e);
	
	#region AspnetUsersComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AspnetUsersComparer : System.Collections.Generic.IComparer<AspnetUsers>
	{
		AspnetUsersColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AspnetUsersComparer"/> class.
        /// </summary>
		public AspnetUsersComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AspnetUsersComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AspnetUsersComparer(AspnetUsersColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AspnetUsers"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AspnetUsers"/> to compare.</param>
        /// <param name="b">The second <c>AspnetUsers</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AspnetUsers a, AspnetUsers b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AspnetUsers entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AspnetUsers a, AspnetUsers b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AspnetUsersColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AspnetUsersKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AspnetUsers"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AspnetUsersKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AspnetUsersKey class.
		/// </summary>
		public AspnetUsersKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AspnetUsersKey class.
		/// </summary>
		public AspnetUsersKey(AspnetUsersBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.UserId = entity.UserId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AspnetUsersKey class.
		/// </summary>
		public AspnetUsersKey(System.Guid _userId)
		{
			#region Init Properties

			this.UserId = _userId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AspnetUsersBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AspnetUsersBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the UserId property
		private System.Guid _userId;
		
		/// <summary>
		/// Gets or sets the UserId property.
		/// </summary>
		public System.Guid UserId
		{
			get { return _userId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.UserId = value;
				
				_userId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				UserId = ( values["UserId"] != null ) ? (System.Guid) EntityUtil.ChangeType(values["UserId"], typeof(System.Guid)) : Guid.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("UserId", UserId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("UserId: {0}{1}",
								UserId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AspnetUsersColumn Enum
	
	/// <summary>
	/// Enumerate the AspnetUsers columns.
	/// </summary>
	[Serializable]
	public enum AspnetUsersColumn : int
	{
		/// <summary>
		/// ApplicationId : 
		/// </summary>
		[EnumTextValue("ApplicationId")]
		[ColumnEnum("ApplicationId", typeof(System.Guid), System.Data.DbType.Guid, false, false, false)]
		ApplicationId = 1,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserId")]
		[ColumnEnum("UserId", typeof(System.Guid), System.Data.DbType.Guid, true, false, false)]
		UserId = 2,
		/// <summary>
		/// UserName : 
		/// </summary>
		[EnumTextValue("UserName")]
		[ColumnEnum("UserName", typeof(System.String), System.Data.DbType.String, false, false, false, 256)]
		UserName = 3,
		/// <summary>
		/// LoweredUserName : 
		/// </summary>
		[EnumTextValue("LoweredUserName")]
		[ColumnEnum("LoweredUserName", typeof(System.String), System.Data.DbType.String, false, false, false, 256)]
		LoweredUserName = 4,
		/// <summary>
		/// MobileAlias : 
		/// </summary>
		[EnumTextValue("MobileAlias")]
		[ColumnEnum("MobileAlias", typeof(System.String), System.Data.DbType.String, false, false, true, 16)]
		MobileAlias = 5,
		/// <summary>
		/// IsAnonymous : 
		/// </summary>
		[EnumTextValue("IsAnonymous")]
		[ColumnEnum("IsAnonymous", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsAnonymous = 6,
		/// <summary>
		/// LastActivityDate : 
		/// </summary>
		[EnumTextValue("LastActivityDate")]
		[ColumnEnum("LastActivityDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastActivityDate = 7
	}//End enum

	#endregion AspnetUsersColumn Enum

} // end namespace
