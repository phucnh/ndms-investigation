
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file QuestionGroups.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using NDMSInvestigation.Entities.Validation;
#endregion

namespace NDMSInvestigation.Entities
{
	///<summary>
	/// An object representation of the 'QuestionGroups' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class QuestionGroupsBase : EntityBase, IQuestionGroups, IEntityId<QuestionGroupsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private QuestionGroupsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private QuestionGroupsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private QuestionGroupsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<QuestionGroups> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event QuestionGroupsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event QuestionGroupsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="QuestionGroupsBase"/> instance.
		///</summary>
		public QuestionGroupsBase()
		{
			this.entityData = new QuestionGroupsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="QuestionGroupsBase"/> instance.
		///</summary>
		///<param name="_groupName"></param>
		///<param name="_groupDescription"></param>
		///<param name="_orderNumber"></param>
		///<param name="_createdDate"></param>
		///<param name="_createdBy"></param>
		///<param name="_updatedDate"></param>
		///<param name="_updatedBy"></param>
		public QuestionGroupsBase(System.String _groupName, System.String _groupDescription, 
			System.Int32? _orderNumber, System.DateTime? _createdDate, System.String _createdBy, 
			System.DateTime? _updatedDate, System.String _updatedBy)
		{
			this.entityData = new QuestionGroupsEntityData();
			this.backupData = null;

			this.GroupName = _groupName;
			this.GroupDescription = _groupDescription;
			this.OrderNumber = _orderNumber;
			this.CreatedDate = _createdDate;
			this.CreatedBy = _createdBy;
			this.UpdatedDate = _updatedDate;
			this.UpdatedBy = _updatedBy;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="QuestionGroups"/> instance.
		///</summary>
		///<param name="_groupName"></param>
		///<param name="_groupDescription"></param>
		///<param name="_orderNumber"></param>
		///<param name="_createdDate"></param>
		///<param name="_createdBy"></param>
		///<param name="_updatedDate"></param>
		///<param name="_updatedBy"></param>
		public static QuestionGroups CreateQuestionGroups(System.String _groupName, System.String _groupDescription, 
			System.Int32? _orderNumber, System.DateTime? _createdDate, System.String _createdBy, 
			System.DateTime? _updatedDate, System.String _updatedBy)
		{
			QuestionGroups newQuestionGroups = new QuestionGroups();
			newQuestionGroups.GroupName = _groupName;
			newQuestionGroups.GroupDescription = _groupDescription;
			newQuestionGroups.OrderNumber = _orderNumber;
			newQuestionGroups.CreatedDate = _createdDate;
			newQuestionGroups.CreatedBy = _createdBy;
			newQuestionGroups.UpdatedDate = _updatedDate;
			newQuestionGroups.UpdatedBy = _updatedBy;
			return newQuestionGroups;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the GroupId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 GroupId
		{
			get
			{
				return this.entityData.GroupId; 
			}
			
			set
			{
				if (this.entityData.GroupId == value)
					return;
					
				OnColumnChanging(QuestionGroupsColumn.GroupId, this.entityData.GroupId);
				this.entityData.GroupId = value;
				this.EntityId.GroupId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuestionGroupsColumn.GroupId, this.entityData.GroupId);
				OnPropertyChanged("GroupId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GroupName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="GroupName")]
		[ValidatorComposition(CompositionType.Or, Tag="GroupName")]
		[StringLengthValidator(1024, MessageTemplate="Maximum length has been exceeded.", Tag="GroupName")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String GroupName
		{
			get
			{
				return this.entityData.GroupName; 
			}
			
			set
			{
				if (this.entityData.GroupName == value)
					return;
					
				OnColumnChanging(QuestionGroupsColumn.GroupName, this.entityData.GroupName);
				this.entityData.GroupName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuestionGroupsColumn.GroupName, this.entityData.GroupName);
				OnPropertyChanged("GroupName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GroupDescription property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="GroupDescription")]
		[ValidatorComposition(CompositionType.Or, Tag="GroupDescription")]
		[StringLengthValidator(2048, MessageTemplate="Maximum length has been exceeded.", Tag="GroupDescription")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2048)]
		public virtual System.String GroupDescription
		{
			get
			{
				return this.entityData.GroupDescription; 
			}
			
			set
			{
				if (this.entityData.GroupDescription == value)
					return;
					
				OnColumnChanging(QuestionGroupsColumn.GroupDescription, this.entityData.GroupDescription);
				this.entityData.GroupDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuestionGroupsColumn.GroupDescription, this.entityData.GroupDescription);
				OnPropertyChanged("GroupDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderNumber property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOrderNumberNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OrderNumber
		{
			get
			{
				return this.entityData.OrderNumber; 
			}
			
			set
			{
				if (this.entityData.OrderNumber == value)
					return;
					
				OnColumnChanging(QuestionGroupsColumn.OrderNumber, this.entityData.OrderNumber);
				this.entityData.OrderNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuestionGroupsColumn.OrderNumber, this.entityData.OrderNumber);
				OnPropertyChanged("OrderNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreatedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(QuestionGroupsColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuestionGroupsColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedBy property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="CreatedBy")]
		[ValidatorComposition(CompositionType.Or, Tag="CreatedBy")]
		[StringLengthValidator(1024, MessageTemplate="Maximum length has been exceeded.", Tag="CreatedBy")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String CreatedBy
		{
			get
			{
				return this.entityData.CreatedBy; 
			}
			
			set
			{
				if (this.entityData.CreatedBy == value)
					return;
					
				OnColumnChanging(QuestionGroupsColumn.CreatedBy, this.entityData.CreatedBy);
				this.entityData.CreatedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuestionGroupsColumn.CreatedBy, this.entityData.CreatedBy);
				OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdatedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdatedDate
		{
			get
			{
				return this.entityData.UpdatedDate; 
			}
			
			set
			{
				if (this.entityData.UpdatedDate == value)
					return;
					
				OnColumnChanging(QuestionGroupsColumn.UpdatedDate, this.entityData.UpdatedDate);
				this.entityData.UpdatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuestionGroupsColumn.UpdatedDate, this.entityData.UpdatedDate);
				OnPropertyChanged("UpdatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedBy property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="UpdatedBy")]
		[ValidatorComposition(CompositionType.Or, Tag="UpdatedBy")]
		[StringLengthValidator(1024, MessageTemplate="Maximum length has been exceeded.", Tag="UpdatedBy")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String UpdatedBy
		{
			get
			{
				return this.entityData.UpdatedBy; 
			}
			
			set
			{
				if (this.entityData.UpdatedBy == value)
					return;
					
				OnColumnChanging(QuestionGroupsColumn.UpdatedBy, this.entityData.UpdatedBy);
				this.entityData.UpdatedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuestionGroupsColumn.UpdatedBy, this.entityData.UpdatedBy);
				OnPropertyChanged("UpdatedBy");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of QuestionDetails objects
		///	which are related to this object through the relation FK_QuestionDetails_QuestionGroup
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<QuestionDetails> QuestionDetailsCollection
		{
			get { return entityData.QuestionDetailsCollection; }
			set { entityData.QuestionDetailsCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of AspnetUsersFromResults objects
		///	which are related to this object through the junction table Results
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AspnetUsers> UserIdAspnetUsersCollection_From_Results
		{
			get { return entityData.UserIdAspnetUsersCollection_From_Results; }
			set { entityData.UserIdAspnetUsersCollection_From_Results = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Results objects
		///	which are related to this object through the relation FK_Results_QuestionGroup
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Results> ResultsCollection
		{
			get { return entityData.ResultsCollection; }
			set { entityData.ResultsCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "QuestionGroups"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"GroupId", "GroupName", "GroupDescription", "OrderNumber", "CreatedDate", "CreatedBy", "UpdatedDate", "UpdatedBy"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as QuestionGroupsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (QuestionGroups) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<QuestionGroups>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as QuestionGroups);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed QuestionGroups Entity 
		///</summary>
		protected virtual QuestionGroups Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			QuestionGroups copy = new QuestionGroups();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.GroupId = this.GroupId;
				copy.GroupName = this.GroupName;
				copy.GroupDescription = this.GroupDescription;
				copy.OrderNumber = this.OrderNumber;
				copy.CreatedDate = this.CreatedDate;
				copy.CreatedBy = this.CreatedBy;
				copy.UpdatedDate = this.UpdatedDate;
				copy.UpdatedBy = this.UpdatedBy;
			
		
			//deep copy nested objects
			copy.QuestionDetailsCollection = (TList<QuestionDetails>) MakeCopyOf(this.QuestionDetailsCollection, existingCopies); 
			copy.UserIdAspnetUsersCollection_From_Results = (TList<AspnetUsers>) MakeCopyOf(this.UserIdAspnetUsersCollection_From_Results, existingCopies); 
			copy.ResultsCollection = (TList<Results>) MakeCopyOf(this.ResultsCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed QuestionGroups Entity 
		///</summary>
		public virtual QuestionGroups Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed QuestionGroups Entity which is a deep copy of the current entity.
		///</summary>
		public virtual QuestionGroups DeepCopy()
		{
			return EntityHelper.Clone<QuestionGroups>(this as QuestionGroups);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as QuestionGroupsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new QuestionGroupsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as QuestionGroupsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(QuestionGroupsColumn column)
		{
			switch(column)
			{
					case QuestionGroupsColumn.GroupId:
					return entityData.GroupId != _originalData.GroupId;
					case QuestionGroupsColumn.GroupName:
					return entityData.GroupName != _originalData.GroupName;
					case QuestionGroupsColumn.GroupDescription:
					return entityData.GroupDescription != _originalData.GroupDescription;
					case QuestionGroupsColumn.OrderNumber:
					return entityData.OrderNumber != _originalData.OrderNumber;
					case QuestionGroupsColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case QuestionGroupsColumn.CreatedBy:
					return entityData.CreatedBy != _originalData.CreatedBy;
					case QuestionGroupsColumn.UpdatedDate:
					return entityData.UpdatedDate != _originalData.UpdatedDate;
					case QuestionGroupsColumn.UpdatedBy:
					return entityData.UpdatedBy != _originalData.UpdatedBy;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< QuestionGroupsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.GroupId != _originalData.GroupId;
			result = result || entityData.GroupName != _originalData.GroupName;
			result = result || entityData.GroupDescription != _originalData.GroupDescription;
			result = result || entityData.OrderNumber != _originalData.OrderNumber;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.CreatedBy != _originalData.CreatedBy;
			result = result || entityData.UpdatedDate != _originalData.UpdatedDate;
			result = result || entityData.UpdatedBy != _originalData.UpdatedBy;
			return result;
		}	
		
		///<summary>
		///  Returns a QuestionGroups Entity with the original data.
		///</summary>
		public QuestionGroups GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateQuestionGroups(
				_originalData.GroupName,
				_originalData.GroupDescription,
				_originalData.OrderNumber,
				_originalData.CreatedDate,
				_originalData.CreatedBy,
				_originalData.UpdatedDate,
				_originalData.UpdatedBy
				);
				
			return (QuestionGroups)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="QuestionGroupsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is QuestionGroupsBase)
				return ValueEquals(this, (QuestionGroupsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="QuestionGroupsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.GroupId.GetHashCode() ^ 
					((this.GroupName == null) ? string.Empty : this.GroupName.ToString()).GetHashCode() ^ 
					((this.GroupDescription == null) ? string.Empty : this.GroupDescription.ToString()).GetHashCode() ^ 
					((this.OrderNumber == null) ? string.Empty : this.OrderNumber.ToString()).GetHashCode() ^ 
					((this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString()).GetHashCode() ^ 
					((this.CreatedBy == null) ? string.Empty : this.CreatedBy.ToString()).GetHashCode() ^ 
					((this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString()).GetHashCode() ^ 
					((this.UpdatedBy == null) ? string.Empty : this.UpdatedBy.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="QuestionGroupsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(QuestionGroupsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="QuestionGroupsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="QuestionGroupsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="QuestionGroupsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(QuestionGroupsBase Object1, QuestionGroupsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.GroupId != Object2.GroupId)
				equal = false;
			if ( Object1.GroupName != null && Object2.GroupName != null )
			{
				if (Object1.GroupName != Object2.GroupName)
					equal = false;
			}
			else if (Object1.GroupName == null ^ Object2.GroupName == null )
			{
				equal = false;
			}
			if ( Object1.GroupDescription != null && Object2.GroupDescription != null )
			{
				if (Object1.GroupDescription != Object2.GroupDescription)
					equal = false;
			}
			else if (Object1.GroupDescription == null ^ Object2.GroupDescription == null )
			{
				equal = false;
			}
			if ( Object1.OrderNumber != null && Object2.OrderNumber != null )
			{
				if (Object1.OrderNumber != Object2.OrderNumber)
					equal = false;
			}
			else if (Object1.OrderNumber == null ^ Object2.OrderNumber == null )
			{
				equal = false;
			}
			if ( Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object2.CreatedDate == null )
			{
				equal = false;
			}
			if ( Object1.CreatedBy != null && Object2.CreatedBy != null )
			{
				if (Object1.CreatedBy != Object2.CreatedBy)
					equal = false;
			}
			else if (Object1.CreatedBy == null ^ Object2.CreatedBy == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedDate != null && Object2.UpdatedDate != null )
			{
				if (Object1.UpdatedDate != Object2.UpdatedDate)
					equal = false;
			}
			else if (Object1.UpdatedDate == null ^ Object2.UpdatedDate == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedBy != null && Object2.UpdatedBy != null )
			{
				if (Object1.UpdatedBy != Object2.UpdatedBy)
					equal = false;
			}
			else if (Object1.UpdatedBy == null ^ Object2.UpdatedBy == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((QuestionGroupsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static QuestionGroupsComparer GetComparer()
        {
            return new QuestionGroupsComparer();
        }
        */

        // Comparer delegates back to QuestionGroups
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(QuestionGroups rhs, QuestionGroupsColumn which)
        {
            switch (which)
            {
            	
            	
            	case QuestionGroupsColumn.GroupId:
            		return this.GroupId.CompareTo(rhs.GroupId);
            		
            		                 
            	
            	
            	case QuestionGroupsColumn.GroupName:
            		return this.GroupName.CompareTo(rhs.GroupName);
            		
            		                 
            	
            	
            	case QuestionGroupsColumn.GroupDescription:
            		return this.GroupDescription.CompareTo(rhs.GroupDescription);
            		
            		                 
            	
            	
            	case QuestionGroupsColumn.OrderNumber:
            		return this.OrderNumber.Value.CompareTo(rhs.OrderNumber.Value);
            		
            		                 
            	
            	
            	case QuestionGroupsColumn.CreatedDate:
            		return this.CreatedDate.Value.CompareTo(rhs.CreatedDate.Value);
            		
            		                 
            	
            	
            	case QuestionGroupsColumn.CreatedBy:
            		return this.CreatedBy.CompareTo(rhs.CreatedBy);
            		
            		                 
            	
            	
            	case QuestionGroupsColumn.UpdatedDate:
            		return this.UpdatedDate.Value.CompareTo(rhs.UpdatedDate.Value);
            		
            		                 
            	
            	
            	case QuestionGroupsColumn.UpdatedBy:
            		return this.UpdatedBy.CompareTo(rhs.UpdatedBy);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<QuestionGroupsKey> Members
		
		// member variable for the EntityId property
		private QuestionGroupsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual QuestionGroupsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new QuestionGroupsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("QuestionGroups")
					.Append("|").Append( this.GroupId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- GroupId: {0}{8}- GroupName: {1}{8}- GroupDescription: {2}{8}- OrderNumber: {3}{8}- CreatedDate: {4}{8}- CreatedBy: {5}{8}- UpdatedDate: {6}{8}- UpdatedBy: {7}{8}{10}", 
				this.GroupId,
				(this.GroupName == null) ? string.Empty : this.GroupName.ToString(),
				(this.GroupDescription == null) ? string.Empty : this.GroupDescription.ToString(),
				(this.OrderNumber == null) ? string.Empty : this.OrderNumber.ToString(),
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
				(this.CreatedBy == null) ? string.Empty : this.CreatedBy.ToString(),
				(this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString(),
				(this.UpdatedBy == null) ? string.Empty : this.UpdatedBy.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'QuestionGroups' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class QuestionGroupsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// GroupId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "QuestionGroups"</remarks>
		public System.Int32 GroupId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// GroupName : 
		/// </summary>
		public System.String		  GroupName = null;
		
		/// <summary>
		/// GroupDescription : 
		/// </summary>
		public System.String		  GroupDescription = null;
		
		/// <summary>
		/// OrderNumber : 
		/// </summary>
		public System.Int32?		  OrderNumber = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime?		  CreatedDate = null;
		
		/// <summary>
		/// CreatedBy : 
		/// </summary>
		public System.String		  CreatedBy = null;
		
		/// <summary>
		/// UpdatedDate : 
		/// </summary>
		public System.DateTime?		  UpdatedDate = null;
		
		/// <summary>
		/// UpdatedBy : 
		/// </summary>
		public System.String		  UpdatedBy = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region QuestionDetailsCollection
		
		private TList<QuestionDetails> _questionDetailsGroupId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _questionDetailsGroupId
		/// </summary>
		
		public TList<QuestionDetails> QuestionDetailsCollection
		{
			get
			{
				if (_questionDetailsGroupId == null)
				{
				_questionDetailsGroupId = new TList<QuestionDetails>();
				}
	
				return _questionDetailsGroupId;
			}
			set { _questionDetailsGroupId = value; }
		}
		
		#endregion

		#region UserIdAspnetUsersCollection_From_Results
		
		private TList<AspnetUsers> userIdAspnetUsersCollectionFromResults;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table userIdAspnetUsersCollectionFromResults
		/// </summary>
		
		public TList<AspnetUsers> UserIdAspnetUsersCollection_From_Results
		{
			get
			{
				if (userIdAspnetUsersCollectionFromResults == null)
				{
				userIdAspnetUsersCollectionFromResults = new TList<AspnetUsers>();
				}
	
				return userIdAspnetUsersCollectionFromResults;
			}
			set { userIdAspnetUsersCollectionFromResults = value; }
		}
		
		#endregion 

		#region ResultsCollection
		
		private TList<Results> _resultsGroupId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _resultsGroupId
		/// </summary>
		
		public TList<Results> ResultsCollection
		{
			get
			{
				if (_resultsGroupId == null)
				{
				_resultsGroupId = new TList<Results>();
				}
	
				return _resultsGroupId;
			}
			set { _resultsGroupId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			QuestionGroupsEntityData _tmp = new QuestionGroupsEntityData();
						
			_tmp.GroupId = this.GroupId;
			
			_tmp.GroupName = this.GroupName;
			_tmp.GroupDescription = this.GroupDescription;
			_tmp.OrderNumber = this.OrderNumber;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.CreatedBy = this.CreatedBy;
			_tmp.UpdatedDate = this.UpdatedDate;
			_tmp.UpdatedBy = this.UpdatedBy;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._questionDetailsGroupId != null)
				_tmp.QuestionDetailsCollection = (TList<QuestionDetails>) MakeCopyOf(this.QuestionDetailsCollection); 
			if (this.userIdAspnetUsersCollectionFromResults != null)
				_tmp.UserIdAspnetUsersCollection_From_Results = (TList<AspnetUsers>) MakeCopyOf(this.UserIdAspnetUsersCollection_From_Results); 
			if (this._resultsGroupId != null)
				_tmp.ResultsCollection = (TList<Results>) MakeCopyOf(this.ResultsCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			QuestionGroupsEntityData _tmp = new QuestionGroupsEntityData();
						
			_tmp.GroupId = this.GroupId;
			
			_tmp.GroupName = this.GroupName;
			_tmp.GroupDescription = this.GroupDescription;
			_tmp.OrderNumber = this.OrderNumber;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.CreatedBy = this.CreatedBy;
			_tmp.UpdatedDate = this.UpdatedDate;
			_tmp.UpdatedBy = this.UpdatedBy;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.QuestionDetailsCollection = (TList<QuestionDetails>) MakeCopyOf(this.QuestionDetailsCollection, existingCopies); 
			_tmp.UserIdAspnetUsersCollection_From_Results = (TList<AspnetUsers>) MakeCopyOf(this.UserIdAspnetUsersCollection_From_Results, existingCopies); 
			_tmp.ResultsCollection = (TList<Results>) MakeCopyOf(this.ResultsCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuestionGroupsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(QuestionGroupsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuestionGroupsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(QuestionGroupsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuestionGroupsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(QuestionGroupsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				QuestionGroupsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new QuestionGroupsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuestionGroupsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(QuestionGroupsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				QuestionGroupsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new QuestionGroupsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region QuestionGroupsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="QuestionGroups"/> object.
	/// </remarks>
	public class QuestionGroupsEventArgs : System.EventArgs
	{
		private QuestionGroupsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the QuestionGroupsEventArgs class.
		///</summary>
		public QuestionGroupsEventArgs(QuestionGroupsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the QuestionGroupsEventArgs class.
		///</summary>
		public QuestionGroupsEventArgs(QuestionGroupsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The QuestionGroupsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="QuestionGroupsColumn" />
		public QuestionGroupsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all QuestionGroups related events.
	///</summary>
	public delegate void QuestionGroupsEventHandler(object sender, QuestionGroupsEventArgs e);
	
	#region QuestionGroupsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class QuestionGroupsComparer : System.Collections.Generic.IComparer<QuestionGroups>
	{
		QuestionGroupsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:QuestionGroupsComparer"/> class.
        /// </summary>
		public QuestionGroupsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:QuestionGroupsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public QuestionGroupsComparer(QuestionGroupsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="QuestionGroups"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="QuestionGroups"/> to compare.</param>
        /// <param name="b">The second <c>QuestionGroups</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(QuestionGroups a, QuestionGroups b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(QuestionGroups entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(QuestionGroups a, QuestionGroups b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public QuestionGroupsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region QuestionGroupsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="QuestionGroups"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class QuestionGroupsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the QuestionGroupsKey class.
		/// </summary>
		public QuestionGroupsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the QuestionGroupsKey class.
		/// </summary>
		public QuestionGroupsKey(QuestionGroupsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.GroupId = entity.GroupId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the QuestionGroupsKey class.
		/// </summary>
		public QuestionGroupsKey(System.Int32 _groupId)
		{
			#region Init Properties

			this.GroupId = _groupId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private QuestionGroupsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public QuestionGroupsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the GroupId property
		private System.Int32 _groupId;
		
		/// <summary>
		/// Gets or sets the GroupId property.
		/// </summary>
		public System.Int32 GroupId
		{
			get { return _groupId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GroupId = value;
				
				_groupId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				GroupId = ( values["GroupId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["GroupId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("GroupId", GroupId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("GroupId: {0}{1}",
								GroupId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region QuestionGroupsColumn Enum
	
	/// <summary>
	/// Enumerate the QuestionGroups columns.
	/// </summary>
	[Serializable]
	public enum QuestionGroupsColumn : int
	{
		/// <summary>
		/// GroupId : 
		/// </summary>
		[EnumTextValue("GroupId")]
		[ColumnEnum("GroupId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		GroupId = 1,
		/// <summary>
		/// GroupName : 
		/// </summary>
		[EnumTextValue("GroupName")]
		[ColumnEnum("GroupName", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		GroupName = 2,
		/// <summary>
		/// GroupDescription : 
		/// </summary>
		[EnumTextValue("GroupDescription")]
		[ColumnEnum("GroupDescription", typeof(System.String), System.Data.DbType.String, false, false, true, 2048)]
		GroupDescription = 3,
		/// <summary>
		/// OrderNumber : 
		/// </summary>
		[EnumTextValue("OrderNumber")]
		[ColumnEnum("OrderNumber", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OrderNumber = 4,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate = 5,
		/// <summary>
		/// CreatedBy : 
		/// </summary>
		[EnumTextValue("CreatedBy")]
		[ColumnEnum("CreatedBy", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		CreatedBy = 6,
		/// <summary>
		/// UpdatedDate : 
		/// </summary>
		[EnumTextValue("UpdatedDate")]
		[ColumnEnum("UpdatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdatedDate = 7,
		/// <summary>
		/// UpdatedBy : 
		/// </summary>
		[EnumTextValue("UpdatedBy")]
		[ColumnEnum("UpdatedBy", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		UpdatedBy = 8
	}//End enum

	#endregion QuestionGroupsColumn Enum

} // end namespace
