
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AspnetWebEventEvents.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using NDMSInvestigation.Entities.Validation;
#endregion

namespace NDMSInvestigation.Entities
{
	///<summary>
	/// An object representation of the 'aspnet_WebEvent_Events' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AspnetWebEventEventsBase : EntityBase, IAspnetWebEventEvents, IEntityId<AspnetWebEventEventsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AspnetWebEventEventsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AspnetWebEventEventsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AspnetWebEventEventsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AspnetWebEventEvents> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AspnetWebEventEventsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AspnetWebEventEventsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AspnetWebEventEventsBase"/> instance.
		///</summary>
		public AspnetWebEventEventsBase()
		{
			this.entityData = new AspnetWebEventEventsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AspnetWebEventEventsBase"/> instance.
		///</summary>
		///<param name="_eventId"></param>
		///<param name="_eventTimeUtc"></param>
		///<param name="_eventTime"></param>
		///<param name="_eventType"></param>
		///<param name="_eventSequence"></param>
		///<param name="_eventOccurrence"></param>
		///<param name="_eventCode"></param>
		///<param name="_eventDetailCode"></param>
		///<param name="_message"></param>
		///<param name="_applicationPath"></param>
		///<param name="_applicationVirtualPath"></param>
		///<param name="_machineName"></param>
		///<param name="_requestUrl"></param>
		///<param name="_exceptionType"></param>
		///<param name="_details"></param>
		public AspnetWebEventEventsBase(System.String _eventId, System.DateTime _eventTimeUtc, 
			System.DateTime _eventTime, System.String _eventType, System.Decimal _eventSequence, 
			System.Decimal _eventOccurrence, System.Int32 _eventCode, System.Int32 _eventDetailCode, 
			System.String _message, System.String _applicationPath, System.String _applicationVirtualPath, 
			System.String _machineName, System.String _requestUrl, System.String _exceptionType, 
			System.String _details)
		{
			this.entityData = new AspnetWebEventEventsEntityData();
			this.backupData = null;

			this.EventId = _eventId;
			this.EventTimeUtc = _eventTimeUtc;
			this.EventTime = _eventTime;
			this.EventType = _eventType;
			this.EventSequence = _eventSequence;
			this.EventOccurrence = _eventOccurrence;
			this.EventCode = _eventCode;
			this.EventDetailCode = _eventDetailCode;
			this.Message = _message;
			this.ApplicationPath = _applicationPath;
			this.ApplicationVirtualPath = _applicationVirtualPath;
			this.MachineName = _machineName;
			this.RequestUrl = _requestUrl;
			this.ExceptionType = _exceptionType;
			this.Details = _details;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AspnetWebEventEvents"/> instance.
		///</summary>
		///<param name="_eventId"></param>
		///<param name="_eventTimeUtc"></param>
		///<param name="_eventTime"></param>
		///<param name="_eventType"></param>
		///<param name="_eventSequence"></param>
		///<param name="_eventOccurrence"></param>
		///<param name="_eventCode"></param>
		///<param name="_eventDetailCode"></param>
		///<param name="_message"></param>
		///<param name="_applicationPath"></param>
		///<param name="_applicationVirtualPath"></param>
		///<param name="_machineName"></param>
		///<param name="_requestUrl"></param>
		///<param name="_exceptionType"></param>
		///<param name="_details"></param>
		public static AspnetWebEventEvents CreateAspnetWebEventEvents(System.String _eventId, System.DateTime _eventTimeUtc, 
			System.DateTime _eventTime, System.String _eventType, System.Decimal _eventSequence, 
			System.Decimal _eventOccurrence, System.Int32 _eventCode, System.Int32 _eventDetailCode, 
			System.String _message, System.String _applicationPath, System.String _applicationVirtualPath, 
			System.String _machineName, System.String _requestUrl, System.String _exceptionType, 
			System.String _details)
		{
			AspnetWebEventEvents newAspnetWebEventEvents = new AspnetWebEventEvents();
			newAspnetWebEventEvents.EventId = _eventId;
			newAspnetWebEventEvents.EventTimeUtc = _eventTimeUtc;
			newAspnetWebEventEvents.EventTime = _eventTime;
			newAspnetWebEventEvents.EventType = _eventType;
			newAspnetWebEventEvents.EventSequence = _eventSequence;
			newAspnetWebEventEvents.EventOccurrence = _eventOccurrence;
			newAspnetWebEventEvents.EventCode = _eventCode;
			newAspnetWebEventEvents.EventDetailCode = _eventDetailCode;
			newAspnetWebEventEvents.Message = _message;
			newAspnetWebEventEvents.ApplicationPath = _applicationPath;
			newAspnetWebEventEvents.ApplicationVirtualPath = _applicationVirtualPath;
			newAspnetWebEventEvents.MachineName = _machineName;
			newAspnetWebEventEvents.RequestUrl = _requestUrl;
			newAspnetWebEventEvents.ExceptionType = _exceptionType;
			newAspnetWebEventEvents.Details = _details;
			return newAspnetWebEventEvents;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the EventId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="EventId")]
		[ValidatorComposition(CompositionType.And, Tag="EventId")]

		[StringLengthValidator(32, MessageTemplate="Maximum length has been exceeded.", Tag="EventId")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 32)]
		public virtual System.String EventId
		{
			get
			{
				return this.entityData.EventId; 
			}
			
			set
			{
				if (this.entityData.EventId == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.EventId, this.entityData.EventId);
				this.entityData.EventId = value;
				this.EntityId.EventId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.EventId, this.entityData.EventId);
				OnPropertyChanged("EventId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the EventId property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the EventId property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalEventId
		{
			get { return this.entityData.OriginalEventId; }
			set { this.entityData.OriginalEventId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the EventTimeUtc property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime EventTimeUtc
		{
			get
			{
				return this.entityData.EventTimeUtc; 
			}
			
			set
			{
				if (this.entityData.EventTimeUtc == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.EventTimeUtc, this.entityData.EventTimeUtc);
				this.entityData.EventTimeUtc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.EventTimeUtc, this.entityData.EventTimeUtc);
				OnPropertyChanged("EventTimeUtc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EventTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime EventTime
		{
			get
			{
				return this.entityData.EventTime; 
			}
			
			set
			{
				if (this.entityData.EventTime == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.EventTime, this.entityData.EventTime);
				this.entityData.EventTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.EventTime, this.entityData.EventTime);
				OnPropertyChanged("EventTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EventType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="EventType")]
		[ValidatorComposition(CompositionType.And, Tag="EventType")]

		[StringLengthValidator(256, MessageTemplate="Maximum length has been exceeded.", Tag="EventType")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 256)]
		public virtual System.String EventType
		{
			get
			{
				return this.entityData.EventType; 
			}
			
			set
			{
				if (this.entityData.EventType == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.EventType, this.entityData.EventType);
				this.entityData.EventType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.EventType, this.entityData.EventType);
				OnPropertyChanged("EventType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EventSequence property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EventSequence
		{
			get
			{
				return this.entityData.EventSequence; 
			}
			
			set
			{
				if (this.entityData.EventSequence == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.EventSequence, this.entityData.EventSequence);
				this.entityData.EventSequence = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.EventSequence, this.entityData.EventSequence);
				OnPropertyChanged("EventSequence");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EventOccurrence property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal EventOccurrence
		{
			get
			{
				return this.entityData.EventOccurrence; 
			}
			
			set
			{
				if (this.entityData.EventOccurrence == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.EventOccurrence, this.entityData.EventOccurrence);
				this.entityData.EventOccurrence = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.EventOccurrence, this.entityData.EventOccurrence);
				OnPropertyChanged("EventOccurrence");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EventCode property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 EventCode
		{
			get
			{
				return this.entityData.EventCode; 
			}
			
			set
			{
				if (this.entityData.EventCode == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.EventCode, this.entityData.EventCode);
				this.entityData.EventCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.EventCode, this.entityData.EventCode);
				OnPropertyChanged("EventCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EventDetailCode property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 EventDetailCode
		{
			get
			{
				return this.entityData.EventDetailCode; 
			}
			
			set
			{
				if (this.entityData.EventDetailCode == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.EventDetailCode, this.entityData.EventDetailCode);
				this.entityData.EventDetailCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.EventDetailCode, this.entityData.EventDetailCode);
				OnPropertyChanged("EventDetailCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Message property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Message")]
		[ValidatorComposition(CompositionType.Or, Tag="Message")]
		[StringLengthValidator(1024, MessageTemplate="Maximum length has been exceeded.", Tag="Message")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String Message
		{
			get
			{
				return this.entityData.Message; 
			}
			
			set
			{
				if (this.entityData.Message == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.Message, this.entityData.Message);
				this.entityData.Message = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.Message, this.entityData.Message);
				OnPropertyChanged("Message");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApplicationPath property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="ApplicationPath")]
		[ValidatorComposition(CompositionType.Or, Tag="ApplicationPath")]
		[StringLengthValidator(256, MessageTemplate="Maximum length has been exceeded.", Tag="ApplicationPath")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 256)]
		public virtual System.String ApplicationPath
		{
			get
			{
				return this.entityData.ApplicationPath; 
			}
			
			set
			{
				if (this.entityData.ApplicationPath == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.ApplicationPath, this.entityData.ApplicationPath);
				this.entityData.ApplicationPath = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.ApplicationPath, this.entityData.ApplicationPath);
				OnPropertyChanged("ApplicationPath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApplicationVirtualPath property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="ApplicationVirtualPath")]
		[ValidatorComposition(CompositionType.Or, Tag="ApplicationVirtualPath")]
		[StringLengthValidator(256, MessageTemplate="Maximum length has been exceeded.", Tag="ApplicationVirtualPath")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 256)]
		public virtual System.String ApplicationVirtualPath
		{
			get
			{
				return this.entityData.ApplicationVirtualPath; 
			}
			
			set
			{
				if (this.entityData.ApplicationVirtualPath == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.ApplicationVirtualPath, this.entityData.ApplicationVirtualPath);
				this.entityData.ApplicationVirtualPath = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.ApplicationVirtualPath, this.entityData.ApplicationVirtualPath);
				OnPropertyChanged("ApplicationVirtualPath");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MachineName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="MachineName")]
		[ValidatorComposition(CompositionType.And, Tag="MachineName")]

		[StringLengthValidator(256, MessageTemplate="Maximum length has been exceeded.", Tag="MachineName")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 256)]
		public virtual System.String MachineName
		{
			get
			{
				return this.entityData.MachineName; 
			}
			
			set
			{
				if (this.entityData.MachineName == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.MachineName, this.entityData.MachineName);
				this.entityData.MachineName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.MachineName, this.entityData.MachineName);
				OnPropertyChanged("MachineName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestUrl property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="RequestUrl")]
		[ValidatorComposition(CompositionType.Or, Tag="RequestUrl")]
		[StringLengthValidator(1024, MessageTemplate="Maximum length has been exceeded.", Tag="RequestUrl")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String RequestUrl
		{
			get
			{
				return this.entityData.RequestUrl; 
			}
			
			set
			{
				if (this.entityData.RequestUrl == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.RequestUrl, this.entityData.RequestUrl);
				this.entityData.RequestUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.RequestUrl, this.entityData.RequestUrl);
				OnPropertyChanged("RequestUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExceptionType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="ExceptionType")]
		[ValidatorComposition(CompositionType.Or, Tag="ExceptionType")]
		[StringLengthValidator(256, MessageTemplate="Maximum length has been exceeded.", Tag="ExceptionType")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 256)]
		public virtual System.String ExceptionType
		{
			get
			{
				return this.entityData.ExceptionType; 
			}
			
			set
			{
				if (this.entityData.ExceptionType == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.ExceptionType, this.entityData.ExceptionType);
				this.entityData.ExceptionType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.ExceptionType, this.entityData.ExceptionType);
				OnPropertyChanged("ExceptionType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Details property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Details
		{
			get
			{
				return this.entityData.Details; 
			}
			
			set
			{
				if (this.entityData.Details == value)
					return;
					
				OnColumnChanging(AspnetWebEventEventsColumn.Details, this.entityData.Details);
				this.entityData.Details = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetWebEventEventsColumn.Details, this.entityData.Details);
				OnPropertyChanged("Details");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "aspnet_WebEvent_Events"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"EventId", "EventTimeUtc", "EventTime", "EventType", "EventSequence", "EventOccurrence", "EventCode", "EventDetailCode", "Message", "ApplicationPath", "ApplicationVirtualPath", "MachineName", "RequestUrl", "ExceptionType", "Details"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AspnetWebEventEventsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AspnetWebEventEvents) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AspnetWebEventEvents>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AspnetWebEventEvents);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AspnetWebEventEvents Entity 
		///</summary>
		protected virtual AspnetWebEventEvents Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AspnetWebEventEvents copy = new AspnetWebEventEvents();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.EventId = this.EventId;
					copy.OriginalEventId = this.OriginalEventId;
				copy.EventTimeUtc = this.EventTimeUtc;
				copy.EventTime = this.EventTime;
				copy.EventType = this.EventType;
				copy.EventSequence = this.EventSequence;
				copy.EventOccurrence = this.EventOccurrence;
				copy.EventCode = this.EventCode;
				copy.EventDetailCode = this.EventDetailCode;
				copy.Message = this.Message;
				copy.ApplicationPath = this.ApplicationPath;
				copy.ApplicationVirtualPath = this.ApplicationVirtualPath;
				copy.MachineName = this.MachineName;
				copy.RequestUrl = this.RequestUrl;
				copy.ExceptionType = this.ExceptionType;
				copy.Details = this.Details;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AspnetWebEventEvents Entity 
		///</summary>
		public virtual AspnetWebEventEvents Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AspnetWebEventEvents Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AspnetWebEventEvents DeepCopy()
		{
			return EntityHelper.Clone<AspnetWebEventEvents>(this as AspnetWebEventEvents);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AspnetWebEventEventsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AspnetWebEventEventsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AspnetWebEventEventsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AspnetWebEventEventsColumn column)
		{
			switch(column)
			{
					case AspnetWebEventEventsColumn.EventId:
					return entityData.EventId != _originalData.EventId;
					case AspnetWebEventEventsColumn.EventTimeUtc:
					return entityData.EventTimeUtc != _originalData.EventTimeUtc;
					case AspnetWebEventEventsColumn.EventTime:
					return entityData.EventTime != _originalData.EventTime;
					case AspnetWebEventEventsColumn.EventType:
					return entityData.EventType != _originalData.EventType;
					case AspnetWebEventEventsColumn.EventSequence:
					return entityData.EventSequence != _originalData.EventSequence;
					case AspnetWebEventEventsColumn.EventOccurrence:
					return entityData.EventOccurrence != _originalData.EventOccurrence;
					case AspnetWebEventEventsColumn.EventCode:
					return entityData.EventCode != _originalData.EventCode;
					case AspnetWebEventEventsColumn.EventDetailCode:
					return entityData.EventDetailCode != _originalData.EventDetailCode;
					case AspnetWebEventEventsColumn.Message:
					return entityData.Message != _originalData.Message;
					case AspnetWebEventEventsColumn.ApplicationPath:
					return entityData.ApplicationPath != _originalData.ApplicationPath;
					case AspnetWebEventEventsColumn.ApplicationVirtualPath:
					return entityData.ApplicationVirtualPath != _originalData.ApplicationVirtualPath;
					case AspnetWebEventEventsColumn.MachineName:
					return entityData.MachineName != _originalData.MachineName;
					case AspnetWebEventEventsColumn.RequestUrl:
					return entityData.RequestUrl != _originalData.RequestUrl;
					case AspnetWebEventEventsColumn.ExceptionType:
					return entityData.ExceptionType != _originalData.ExceptionType;
					case AspnetWebEventEventsColumn.Details:
					return entityData.Details != _originalData.Details;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AspnetWebEventEventsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.EventId != _originalData.EventId;
			result = result || entityData.EventTimeUtc != _originalData.EventTimeUtc;
			result = result || entityData.EventTime != _originalData.EventTime;
			result = result || entityData.EventType != _originalData.EventType;
			result = result || entityData.EventSequence != _originalData.EventSequence;
			result = result || entityData.EventOccurrence != _originalData.EventOccurrence;
			result = result || entityData.EventCode != _originalData.EventCode;
			result = result || entityData.EventDetailCode != _originalData.EventDetailCode;
			result = result || entityData.Message != _originalData.Message;
			result = result || entityData.ApplicationPath != _originalData.ApplicationPath;
			result = result || entityData.ApplicationVirtualPath != _originalData.ApplicationVirtualPath;
			result = result || entityData.MachineName != _originalData.MachineName;
			result = result || entityData.RequestUrl != _originalData.RequestUrl;
			result = result || entityData.ExceptionType != _originalData.ExceptionType;
			result = result || entityData.Details != _originalData.Details;
			return result;
		}	
		
		///<summary>
		///  Returns a AspnetWebEventEvents Entity with the original data.
		///</summary>
		public AspnetWebEventEvents GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAspnetWebEventEvents(
				_originalData.EventId,
				_originalData.EventTimeUtc,
				_originalData.EventTime,
				_originalData.EventType,
				_originalData.EventSequence,
				_originalData.EventOccurrence,
				_originalData.EventCode,
				_originalData.EventDetailCode,
				_originalData.Message,
				_originalData.ApplicationPath,
				_originalData.ApplicationVirtualPath,
				_originalData.MachineName,
				_originalData.RequestUrl,
				_originalData.ExceptionType,
				_originalData.Details
				);
				
			return (AspnetWebEventEvents)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AspnetWebEventEventsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AspnetWebEventEventsBase)
				return ValueEquals(this, (AspnetWebEventEventsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AspnetWebEventEventsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.EventId.GetHashCode() ^ 
					this.EventTimeUtc.GetHashCode() ^ 
					this.EventTime.GetHashCode() ^ 
					this.EventType.GetHashCode() ^ 
					this.EventSequence.GetHashCode() ^ 
					this.EventOccurrence.GetHashCode() ^ 
					this.EventCode.GetHashCode() ^ 
					this.EventDetailCode.GetHashCode() ^ 
					((this.Message == null) ? string.Empty : this.Message.ToString()).GetHashCode() ^ 
					((this.ApplicationPath == null) ? string.Empty : this.ApplicationPath.ToString()).GetHashCode() ^ 
					((this.ApplicationVirtualPath == null) ? string.Empty : this.ApplicationVirtualPath.ToString()).GetHashCode() ^ 
					this.MachineName.GetHashCode() ^ 
					((this.RequestUrl == null) ? string.Empty : this.RequestUrl.ToString()).GetHashCode() ^ 
					((this.ExceptionType == null) ? string.Empty : this.ExceptionType.ToString()).GetHashCode() ^ 
					((this.Details == null) ? string.Empty : this.Details.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AspnetWebEventEventsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AspnetWebEventEventsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AspnetWebEventEventsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AspnetWebEventEventsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AspnetWebEventEventsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AspnetWebEventEventsBase Object1, AspnetWebEventEventsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.EventId != Object2.EventId)
				equal = false;
			if (Object1.EventTimeUtc != Object2.EventTimeUtc)
				equal = false;
			if (Object1.EventTime != Object2.EventTime)
				equal = false;
			if (Object1.EventType != Object2.EventType)
				equal = false;
			if (Object1.EventSequence != Object2.EventSequence)
				equal = false;
			if (Object1.EventOccurrence != Object2.EventOccurrence)
				equal = false;
			if (Object1.EventCode != Object2.EventCode)
				equal = false;
			if (Object1.EventDetailCode != Object2.EventDetailCode)
				equal = false;
			if ( Object1.Message != null && Object2.Message != null )
			{
				if (Object1.Message != Object2.Message)
					equal = false;
			}
			else if (Object1.Message == null ^ Object2.Message == null )
			{
				equal = false;
			}
			if ( Object1.ApplicationPath != null && Object2.ApplicationPath != null )
			{
				if (Object1.ApplicationPath != Object2.ApplicationPath)
					equal = false;
			}
			else if (Object1.ApplicationPath == null ^ Object2.ApplicationPath == null )
			{
				equal = false;
			}
			if ( Object1.ApplicationVirtualPath != null && Object2.ApplicationVirtualPath != null )
			{
				if (Object1.ApplicationVirtualPath != Object2.ApplicationVirtualPath)
					equal = false;
			}
			else if (Object1.ApplicationVirtualPath == null ^ Object2.ApplicationVirtualPath == null )
			{
				equal = false;
			}
			if (Object1.MachineName != Object2.MachineName)
				equal = false;
			if ( Object1.RequestUrl != null && Object2.RequestUrl != null )
			{
				if (Object1.RequestUrl != Object2.RequestUrl)
					equal = false;
			}
			else if (Object1.RequestUrl == null ^ Object2.RequestUrl == null )
			{
				equal = false;
			}
			if ( Object1.ExceptionType != null && Object2.ExceptionType != null )
			{
				if (Object1.ExceptionType != Object2.ExceptionType)
					equal = false;
			}
			else if (Object1.ExceptionType == null ^ Object2.ExceptionType == null )
			{
				equal = false;
			}
			if ( Object1.Details != null && Object2.Details != null )
			{
				if (Object1.Details != Object2.Details)
					equal = false;
			}
			else if (Object1.Details == null ^ Object2.Details == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AspnetWebEventEventsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AspnetWebEventEventsComparer GetComparer()
        {
            return new AspnetWebEventEventsComparer();
        }
        */

        // Comparer delegates back to AspnetWebEventEvents
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AspnetWebEventEvents rhs, AspnetWebEventEventsColumn which)
        {
            switch (which)
            {
            	
            	
            	case AspnetWebEventEventsColumn.EventId:
            		return this.EventId.CompareTo(rhs.EventId);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.EventTimeUtc:
            		return this.EventTimeUtc.CompareTo(rhs.EventTimeUtc);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.EventTime:
            		return this.EventTime.CompareTo(rhs.EventTime);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.EventType:
            		return this.EventType.CompareTo(rhs.EventType);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.EventSequence:
            		return this.EventSequence.CompareTo(rhs.EventSequence);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.EventOccurrence:
            		return this.EventOccurrence.CompareTo(rhs.EventOccurrence);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.EventCode:
            		return this.EventCode.CompareTo(rhs.EventCode);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.EventDetailCode:
            		return this.EventDetailCode.CompareTo(rhs.EventDetailCode);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.Message:
            		return this.Message.CompareTo(rhs.Message);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.ApplicationPath:
            		return this.ApplicationPath.CompareTo(rhs.ApplicationPath);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.ApplicationVirtualPath:
            		return this.ApplicationVirtualPath.CompareTo(rhs.ApplicationVirtualPath);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.MachineName:
            		return this.MachineName.CompareTo(rhs.MachineName);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.RequestUrl:
            		return this.RequestUrl.CompareTo(rhs.RequestUrl);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.ExceptionType:
            		return this.ExceptionType.CompareTo(rhs.ExceptionType);
            		
            		                 
            	
            	
            	case AspnetWebEventEventsColumn.Details:
            		return this.Details.CompareTo(rhs.Details);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AspnetWebEventEventsKey> Members
		
		// member variable for the EntityId property
		private AspnetWebEventEventsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AspnetWebEventEventsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AspnetWebEventEventsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AspnetWebEventEvents")
					.Append("|").Append( this.EventId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{16}{15}- EventId: {0}{15}- EventTimeUtc: {1}{15}- EventTime: {2}{15}- EventType: {3}{15}- EventSequence: {4}{15}- EventOccurrence: {5}{15}- EventCode: {6}{15}- EventDetailCode: {7}{15}- Message: {8}{15}- ApplicationPath: {9}{15}- ApplicationVirtualPath: {10}{15}- MachineName: {11}{15}- RequestUrl: {12}{15}- ExceptionType: {13}{15}- Details: {14}{15}{17}", 
				this.EventId,
				this.EventTimeUtc,
				this.EventTime,
				this.EventType,
				this.EventSequence,
				this.EventOccurrence,
				this.EventCode,
				this.EventDetailCode,
				(this.Message == null) ? string.Empty : this.Message.ToString(),
				(this.ApplicationPath == null) ? string.Empty : this.ApplicationPath.ToString(),
				(this.ApplicationVirtualPath == null) ? string.Empty : this.ApplicationVirtualPath.ToString(),
				this.MachineName,
				(this.RequestUrl == null) ? string.Empty : this.RequestUrl.ToString(),
				(this.ExceptionType == null) ? string.Empty : this.ExceptionType.ToString(),
				(this.Details == null) ? string.Empty : this.Details.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'aspnet_WebEvent_Events' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AspnetWebEventEventsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// EventId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "aspnet_WebEvent_Events"</remarks>
		public System.String EventId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalEventId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// EventTimeUtc : 
		/// </summary>
		public System.DateTime		  EventTimeUtc = DateTime.MinValue;
		
		/// <summary>
		/// EventTime : 
		/// </summary>
		public System.DateTime		  EventTime = DateTime.MinValue;
		
		/// <summary>
		/// EventType : 
		/// </summary>
		public System.String		  EventType = string.Empty;
		
		/// <summary>
		/// EventSequence : 
		/// </summary>
		public System.Decimal		  EventSequence = 0.0m;
		
		/// <summary>
		/// EventOccurrence : 
		/// </summary>
		public System.Decimal		  EventOccurrence = 0.0m;
		
		/// <summary>
		/// EventCode : 
		/// </summary>
		public System.Int32		  EventCode = (int)0;
		
		/// <summary>
		/// EventDetailCode : 
		/// </summary>
		public System.Int32		  EventDetailCode = (int)0;
		
		/// <summary>
		/// Message : 
		/// </summary>
		public System.String		  Message = null;
		
		/// <summary>
		/// ApplicationPath : 
		/// </summary>
		public System.String		  ApplicationPath = null;
		
		/// <summary>
		/// ApplicationVirtualPath : 
		/// </summary>
		public System.String		  ApplicationVirtualPath = null;
		
		/// <summary>
		/// MachineName : 
		/// </summary>
		public System.String		  MachineName = string.Empty;
		
		/// <summary>
		/// RequestUrl : 
		/// </summary>
		public System.String		  RequestUrl = null;
		
		/// <summary>
		/// ExceptionType : 
		/// </summary>
		public System.String		  ExceptionType = null;
		
		/// <summary>
		/// Details : 
		/// </summary>
		public System.String		  Details = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AspnetWebEventEventsEntityData _tmp = new AspnetWebEventEventsEntityData();
						
			_tmp.EventId = this.EventId;
			_tmp.OriginalEventId = this.OriginalEventId;
			
			_tmp.EventTimeUtc = this.EventTimeUtc;
			_tmp.EventTime = this.EventTime;
			_tmp.EventType = this.EventType;
			_tmp.EventSequence = this.EventSequence;
			_tmp.EventOccurrence = this.EventOccurrence;
			_tmp.EventCode = this.EventCode;
			_tmp.EventDetailCode = this.EventDetailCode;
			_tmp.Message = this.Message;
			_tmp.ApplicationPath = this.ApplicationPath;
			_tmp.ApplicationVirtualPath = this.ApplicationVirtualPath;
			_tmp.MachineName = this.MachineName;
			_tmp.RequestUrl = this.RequestUrl;
			_tmp.ExceptionType = this.ExceptionType;
			_tmp.Details = this.Details;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AspnetWebEventEventsEntityData _tmp = new AspnetWebEventEventsEntityData();
						
			_tmp.EventId = this.EventId;
			_tmp.OriginalEventId = this.OriginalEventId;
			
			_tmp.EventTimeUtc = this.EventTimeUtc;
			_tmp.EventTime = this.EventTime;
			_tmp.EventType = this.EventType;
			_tmp.EventSequence = this.EventSequence;
			_tmp.EventOccurrence = this.EventOccurrence;
			_tmp.EventCode = this.EventCode;
			_tmp.EventDetailCode = this.EventDetailCode;
			_tmp.Message = this.Message;
			_tmp.ApplicationPath = this.ApplicationPath;
			_tmp.ApplicationVirtualPath = this.ApplicationVirtualPath;
			_tmp.MachineName = this.MachineName;
			_tmp.RequestUrl = this.RequestUrl;
			_tmp.ExceptionType = this.ExceptionType;
			_tmp.Details = this.Details;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AspnetWebEventEventsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AspnetWebEventEventsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AspnetWebEventEventsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AspnetWebEventEventsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AspnetWebEventEventsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AspnetWebEventEventsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AspnetWebEventEventsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AspnetWebEventEventsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AspnetWebEventEventsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AspnetWebEventEventsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AspnetWebEventEventsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AspnetWebEventEventsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AspnetWebEventEventsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AspnetWebEventEvents"/> object.
	/// </remarks>
	public class AspnetWebEventEventsEventArgs : System.EventArgs
	{
		private AspnetWebEventEventsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AspnetWebEventEventsEventArgs class.
		///</summary>
		public AspnetWebEventEventsEventArgs(AspnetWebEventEventsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AspnetWebEventEventsEventArgs class.
		///</summary>
		public AspnetWebEventEventsEventArgs(AspnetWebEventEventsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AspnetWebEventEventsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AspnetWebEventEventsColumn" />
		public AspnetWebEventEventsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AspnetWebEventEvents related events.
	///</summary>
	public delegate void AspnetWebEventEventsEventHandler(object sender, AspnetWebEventEventsEventArgs e);
	
	#region AspnetWebEventEventsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AspnetWebEventEventsComparer : System.Collections.Generic.IComparer<AspnetWebEventEvents>
	{
		AspnetWebEventEventsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AspnetWebEventEventsComparer"/> class.
        /// </summary>
		public AspnetWebEventEventsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AspnetWebEventEventsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AspnetWebEventEventsComparer(AspnetWebEventEventsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AspnetWebEventEvents"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AspnetWebEventEvents"/> to compare.</param>
        /// <param name="b">The second <c>AspnetWebEventEvents</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AspnetWebEventEvents a, AspnetWebEventEvents b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AspnetWebEventEvents entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AspnetWebEventEvents a, AspnetWebEventEvents b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AspnetWebEventEventsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AspnetWebEventEventsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AspnetWebEventEvents"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AspnetWebEventEventsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AspnetWebEventEventsKey class.
		/// </summary>
		public AspnetWebEventEventsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AspnetWebEventEventsKey class.
		/// </summary>
		public AspnetWebEventEventsKey(AspnetWebEventEventsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.EventId = entity.EventId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AspnetWebEventEventsKey class.
		/// </summary>
		public AspnetWebEventEventsKey(System.String _eventId)
		{
			#region Init Properties

			this.EventId = _eventId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AspnetWebEventEventsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AspnetWebEventEventsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the EventId property
		private System.String _eventId;
		
		/// <summary>
		/// Gets or sets the EventId property.
		/// </summary>
		public System.String EventId
		{
			get { return _eventId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.EventId = value;
				
				_eventId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				EventId = ( values["EventId"] != null ) ? (System.String) EntityUtil.ChangeType(values["EventId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("EventId", EventId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("EventId: {0}{1}",
								EventId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AspnetWebEventEventsColumn Enum
	
	/// <summary>
	/// Enumerate the AspnetWebEventEvents columns.
	/// </summary>
	[Serializable]
	public enum AspnetWebEventEventsColumn : int
	{
		/// <summary>
		/// EventId : 
		/// </summary>
		[EnumTextValue("EventId")]
		[ColumnEnum("EventId", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, true, false, false, 32)]
		EventId = 1,
		/// <summary>
		/// EventTimeUtc : 
		/// </summary>
		[EnumTextValue("EventTimeUtc")]
		[ColumnEnum("EventTimeUtc", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		EventTimeUtc = 2,
		/// <summary>
		/// EventTime : 
		/// </summary>
		[EnumTextValue("EventTime")]
		[ColumnEnum("EventTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		EventTime = 3,
		/// <summary>
		/// EventType : 
		/// </summary>
		[EnumTextValue("EventType")]
		[ColumnEnum("EventType", typeof(System.String), System.Data.DbType.String, false, false, false, 256)]
		EventType = 4,
		/// <summary>
		/// EventSequence : 
		/// </summary>
		[EnumTextValue("EventSequence")]
		[ColumnEnum("EventSequence", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EventSequence = 5,
		/// <summary>
		/// EventOccurrence : 
		/// </summary>
		[EnumTextValue("EventOccurrence")]
		[ColumnEnum("EventOccurrence", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		EventOccurrence = 6,
		/// <summary>
		/// EventCode : 
		/// </summary>
		[EnumTextValue("EventCode")]
		[ColumnEnum("EventCode", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EventCode = 7,
		/// <summary>
		/// EventDetailCode : 
		/// </summary>
		[EnumTextValue("EventDetailCode")]
		[ColumnEnum("EventDetailCode", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EventDetailCode = 8,
		/// <summary>
		/// Message : 
		/// </summary>
		[EnumTextValue("Message")]
		[ColumnEnum("Message", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		Message = 9,
		/// <summary>
		/// ApplicationPath : 
		/// </summary>
		[EnumTextValue("ApplicationPath")]
		[ColumnEnum("ApplicationPath", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		ApplicationPath = 10,
		/// <summary>
		/// ApplicationVirtualPath : 
		/// </summary>
		[EnumTextValue("ApplicationVirtualPath")]
		[ColumnEnum("ApplicationVirtualPath", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		ApplicationVirtualPath = 11,
		/// <summary>
		/// MachineName : 
		/// </summary>
		[EnumTextValue("MachineName")]
		[ColumnEnum("MachineName", typeof(System.String), System.Data.DbType.String, false, false, false, 256)]
		MachineName = 12,
		/// <summary>
		/// RequestUrl : 
		/// </summary>
		[EnumTextValue("RequestUrl")]
		[ColumnEnum("RequestUrl", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		RequestUrl = 13,
		/// <summary>
		/// ExceptionType : 
		/// </summary>
		[EnumTextValue("ExceptionType")]
		[ColumnEnum("ExceptionType", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		ExceptionType = 14,
		/// <summary>
		/// Details : 
		/// </summary>
		[EnumTextValue("Details")]
		[ColumnEnum("Details", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Details = 15
	}//End enum

	#endregion AspnetWebEventEventsColumn Enum

} // end namespace
