<?xml version="1.0" encoding="utf-8" ?>
<?xml-stylesheet type='text/xsl' href="scriptsql.xsl"?>
<root xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<database includeDrop="true">NDMSInvestigation</database>
<procedures>
		
		<procedure owner="dbo" name="CompanyDetails_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the CompanyDetails table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[CompanyId],
					[UserId],
					[CompanyName],
					[Phone],
					[Fax],
					[Email],
					[Address],
					[EmployeeNumber],
					[Director],
					[Country],
					[City],
					[District],
					[CreatedDate],
					[UpdatedDate],
					[Description],
					[CurrentTotalMark],
					[TraceChange]
				FROM
					[dbo].[CompanyDetails]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="CompanyDetails_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the CompanyDetails table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [CompanyId] int 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([CompanyId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [CompanyId]'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyDetails]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[CompanyId], O.[UserId], O.[CompanyName], O.[Phone], O.[Fax], O.[Email], O.[Address], O.[EmployeeNumber], O.[Director], O.[Country], O.[City], O.[District], O.[CreatedDate], O.[UpdatedDate], O.[Description], O.[CurrentTotalMark], O.[TraceChange]
				FROM
				    [dbo].[CompanyDetails] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[CompanyId] = PageIndex.[CompanyId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyDetails]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="CompanyDetails_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the CompanyDetails table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CompanyId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@Fax" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@Email" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@Address" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@EmployeeNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Director" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@Country" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@City" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@District" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
				<parameter name="@CurrentTotalMark" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TraceChange" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[CompanyDetails]
					(
					[UserId]
					,[CompanyName]
					,[Phone]
					,[Fax]
					,[Email]
					,[Address]
					,[EmployeeNumber]
					,[Director]
					,[Country]
					,[City]
					,[District]
					,[CreatedDate]
					,[UpdatedDate]
					,[Description]
					,[CurrentTotalMark]
					,[TraceChange]
					)
				VALUES
					(
					@UserId
					,@CompanyName
					,@Phone
					,@Fax
					,@Email
					,@Address
					,@EmployeeNumber
					,@Director
					,@Country
					,@City
					,@District
					,@CreatedDate
					,@UpdatedDate
					,@Description
					,@CurrentTotalMark
					,@TraceChange
					)
				
				-- Get the identity value
				SET @CompanyId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="CompanyDetails_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the CompanyDetails table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@Fax" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@Email" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@Address" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@EmployeeNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Director" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@Country" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@City" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@District" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
				<parameter name="@CurrentTotalMark" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TraceChange" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CompanyDetails]
				SET
					[UserId] = @UserId
					,[CompanyName] = @CompanyName
					,[Phone] = @Phone
					,[Fax] = @Fax
					,[Email] = @Email
					,[Address] = @Address
					,[EmployeeNumber] = @EmployeeNumber
					,[Director] = @Director
					,[Country] = @Country
					,[City] = @City
					,[District] = @District
					,[CreatedDate] = @CreatedDate
					,[UpdatedDate] = @UpdatedDate
					,[Description] = @Description
					,[CurrentTotalMark] = @CurrentTotalMark
					,[TraceChange] = @TraceChange
				WHERE
[CompanyId] = @CompanyId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="CompanyDetails_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the CompanyDetails table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[CompanyDetails] WITH (ROWLOCK) 
				WHERE
					[CompanyId] = @CompanyId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="CompanyDetails_GetByTraceChange" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the CompanyDetails table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TraceChange" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[CompanyId],
					[UserId],
					[CompanyName],
					[Phone],
					[Fax],
					[Email],
					[Address],
					[EmployeeNumber],
					[Director],
					[Country],
					[City],
					[District],
					[CreatedDate],
					[UpdatedDate],
					[Description],
					[CurrentTotalMark],
					[TraceChange]
				FROM
					[dbo].[CompanyDetails]
				WHERE
					[TraceChange] = @TraceChange
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="CompanyDetails_GetByUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the CompanyDetails table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CompanyId],
					[UserId],
					[CompanyName],
					[Phone],
					[Fax],
					[Email],
					[Address],
					[EmployeeNumber],
					[Director],
					[Country],
					[City],
					[District],
					[CreatedDate],
					[UpdatedDate],
					[Description],
					[CurrentTotalMark],
					[TraceChange]
				FROM
					[dbo].[CompanyDetails]
				WHERE
					[UserId] = @UserId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="CompanyDetails_GetByCompanyId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the CompanyDetails table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[CompanyId],
					[UserId],
					[CompanyName],
					[Phone],
					[Fax],
					[Email],
					[Address],
					[EmployeeNumber],
					[Director],
					[Country],
					[City],
					[District],
					[CreatedDate],
					[UpdatedDate],
					[Description],
					[CurrentTotalMark],
					[TraceChange]
				FROM
					[dbo].[CompanyDetails]
				WHERE
					[CompanyId] = @CompanyId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="CompanyDetails_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the CompanyDetails table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@CompanyName" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@Phone" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@Fax" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@Email" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@Address" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault="null"/>
				<parameter name="@EmployeeNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Director" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault="null"/>
				<parameter name="@Country" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@City" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@District" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault="null"/>
				<parameter name="@CurrentTotalMark" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@TraceChange" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CompanyId]
	, [UserId]
	, [CompanyName]
	, [Phone]
	, [Fax]
	, [Email]
	, [Address]
	, [EmployeeNumber]
	, [Director]
	, [Country]
	, [City]
	, [District]
	, [CreatedDate]
	, [UpdatedDate]
	, [Description]
	, [CurrentTotalMark]
	, [TraceChange]
    FROM
	[dbo].[CompanyDetails]
    WHERE 
	 ([CompanyId] = @CompanyId OR @CompanyId IS NULL)
	AND ([UserId] = @UserId OR @UserId IS NULL)
	AND ([CompanyName] = @CompanyName OR @CompanyName IS NULL)
	AND ([Phone] = @Phone OR @Phone IS NULL)
	AND ([Fax] = @Fax OR @Fax IS NULL)
	AND ([Email] = @Email OR @Email IS NULL)
	AND ([Address] = @Address OR @Address IS NULL)
	AND ([EmployeeNumber] = @EmployeeNumber OR @EmployeeNumber IS NULL)
	AND ([Director] = @Director OR @Director IS NULL)
	AND ([Country] = @Country OR @Country IS NULL)
	AND ([City] = @City OR @City IS NULL)
	AND ([District] = @District OR @District IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([UpdatedDate] = @UpdatedDate OR @UpdatedDate IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([CurrentTotalMark] = @CurrentTotalMark OR @CurrentTotalMark IS NULL)
	AND ([TraceChange] = @TraceChange OR @TraceChange IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CompanyId]
	, [UserId]
	, [CompanyName]
	, [Phone]
	, [Fax]
	, [Email]
	, [Address]
	, [EmployeeNumber]
	, [Director]
	, [Country]
	, [City]
	, [District]
	, [CreatedDate]
	, [UpdatedDate]
	, [Description]
	, [CurrentTotalMark]
	, [TraceChange]
    FROM
	[dbo].[CompanyDetails]
    WHERE 
	 ([CompanyId] = @CompanyId AND @CompanyId is not null)
	OR ([UserId] = @UserId AND @UserId is not null)
	OR ([CompanyName] = @CompanyName AND @CompanyName is not null)
	OR ([Phone] = @Phone AND @Phone is not null)
	OR ([Fax] = @Fax AND @Fax is not null)
	OR ([Email] = @Email AND @Email is not null)
	OR ([Address] = @Address AND @Address is not null)
	OR ([EmployeeNumber] = @EmployeeNumber AND @EmployeeNumber is not null)
	OR ([Director] = @Director AND @Director is not null)
	OR ([Country] = @Country AND @Country is not null)
	OR ([City] = @City AND @City is not null)
	OR ([District] = @District AND @District is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([UpdatedDate] = @UpdatedDate AND @UpdatedDate is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([CurrentTotalMark] = @CurrentTotalMark AND @CurrentTotalMark is not null)
	OR ([TraceChange] = @TraceChange AND @TraceChange is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="CompanyDetails_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the CompanyDetails table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [CompanyId] int 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [CompanyId] )
				SELECT TOP {3} [CompanyId]
				FROM [dbo].[CompanyDetails] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[CompanyId], O.[UserId], O.[CompanyName], O.[Phone], O.[Fax], O.[Email], O.[Address], O.[EmployeeNumber], O.[Director], O.[Country], O.[City], O.[District], O.[CreatedDate], O.[UpdatedDate], O.[Description], O.[CurrentTotalMark], O.[TraceChange]
				FROM
				    [dbo].[CompanyDetails] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[CompanyId] = PageIndex.[CompanyId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[CompanyDetails] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_UsersInRoles_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the aspnet_UsersInRoles table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[UserId],
					[RoleId]
				FROM
					[dbo].[aspnet_UsersInRoles]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_UsersInRoles_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_UsersInRoles table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [UserId] uniqueidentifier, [RoleId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([UserId], [RoleId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [UserId], [RoleId]'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_UsersInRoles]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[UserId], O.[RoleId]
				FROM
				    [dbo].[aspnet_UsersInRoles] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[UserId] = PageIndex.[UserId]
					AND O.[RoleId] = PageIndex.[RoleId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_UsersInRoles]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="aspnet_UsersInRoles_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the aspnet_UsersInRoles table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@RoleId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[aspnet_UsersInRoles]
					(
					[UserId]
					,[RoleId]
					)
				VALUES
					(
					@UserId
					,@RoleId
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_UsersInRoles_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the aspnet_UsersInRoles table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalUserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@RoleId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalRoleId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[aspnet_UsersInRoles]
				SET
					[UserId] = @UserId
					,[RoleId] = @RoleId
				WHERE
[UserId] = @OriginalUserId 
AND [RoleId] = @OriginalRoleId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_UsersInRoles_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the aspnet_UsersInRoles table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@RoleId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[aspnet_UsersInRoles] WITH (ROWLOCK) 
				WHERE
					[UserId] = @UserId
					AND [RoleId] = @RoleId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_UsersInRoles_GetByUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_UsersInRoles table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserId],
					[RoleId]
				FROM
					[dbo].[aspnet_UsersInRoles]
				WHERE
					[UserId] = @UserId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_UsersInRoles_GetByRoleId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_UsersInRoles table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RoleId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[UserId],
					[RoleId]
				FROM
					[dbo].[aspnet_UsersInRoles]
				WHERE
					[RoleId] = @RoleId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_UsersInRoles_GetByUserIdRoleId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_UsersInRoles table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@RoleId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[UserId],
					[RoleId]
				FROM
					[dbo].[aspnet_UsersInRoles]
				WHERE
					[UserId] = @UserId
					AND [RoleId] = @RoleId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_UsersInRoles_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the aspnet_UsersInRoles table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@RoleId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [UserId]
	, [RoleId]
    FROM
	[dbo].[aspnet_UsersInRoles]
    WHERE 
	 ([UserId] = @UserId OR @UserId IS NULL)
	AND ([RoleId] = @RoleId OR @RoleId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [UserId]
	, [RoleId]
    FROM
	[dbo].[aspnet_UsersInRoles]
    WHERE 
	 ([UserId] = @UserId AND @UserId is not null)
	OR ([RoleId] = @RoleId AND @RoleId is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="aspnet_UsersInRoles_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_UsersInRoles table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [UserId] uniqueidentifier, [RoleId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [UserId], [RoleId] )
				SELECT TOP {3} [UserId], [RoleId]
				FROM [dbo].[aspnet_UsersInRoles] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[UserId], O.[RoleId]
				FROM
				    [dbo].[aspnet_UsersInRoles] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[UserId] = PageIndex.[UserId]
				    AND O.[RoleId] = PageIndex.[RoleId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[aspnet_UsersInRoles] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="AnswerDetails_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the AnswerDetails table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[AnswerId],
					[AnswerContent],
					[AnswerMark],
					[AnswerDescription],
					[CreatedDate],
					[CreatedBy],
					[UpdateDate],
					[UpdateBy]
				FROM
					[dbo].[AnswerDetails]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="AnswerDetails_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the AnswerDetails table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [AnswerId] int 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([AnswerId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [AnswerId]'
				SET @SQL = @SQL + ' FROM [dbo].[AnswerDetails]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[AnswerId], O.[AnswerContent], O.[AnswerMark], O.[AnswerDescription], O.[CreatedDate], O.[CreatedBy], O.[UpdateDate], O.[UpdateBy]
				FROM
				    [dbo].[AnswerDetails] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[AnswerId] = PageIndex.[AnswerId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AnswerDetails]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="AnswerDetails_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the AnswerDetails table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AnswerId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AnswerContent" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@AnswerMark" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AnswerDescription" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[AnswerDetails]
					(
					[AnswerContent]
					,[AnswerMark]
					,[AnswerDescription]
					,[CreatedDate]
					,[CreatedBy]
					,[UpdateDate]
					,[UpdateBy]
					)
				VALUES
					(
					@AnswerContent
					,@AnswerMark
					,@AnswerDescription
					,@CreatedDate
					,@CreatedBy
					,@UpdateDate
					,@UpdateBy
					)
				
				-- Get the identity value
				SET @AnswerId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="AnswerDetails_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the AnswerDetails table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AnswerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AnswerContent" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@AnswerMark" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AnswerDescription" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdateBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AnswerDetails]
				SET
					[AnswerContent] = @AnswerContent
					,[AnswerMark] = @AnswerMark
					,[AnswerDescription] = @AnswerDescription
					,[CreatedDate] = @CreatedDate
					,[CreatedBy] = @CreatedBy
					,[UpdateDate] = @UpdateDate
					,[UpdateBy] = @UpdateBy
				WHERE
[AnswerId] = @AnswerId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="AnswerDetails_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the AnswerDetails table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AnswerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[AnswerDetails] WITH (ROWLOCK) 
				WHERE
					[AnswerId] = @AnswerId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="AnswerDetails_GetByAnswerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the AnswerDetails table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AnswerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[AnswerId],
					[AnswerContent],
					[AnswerMark],
					[AnswerDescription],
					[CreatedDate],
					[CreatedBy],
					[UpdateDate],
					[UpdateBy]
				FROM
					[dbo].[AnswerDetails]
				WHERE
					[AnswerId] = @AnswerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="AnswerDetails_GetByQuestionIdFromQuestionAnswer" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@QuestionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[AnswerDetails].[AnswerId]
       ,dbo.[AnswerDetails].[AnswerContent]
       ,dbo.[AnswerDetails].[AnswerMark]
       ,dbo.[AnswerDetails].[AnswerDescription]
       ,dbo.[AnswerDetails].[CreatedDate]
       ,dbo.[AnswerDetails].[CreatedBy]
       ,dbo.[AnswerDetails].[UpdateDate]
       ,dbo.[AnswerDetails].[UpdateBy]
  FROM dbo.[AnswerDetails]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[QuestionAnswer] 
                WHERE dbo.[QuestionAnswer].[QuestionId] = @QuestionId
                  AND dbo.[QuestionAnswer].[AnswerId] = dbo.[AnswerDetails].[AnswerId]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="AnswerDetails_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the AnswerDetails table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@AnswerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AnswerContent" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault="null"/>
				<parameter name="@AnswerMark" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AnswerDescription" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@CreatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@UpdateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdateBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [AnswerId]
	, [AnswerContent]
	, [AnswerMark]
	, [AnswerDescription]
	, [CreatedDate]
	, [CreatedBy]
	, [UpdateDate]
	, [UpdateBy]
    FROM
	[dbo].[AnswerDetails]
    WHERE 
	 ([AnswerId] = @AnswerId OR @AnswerId IS NULL)
	AND ([AnswerContent] = @AnswerContent OR @AnswerContent IS NULL)
	AND ([AnswerMark] = @AnswerMark OR @AnswerMark IS NULL)
	AND ([AnswerDescription] = @AnswerDescription OR @AnswerDescription IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([CreatedBy] = @CreatedBy OR @CreatedBy IS NULL)
	AND ([UpdateDate] = @UpdateDate OR @UpdateDate IS NULL)
	AND ([UpdateBy] = @UpdateBy OR @UpdateBy IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [AnswerId]
	, [AnswerContent]
	, [AnswerMark]
	, [AnswerDescription]
	, [CreatedDate]
	, [CreatedBy]
	, [UpdateDate]
	, [UpdateBy]
    FROM
	[dbo].[AnswerDetails]
    WHERE 
	 ([AnswerId] = @AnswerId AND @AnswerId is not null)
	OR ([AnswerContent] = @AnswerContent AND @AnswerContent is not null)
	OR ([AnswerMark] = @AnswerMark AND @AnswerMark is not null)
	OR ([AnswerDescription] = @AnswerDescription AND @AnswerDescription is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([CreatedBy] = @CreatedBy AND @CreatedBy is not null)
	OR ([UpdateDate] = @UpdateDate AND @UpdateDate is not null)
	OR ([UpdateBy] = @UpdateBy AND @UpdateBy is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="AnswerDetails_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the AnswerDetails table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [AnswerId] int 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [AnswerId] )
				SELECT TOP {3} [AnswerId]
				FROM [dbo].[AnswerDetails] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[AnswerId], O.[AnswerContent], O.[AnswerMark], O.[AnswerDescription], O.[CreatedDate], O.[CreatedBy], O.[UpdateDate], O.[UpdateBy]
				FROM
				    [dbo].[AnswerDetails] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[AnswerId] = PageIndex.[AnswerId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[AnswerDetails] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_WebEvent_Events_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the aspnet_WebEvent_Events table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[EventId],
					[EventTimeUtc],
					[EventTime],
					[EventType],
					[EventSequence],
					[EventOccurrence],
					[EventCode],
					[EventDetailCode],
					[Message],
					[ApplicationPath],
					[ApplicationVirtualPath],
					[MachineName],
					[RequestUrl],
					[ExceptionType],
					[Details]
				FROM
					[dbo].[aspnet_WebEvent_Events]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_WebEvent_Events_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_WebEvent_Events table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [EventId] char(32) COLLATE database_default  
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([EventId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [EventId]'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_WebEvent_Events]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[EventId], O.[EventTimeUtc], O.[EventTime], O.[EventType], O.[EventSequence], O.[EventOccurrence], O.[EventCode], O.[EventDetailCode], O.[Message], O.[ApplicationPath], O.[ApplicationVirtualPath], O.[MachineName], O.[RequestUrl], O.[ExceptionType], O.[Details]
				FROM
				    [dbo].[aspnet_WebEvent_Events] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[EventId] = PageIndex.[EventId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_WebEvent_Events]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="aspnet_WebEvent_Events_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the aspnet_WebEvent_Events table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EventId" type="char" direction="Input" size="32" precision="0" scale="0" param="(32)" nulldefault=""/>
				<parameter name="@EventTimeUtc" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EventTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EventType" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@EventSequence" type="decimal" direction="Input" size="9" precision="19" scale="0" param="(19, 0)" nulldefault=""/>
				<parameter name="@EventOccurrence" type="decimal" direction="Input" size="9" precision="19" scale="0" param="(19, 0)" nulldefault=""/>
				<parameter name="@EventCode" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@EventDetailCode" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Message" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@ApplicationPath" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@ApplicationVirtualPath" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@MachineName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@RequestUrl" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@ExceptionType" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@Details" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[aspnet_WebEvent_Events]
					(
					[EventId]
					,[EventTimeUtc]
					,[EventTime]
					,[EventType]
					,[EventSequence]
					,[EventOccurrence]
					,[EventCode]
					,[EventDetailCode]
					,[Message]
					,[ApplicationPath]
					,[ApplicationVirtualPath]
					,[MachineName]
					,[RequestUrl]
					,[ExceptionType]
					,[Details]
					)
				VALUES
					(
					@EventId
					,@EventTimeUtc
					,@EventTime
					,@EventType
					,@EventSequence
					,@EventOccurrence
					,@EventCode
					,@EventDetailCode
					,@Message
					,@ApplicationPath
					,@ApplicationVirtualPath
					,@MachineName
					,@RequestUrl
					,@ExceptionType
					,@Details
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_WebEvent_Events_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the aspnet_WebEvent_Events table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EventId" type="char" direction="Input" size="32" precision="0" scale="0" param="(32)" nulldefault=""/>
				<parameter name="@OriginalEventId" type="char" direction="Input" size="32" precision="0" scale="0" param="(32)" nulldefault=""/>
				<parameter name="@EventTimeUtc" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EventTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@EventType" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@EventSequence" type="decimal" direction="Input" size="9" precision="19" scale="0" param="(19, 0)" nulldefault=""/>
				<parameter name="@EventOccurrence" type="decimal" direction="Input" size="9" precision="19" scale="0" param="(19, 0)" nulldefault=""/>
				<parameter name="@EventCode" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@EventDetailCode" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Message" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@ApplicationPath" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@ApplicationVirtualPath" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@MachineName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@RequestUrl" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@ExceptionType" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@Details" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[aspnet_WebEvent_Events]
				SET
					[EventId] = @EventId
					,[EventTimeUtc] = @EventTimeUtc
					,[EventTime] = @EventTime
					,[EventType] = @EventType
					,[EventSequence] = @EventSequence
					,[EventOccurrence] = @EventOccurrence
					,[EventCode] = @EventCode
					,[EventDetailCode] = @EventDetailCode
					,[Message] = @Message
					,[ApplicationPath] = @ApplicationPath
					,[ApplicationVirtualPath] = @ApplicationVirtualPath
					,[MachineName] = @MachineName
					,[RequestUrl] = @RequestUrl
					,[ExceptionType] = @ExceptionType
					,[Details] = @Details
				WHERE
[EventId] = @OriginalEventId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_WebEvent_Events_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the aspnet_WebEvent_Events table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EventId" type="char" direction="Input" size="32" precision="0" scale="0" param="(32)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[aspnet_WebEvent_Events] WITH (ROWLOCK) 
				WHERE
					[EventId] = @EventId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_WebEvent_Events_GetByEventId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_WebEvent_Events table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@EventId" type="char" direction="Input" size="32" precision="0" scale="0" param="(32)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[EventId],
					[EventTimeUtc],
					[EventTime],
					[EventType],
					[EventSequence],
					[EventOccurrence],
					[EventCode],
					[EventDetailCode],
					[Message],
					[ApplicationPath],
					[ApplicationVirtualPath],
					[MachineName],
					[RequestUrl],
					[ExceptionType],
					[Details]
				FROM
					[dbo].[aspnet_WebEvent_Events]
				WHERE
					[EventId] = @EventId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_WebEvent_Events_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the aspnet_WebEvent_Events table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@EventId" type="char" direction="Input" size="32" precision="0" scale="0" param="(32)" nulldefault="null"/>
				<parameter name="@EventTimeUtc" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EventTime" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@EventType" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@EventSequence" type="decimal" direction="Input" size="9" precision="19" scale="0" param="(19, 0)" nulldefault="null"/>
				<parameter name="@EventOccurrence" type="decimal" direction="Input" size="9" precision="19" scale="0" param="(19, 0)" nulldefault="null"/>
				<parameter name="@EventCode" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@EventDetailCode" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Message" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@ApplicationPath" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@ApplicationVirtualPath" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@MachineName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@RequestUrl" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@ExceptionType" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@Details" type="ntext" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [EventId]
	, [EventTimeUtc]
	, [EventTime]
	, [EventType]
	, [EventSequence]
	, [EventOccurrence]
	, [EventCode]
	, [EventDetailCode]
	, [Message]
	, [ApplicationPath]
	, [ApplicationVirtualPath]
	, [MachineName]
	, [RequestUrl]
	, [ExceptionType]
	, [Details]
    FROM
	[dbo].[aspnet_WebEvent_Events]
    WHERE 
	 ([EventId] = @EventId OR @EventId IS NULL)
	AND ([EventTimeUtc] = @EventTimeUtc OR @EventTimeUtc IS NULL)
	AND ([EventTime] = @EventTime OR @EventTime IS NULL)
	AND ([EventType] = @EventType OR @EventType IS NULL)
	AND ([EventSequence] = @EventSequence OR @EventSequence IS NULL)
	AND ([EventOccurrence] = @EventOccurrence OR @EventOccurrence IS NULL)
	AND ([EventCode] = @EventCode OR @EventCode IS NULL)
	AND ([EventDetailCode] = @EventDetailCode OR @EventDetailCode IS NULL)
	AND ([Message] = @Message OR @Message IS NULL)
	AND ([ApplicationPath] = @ApplicationPath OR @ApplicationPath IS NULL)
	AND ([ApplicationVirtualPath] = @ApplicationVirtualPath OR @ApplicationVirtualPath IS NULL)
	AND ([MachineName] = @MachineName OR @MachineName IS NULL)
	AND ([RequestUrl] = @RequestUrl OR @RequestUrl IS NULL)
	AND ([ExceptionType] = @ExceptionType OR @ExceptionType IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [EventId]
	, [EventTimeUtc]
	, [EventTime]
	, [EventType]
	, [EventSequence]
	, [EventOccurrence]
	, [EventCode]
	, [EventDetailCode]
	, [Message]
	, [ApplicationPath]
	, [ApplicationVirtualPath]
	, [MachineName]
	, [RequestUrl]
	, [ExceptionType]
	, [Details]
    FROM
	[dbo].[aspnet_WebEvent_Events]
    WHERE 
	 ([EventId] = @EventId AND @EventId is not null)
	OR ([EventTimeUtc] = @EventTimeUtc AND @EventTimeUtc is not null)
	OR ([EventTime] = @EventTime AND @EventTime is not null)
	OR ([EventType] = @EventType AND @EventType is not null)
	OR ([EventSequence] = @EventSequence AND @EventSequence is not null)
	OR ([EventOccurrence] = @EventOccurrence AND @EventOccurrence is not null)
	OR ([EventCode] = @EventCode AND @EventCode is not null)
	OR ([EventDetailCode] = @EventDetailCode AND @EventDetailCode is not null)
	OR ([Message] = @Message AND @Message is not null)
	OR ([ApplicationPath] = @ApplicationPath AND @ApplicationPath is not null)
	OR ([ApplicationVirtualPath] = @ApplicationVirtualPath AND @ApplicationVirtualPath is not null)
	OR ([MachineName] = @MachineName AND @MachineName is not null)
	OR ([RequestUrl] = @RequestUrl AND @RequestUrl is not null)
	OR ([ExceptionType] = @ExceptionType AND @ExceptionType is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="aspnet_WebEvent_Events_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_WebEvent_Events table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [EventId] char(32) COLLATE database_default  
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [EventId] )
				SELECT TOP {3} [EventId]
				FROM [dbo].[aspnet_WebEvent_Events] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[EventId], O.[EventTimeUtc], O.[EventTime], O.[EventType], O.[EventSequence], O.[EventOccurrence], O.[EventCode], O.[EventDetailCode], O.[Message], O.[ApplicationPath], O.[ApplicationVirtualPath], O.[MachineName], O.[RequestUrl], O.[ExceptionType], O.[Details]
				FROM
				    [dbo].[aspnet_WebEvent_Events] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[EventId] = PageIndex.[EventId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[aspnet_WebEvent_Events] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="QuestionGroups_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the QuestionGroups table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[GroupId],
					[GroupName],
					[GroupDescription],
					[OrderNumber],
					[CreatedDate],
					[CreatedBy],
					[UpdatedDate],
					[UpdatedBy]
				FROM
					[dbo].[QuestionGroups]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="QuestionGroups_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the QuestionGroups table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [GroupId] int 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([GroupId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [GroupId]'
				SET @SQL = @SQL + ' FROM [dbo].[QuestionGroups]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[GroupId], O.[GroupName], O.[GroupDescription], O.[OrderNumber], O.[CreatedDate], O.[CreatedBy], O.[UpdatedDate], O.[UpdatedBy]
				FROM
				    [dbo].[QuestionGroups] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[GroupId] = PageIndex.[GroupId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[QuestionGroups]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="QuestionGroups_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the QuestionGroups table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GroupId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupName" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@GroupDescription" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@OrderNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@UpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[QuestionGroups]
					(
					[GroupName]
					,[GroupDescription]
					,[OrderNumber]
					,[CreatedDate]
					,[CreatedBy]
					,[UpdatedDate]
					,[UpdatedBy]
					)
				VALUES
					(
					@GroupName
					,@GroupDescription
					,@OrderNumber
					,@CreatedDate
					,@CreatedBy
					,@UpdatedDate
					,@UpdatedBy
					)
				
				-- Get the identity value
				SET @GroupId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionGroups_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the QuestionGroups table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupName" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@GroupDescription" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@OrderNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@UpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[QuestionGroups]
				SET
					[GroupName] = @GroupName
					,[GroupDescription] = @GroupDescription
					,[OrderNumber] = @OrderNumber
					,[CreatedDate] = @CreatedDate
					,[CreatedBy] = @CreatedBy
					,[UpdatedDate] = @UpdatedDate
					,[UpdatedBy] = @UpdatedBy
				WHERE
[GroupId] = @GroupId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionGroups_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the QuestionGroups table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[QuestionGroups] WITH (ROWLOCK) 
				WHERE
					[GroupId] = @GroupId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionGroups_GetByOrderNumber" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the QuestionGroups table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@OrderNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[GroupId],
					[GroupName],
					[GroupDescription],
					[OrderNumber],
					[CreatedDate],
					[CreatedBy],
					[UpdatedDate],
					[UpdatedBy]
				FROM
					[dbo].[QuestionGroups]
				WHERE
					[OrderNumber] = @OrderNumber
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="QuestionGroups_GetByGroupId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the QuestionGroups table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[GroupId],
					[GroupName],
					[GroupDescription],
					[OrderNumber],
					[CreatedDate],
					[CreatedBy],
					[UpdatedDate],
					[UpdatedBy]
				FROM
					[dbo].[QuestionGroups]
				WHERE
					[GroupId] = @GroupId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="QuestionGroups_GetByUserIdFromResults" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[QuestionGroups].[GroupId]
       ,dbo.[QuestionGroups].[GroupName]
       ,dbo.[QuestionGroups].[GroupDescription]
       ,dbo.[QuestionGroups].[OrderNumber]
       ,dbo.[QuestionGroups].[CreatedDate]
       ,dbo.[QuestionGroups].[CreatedBy]
       ,dbo.[QuestionGroups].[UpdatedDate]
       ,dbo.[QuestionGroups].[UpdatedBy]
  FROM dbo.[QuestionGroups]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[Results] 
                WHERE dbo.[Results].[UserId] = @UserId
                  AND dbo.[Results].[GroupId] = dbo.[QuestionGroups].[GroupId]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionGroups_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the QuestionGroups table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@GroupName" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@GroupDescription" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault="null"/>
				<parameter name="@OrderNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@CreatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@UpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [GroupId]
	, [GroupName]
	, [GroupDescription]
	, [OrderNumber]
	, [CreatedDate]
	, [CreatedBy]
	, [UpdatedDate]
	, [UpdatedBy]
    FROM
	[dbo].[QuestionGroups]
    WHERE 
	 ([GroupId] = @GroupId OR @GroupId IS NULL)
	AND ([GroupName] = @GroupName OR @GroupName IS NULL)
	AND ([GroupDescription] = @GroupDescription OR @GroupDescription IS NULL)
	AND ([OrderNumber] = @OrderNumber OR @OrderNumber IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([CreatedBy] = @CreatedBy OR @CreatedBy IS NULL)
	AND ([UpdatedDate] = @UpdatedDate OR @UpdatedDate IS NULL)
	AND ([UpdatedBy] = @UpdatedBy OR @UpdatedBy IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [GroupId]
	, [GroupName]
	, [GroupDescription]
	, [OrderNumber]
	, [CreatedDate]
	, [CreatedBy]
	, [UpdatedDate]
	, [UpdatedBy]
    FROM
	[dbo].[QuestionGroups]
    WHERE 
	 ([GroupId] = @GroupId AND @GroupId is not null)
	OR ([GroupName] = @GroupName AND @GroupName is not null)
	OR ([GroupDescription] = @GroupDescription AND @GroupDescription is not null)
	OR ([OrderNumber] = @OrderNumber AND @OrderNumber is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([CreatedBy] = @CreatedBy AND @CreatedBy is not null)
	OR ([UpdatedDate] = @UpdatedDate AND @UpdatedDate is not null)
	OR ([UpdatedBy] = @UpdatedBy AND @UpdatedBy is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="QuestionGroups_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the QuestionGroups table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [GroupId] int 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [GroupId] )
				SELECT TOP {3} [GroupId]
				FROM [dbo].[QuestionGroups] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[GroupId], O.[GroupName], O.[GroupDescription], O.[OrderNumber], O.[CreatedDate], O.[CreatedBy], O.[UpdatedDate], O.[UpdatedBy]
				FROM
				    [dbo].[QuestionGroups] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[GroupId] = PageIndex.[GroupId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[QuestionGroups] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="QuestionDetails_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the QuestionDetails table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[QuestionId],
					[QuestionContent],
					[QuestionSuggest],
					[QuestionDescription],
					[OrderNumber],
					[GroupId],
					[CreatedDate],
					[CreatedBy],
					[UpdatedDate],
					[UpdatedBy],
					[QuestionTitle]
				FROM
					[dbo].[QuestionDetails]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="QuestionDetails_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the QuestionDetails table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [QuestionId] int 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([QuestionId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [QuestionId]'
				SET @SQL = @SQL + ' FROM [dbo].[QuestionDetails]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[QuestionId], O.[QuestionContent], O.[QuestionSuggest], O.[QuestionDescription], O.[OrderNumber], O.[GroupId], O.[CreatedDate], O.[CreatedBy], O.[UpdatedDate], O.[UpdatedBy], O.[QuestionTitle]
				FROM
				    [dbo].[QuestionDetails] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[QuestionId] = PageIndex.[QuestionId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[QuestionDetails]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="QuestionDetails_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the QuestionDetails table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@QuestionId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@QuestionContent" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@QuestionSuggest" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@QuestionDescription" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@OrderNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@UpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@QuestionTitle" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[QuestionDetails]
					(
					[QuestionContent]
					,[QuestionSuggest]
					,[QuestionDescription]
					,[OrderNumber]
					,[GroupId]
					,[CreatedDate]
					,[CreatedBy]
					,[UpdatedDate]
					,[UpdatedBy]
					,[QuestionTitle]
					)
				VALUES
					(
					@QuestionContent
					,@QuestionSuggest
					,@QuestionDescription
					,@OrderNumber
					,@GroupId
					,@CreatedDate
					,@CreatedBy
					,@UpdatedDate
					,@UpdatedBy
					,@QuestionTitle
					)
				
				-- Get the identity value
				SET @QuestionId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionDetails_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the QuestionDetails table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@QuestionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@QuestionContent" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@QuestionSuggest" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@QuestionDescription" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@OrderNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@UpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@QuestionTitle" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[QuestionDetails]
				SET
					[QuestionContent] = @QuestionContent
					,[QuestionSuggest] = @QuestionSuggest
					,[QuestionDescription] = @QuestionDescription
					,[OrderNumber] = @OrderNumber
					,[GroupId] = @GroupId
					,[CreatedDate] = @CreatedDate
					,[CreatedBy] = @CreatedBy
					,[UpdatedDate] = @UpdatedDate
					,[UpdatedBy] = @UpdatedBy
					,[QuestionTitle] = @QuestionTitle
				WHERE
[QuestionId] = @QuestionId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionDetails_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the QuestionDetails table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@QuestionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[QuestionDetails] WITH (ROWLOCK) 
				WHERE
					[QuestionId] = @QuestionId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionDetails_GetByGroupId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the QuestionDetails table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[QuestionId],
					[QuestionContent],
					[QuestionSuggest],
					[QuestionDescription],
					[OrderNumber],
					[GroupId],
					[CreatedDate],
					[CreatedBy],
					[UpdatedDate],
					[UpdatedBy],
					[QuestionTitle]
				FROM
					[dbo].[QuestionDetails]
				WHERE
					[GroupId] = @GroupId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionDetails_GetByOrderNumberGroupId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the QuestionDetails table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@OrderNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[QuestionId],
					[QuestionContent],
					[QuestionSuggest],
					[QuestionDescription],
					[OrderNumber],
					[GroupId],
					[CreatedDate],
					[CreatedBy],
					[UpdatedDate],
					[UpdatedBy],
					[QuestionTitle]
				FROM
					[dbo].[QuestionDetails]
				WHERE
					[OrderNumber] = @OrderNumber
					AND [GroupId] = @GroupId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="QuestionDetails_GetByQuestionId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the QuestionDetails table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@QuestionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[QuestionId],
					[QuestionContent],
					[QuestionSuggest],
					[QuestionDescription],
					[OrderNumber],
					[GroupId],
					[CreatedDate],
					[CreatedBy],
					[UpdatedDate],
					[UpdatedBy],
					[QuestionTitle]
				FROM
					[dbo].[QuestionDetails]
				WHERE
					[QuestionId] = @QuestionId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="QuestionDetails_GetByAnswerIdFromQuestionAnswer" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AnswerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[QuestionDetails].[QuestionId]
       ,dbo.[QuestionDetails].[QuestionContent]
       ,dbo.[QuestionDetails].[QuestionSuggest]
       ,dbo.[QuestionDetails].[QuestionDescription]
       ,dbo.[QuestionDetails].[OrderNumber]
       ,dbo.[QuestionDetails].[GroupId]
       ,dbo.[QuestionDetails].[CreatedDate]
       ,dbo.[QuestionDetails].[CreatedBy]
       ,dbo.[QuestionDetails].[UpdatedDate]
       ,dbo.[QuestionDetails].[UpdatedBy]
       ,dbo.[QuestionDetails].[QuestionTitle]
  FROM dbo.[QuestionDetails]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[QuestionAnswer] 
                WHERE dbo.[QuestionAnswer].[AnswerId] = @AnswerId
                  AND dbo.[QuestionAnswer].[QuestionId] = dbo.[QuestionDetails].[QuestionId]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionDetails_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the QuestionDetails table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@QuestionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@QuestionContent" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault="null"/>
				<parameter name="@QuestionSuggest" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault="null"/>
				<parameter name="@QuestionDescription" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault="null"/>
				<parameter name="@OrderNumber" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@CreatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@UpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@QuestionTitle" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [QuestionId]
	, [QuestionContent]
	, [QuestionSuggest]
	, [QuestionDescription]
	, [OrderNumber]
	, [GroupId]
	, [CreatedDate]
	, [CreatedBy]
	, [UpdatedDate]
	, [UpdatedBy]
	, [QuestionTitle]
    FROM
	[dbo].[QuestionDetails]
    WHERE 
	 ([QuestionId] = @QuestionId OR @QuestionId IS NULL)
	AND ([QuestionContent] = @QuestionContent OR @QuestionContent IS NULL)
	AND ([QuestionSuggest] = @QuestionSuggest OR @QuestionSuggest IS NULL)
	AND ([QuestionDescription] = @QuestionDescription OR @QuestionDescription IS NULL)
	AND ([OrderNumber] = @OrderNumber OR @OrderNumber IS NULL)
	AND ([GroupId] = @GroupId OR @GroupId IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([CreatedBy] = @CreatedBy OR @CreatedBy IS NULL)
	AND ([UpdatedDate] = @UpdatedDate OR @UpdatedDate IS NULL)
	AND ([UpdatedBy] = @UpdatedBy OR @UpdatedBy IS NULL)
	AND ([QuestionTitle] = @QuestionTitle OR @QuestionTitle IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [QuestionId]
	, [QuestionContent]
	, [QuestionSuggest]
	, [QuestionDescription]
	, [OrderNumber]
	, [GroupId]
	, [CreatedDate]
	, [CreatedBy]
	, [UpdatedDate]
	, [UpdatedBy]
	, [QuestionTitle]
    FROM
	[dbo].[QuestionDetails]
    WHERE 
	 ([QuestionId] = @QuestionId AND @QuestionId is not null)
	OR ([QuestionContent] = @QuestionContent AND @QuestionContent is not null)
	OR ([QuestionSuggest] = @QuestionSuggest AND @QuestionSuggest is not null)
	OR ([QuestionDescription] = @QuestionDescription AND @QuestionDescription is not null)
	OR ([OrderNumber] = @OrderNumber AND @OrderNumber is not null)
	OR ([GroupId] = @GroupId AND @GroupId is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([CreatedBy] = @CreatedBy AND @CreatedBy is not null)
	OR ([UpdatedDate] = @UpdatedDate AND @UpdatedDate is not null)
	OR ([UpdatedBy] = @UpdatedBy AND @UpdatedBy is not null)
	OR ([QuestionTitle] = @QuestionTitle AND @QuestionTitle is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="QuestionDetails_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the QuestionDetails table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [QuestionId] int 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [QuestionId] )
				SELECT TOP {3} [QuestionId]
				FROM [dbo].[QuestionDetails] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[QuestionId], O.[QuestionContent], O.[QuestionSuggest], O.[QuestionDescription], O.[OrderNumber], O.[GroupId], O.[CreatedDate], O.[CreatedBy], O.[UpdatedDate], O.[UpdatedBy], O.[QuestionTitle]
				FROM
				    [dbo].[QuestionDetails] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[QuestionId] = PageIndex.[QuestionId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[QuestionDetails] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_Users_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the aspnet_Users table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ApplicationId],
					[UserId],
					[UserName],
					[LoweredUserName],
					[MobileAlias],
					[IsAnonymous],
					[LastActivityDate]
				FROM
					[dbo].[aspnet_Users]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_Users_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_Users table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [UserId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([UserId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [UserId]'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_Users]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ApplicationId], O.[UserId], O.[UserName], O.[LoweredUserName], O.[MobileAlias], O.[IsAnonymous], O.[LastActivityDate]
				FROM
				    [dbo].[aspnet_Users] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[UserId] = PageIndex.[UserId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_Users]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="aspnet_Users_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the aspnet_Users table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@UserName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@LoweredUserName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@MobileAlias" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@IsAnonymous" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@LastActivityDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[aspnet_Users]
					(
					[ApplicationId]
					,[UserId]
					,[UserName]
					,[LoweredUserName]
					,[MobileAlias]
					,[IsAnonymous]
					,[LastActivityDate]
					)
				VALUES
					(
					@ApplicationId
					,@UserId
					,@UserName
					,@LoweredUserName
					,@MobileAlias
					,@IsAnonymous
					,@LastActivityDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Users_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the aspnet_Users table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalUserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@UserName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@LoweredUserName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@MobileAlias" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@IsAnonymous" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@LastActivityDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[aspnet_Users]
				SET
					[ApplicationId] = @ApplicationId
					,[UserId] = @UserId
					,[UserName] = @UserName
					,[LoweredUserName] = @LoweredUserName
					,[MobileAlias] = @MobileAlias
					,[IsAnonymous] = @IsAnonymous
					,[LastActivityDate] = @LastActivityDate
				WHERE
[UserId] = @OriginalUserId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Users_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the aspnet_Users table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[aspnet_Users] WITH (ROWLOCK) 
				WHERE
					[UserId] = @UserId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Users_GetByApplicationId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Users table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ApplicationId],
					[UserId],
					[UserName],
					[LoweredUserName],
					[MobileAlias],
					[IsAnonymous],
					[LastActivityDate]
				FROM
					[dbo].[aspnet_Users]
				WHERE
					[ApplicationId] = @ApplicationId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Users_GetByApplicationIdLoweredUserName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Users table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@LoweredUserName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ApplicationId],
					[UserId],
					[UserName],
					[LoweredUserName],
					[MobileAlias],
					[IsAnonymous],
					[LastActivityDate]
				FROM
					[dbo].[aspnet_Users]
				WHERE
					[ApplicationId] = @ApplicationId
					AND [LoweredUserName] = @LoweredUserName
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_Users_GetByApplicationIdLastActivityDate" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Users table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@LastActivityDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ApplicationId],
					[UserId],
					[UserName],
					[LoweredUserName],
					[MobileAlias],
					[IsAnonymous],
					[LastActivityDate]
				FROM
					[dbo].[aspnet_Users]
				WHERE
					[ApplicationId] = @ApplicationId
					AND [LastActivityDate] = @LastActivityDate
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_Users_GetByUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Users table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ApplicationId],
					[UserId],
					[UserName],
					[LoweredUserName],
					[MobileAlias],
					[IsAnonymous],
					[LastActivityDate]
				FROM
					[dbo].[aspnet_Users]
				WHERE
					[UserId] = @UserId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_Users_GetByRoleIdFromAspnetUsersInRoles" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RoleId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[aspnet_Users].[ApplicationId]
       ,dbo.[aspnet_Users].[UserId]
       ,dbo.[aspnet_Users].[UserName]
       ,dbo.[aspnet_Users].[LoweredUserName]
       ,dbo.[aspnet_Users].[MobileAlias]
       ,dbo.[aspnet_Users].[IsAnonymous]
       ,dbo.[aspnet_Users].[LastActivityDate]
  FROM dbo.[aspnet_Users]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[aspnet_UsersInRoles] 
                WHERE dbo.[aspnet_UsersInRoles].[RoleId] = @RoleId
                  AND dbo.[aspnet_UsersInRoles].[UserId] = dbo.[aspnet_Users].[UserId]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Users_GetByGroupIdFromResults" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[aspnet_Users].[ApplicationId]
       ,dbo.[aspnet_Users].[UserId]
       ,dbo.[aspnet_Users].[UserName]
       ,dbo.[aspnet_Users].[LoweredUserName]
       ,dbo.[aspnet_Users].[MobileAlias]
       ,dbo.[aspnet_Users].[IsAnonymous]
       ,dbo.[aspnet_Users].[LastActivityDate]
  FROM dbo.[aspnet_Users]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[Results] 
                WHERE dbo.[Results].[GroupId] = @GroupId
                  AND dbo.[Results].[UserId] = dbo.[aspnet_Users].[UserId]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Users_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the aspnet_Users table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@LoweredUserName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@MobileAlias" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="null"/>
				<parameter name="@IsAnonymous" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@LastActivityDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ApplicationId]
	, [UserId]
	, [UserName]
	, [LoweredUserName]
	, [MobileAlias]
	, [IsAnonymous]
	, [LastActivityDate]
    FROM
	[dbo].[aspnet_Users]
    WHERE 
	 ([ApplicationId] = @ApplicationId OR @ApplicationId IS NULL)
	AND ([UserId] = @UserId OR @UserId IS NULL)
	AND ([UserName] = @UserName OR @UserName IS NULL)
	AND ([LoweredUserName] = @LoweredUserName OR @LoweredUserName IS NULL)
	AND ([MobileAlias] = @MobileAlias OR @MobileAlias IS NULL)
	AND ([IsAnonymous] = @IsAnonymous OR @IsAnonymous IS NULL)
	AND ([LastActivityDate] = @LastActivityDate OR @LastActivityDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ApplicationId]
	, [UserId]
	, [UserName]
	, [LoweredUserName]
	, [MobileAlias]
	, [IsAnonymous]
	, [LastActivityDate]
    FROM
	[dbo].[aspnet_Users]
    WHERE 
	 ([ApplicationId] = @ApplicationId AND @ApplicationId is not null)
	OR ([UserId] = @UserId AND @UserId is not null)
	OR ([UserName] = @UserName AND @UserName is not null)
	OR ([LoweredUserName] = @LoweredUserName AND @LoweredUserName is not null)
	OR ([MobileAlias] = @MobileAlias AND @MobileAlias is not null)
	OR ([IsAnonymous] = @IsAnonymous AND @IsAnonymous is not null)
	OR ([LastActivityDate] = @LastActivityDate AND @LastActivityDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="aspnet_Users_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_Users table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [UserId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [UserId] )
				SELECT TOP {3} [UserId]
				FROM [dbo].[aspnet_Users] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ApplicationId], O.[UserId], O.[UserName], O.[LoweredUserName], O.[MobileAlias], O.[IsAnonymous], O.[LastActivityDate]
				FROM
				    [dbo].[aspnet_Users] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[UserId] = PageIndex.[UserId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[aspnet_Users] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="QuestionAnswer_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the QuestionAnswer table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[QuestionId],
					[AnswerId],
					[Mark],
					[Description],
					[CreatedDate],
					[CreatedBy],
					[UpdateDated],
					[UpdatedBy]
				FROM
					[dbo].[QuestionAnswer]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="QuestionAnswer_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the QuestionAnswer table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [QuestionId] int, [AnswerId] int 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([QuestionId], [AnswerId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [QuestionId], [AnswerId]'
				SET @SQL = @SQL + ' FROM [dbo].[QuestionAnswer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[QuestionId], O.[AnswerId], O.[Mark], O.[Description], O.[CreatedDate], O.[CreatedBy], O.[UpdateDated], O.[UpdatedBy]
				FROM
				    [dbo].[QuestionAnswer] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[QuestionId] = PageIndex.[QuestionId]
					AND O.[AnswerId] = PageIndex.[AnswerId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[QuestionAnswer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="QuestionAnswer_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the QuestionAnswer table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@QuestionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AnswerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Mark" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@UpdateDated" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[QuestionAnswer]
					(
					[QuestionId]
					,[AnswerId]
					,[Mark]
					,[Description]
					,[CreatedDate]
					,[CreatedBy]
					,[UpdateDated]
					,[UpdatedBy]
					)
				VALUES
					(
					@QuestionId
					,@AnswerId
					,@Mark
					,@Description
					,@CreatedDate
					,@CreatedBy
					,@UpdateDated
					,@UpdatedBy
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionAnswer_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the QuestionAnswer table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@QuestionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalQuestionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AnswerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalAnswerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Mark" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@CreatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@UpdateDated" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@UpdatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[QuestionAnswer]
				SET
					[QuestionId] = @QuestionId
					,[AnswerId] = @AnswerId
					,[Mark] = @Mark
					,[Description] = @Description
					,[CreatedDate] = @CreatedDate
					,[CreatedBy] = @CreatedBy
					,[UpdateDated] = @UpdateDated
					,[UpdatedBy] = @UpdatedBy
				WHERE
[QuestionId] = @OriginalQuestionId 
AND [AnswerId] = @OriginalAnswerId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionAnswer_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the QuestionAnswer table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@QuestionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AnswerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[QuestionAnswer] WITH (ROWLOCK) 
				WHERE
					[QuestionId] = @QuestionId
					AND [AnswerId] = @AnswerId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionAnswer_GetByAnswerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the QuestionAnswer table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@AnswerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[QuestionId],
					[AnswerId],
					[Mark],
					[Description],
					[CreatedDate],
					[CreatedBy],
					[UpdateDated],
					[UpdatedBy]
				FROM
					[dbo].[QuestionAnswer]
				WHERE
					[AnswerId] = @AnswerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionAnswer_GetByQuestionId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the QuestionAnswer table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@QuestionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[QuestionId],
					[AnswerId],
					[Mark],
					[Description],
					[CreatedDate],
					[CreatedBy],
					[UpdateDated],
					[UpdatedBy]
				FROM
					[dbo].[QuestionAnswer]
				WHERE
					[QuestionId] = @QuestionId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="QuestionAnswer_GetByQuestionIdAnswerId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the QuestionAnswer table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@QuestionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@AnswerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[QuestionId],
					[AnswerId],
					[Mark],
					[Description],
					[CreatedDate],
					[CreatedBy],
					[UpdateDated],
					[UpdatedBy]
				FROM
					[dbo].[QuestionAnswer]
				WHERE
					[QuestionId] = @QuestionId
					AND [AnswerId] = @AnswerId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="QuestionAnswer_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the QuestionAnswer table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@QuestionId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@AnswerId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Mark" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="2048" precision="0" scale="0" param="(2048)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@CreatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@UpdateDated" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@UpdatedBy" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [QuestionId]
	, [AnswerId]
	, [Mark]
	, [Description]
	, [CreatedDate]
	, [CreatedBy]
	, [UpdateDated]
	, [UpdatedBy]
    FROM
	[dbo].[QuestionAnswer]
    WHERE 
	 ([QuestionId] = @QuestionId OR @QuestionId IS NULL)
	AND ([AnswerId] = @AnswerId OR @AnswerId IS NULL)
	AND ([Mark] = @Mark OR @Mark IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([CreatedBy] = @CreatedBy OR @CreatedBy IS NULL)
	AND ([UpdateDated] = @UpdateDated OR @UpdateDated IS NULL)
	AND ([UpdatedBy] = @UpdatedBy OR @UpdatedBy IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [QuestionId]
	, [AnswerId]
	, [Mark]
	, [Description]
	, [CreatedDate]
	, [CreatedBy]
	, [UpdateDated]
	, [UpdatedBy]
    FROM
	[dbo].[QuestionAnswer]
    WHERE 
	 ([QuestionId] = @QuestionId AND @QuestionId is not null)
	OR ([AnswerId] = @AnswerId AND @AnswerId is not null)
	OR ([Mark] = @Mark AND @Mark is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([CreatedBy] = @CreatedBy AND @CreatedBy is not null)
	OR ([UpdateDated] = @UpdateDated AND @UpdateDated is not null)
	OR ([UpdatedBy] = @UpdatedBy AND @UpdatedBy is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="QuestionAnswer_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the QuestionAnswer table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [QuestionId] int, [AnswerId] int 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [QuestionId], [AnswerId] )
				SELECT TOP {3} [QuestionId], [AnswerId]
				FROM [dbo].[QuestionAnswer] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[QuestionId], O.[AnswerId], O.[Mark], O.[Description], O.[CreatedDate], O.[CreatedBy], O.[UpdateDated], O.[UpdatedBy]
				FROM
				    [dbo].[QuestionAnswer] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[QuestionId] = PageIndex.[QuestionId]
				    AND O.[AnswerId] = PageIndex.[AnswerId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[QuestionAnswer] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Results_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the Results table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[UserId],
					[GroupId],
					[GroupMark],
					[CreatedDate],
					[TestTimes]
				FROM
					[dbo].[Results]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="Results_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the Results table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [UserId] uniqueidentifier, [GroupId] int 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([UserId], [GroupId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [UserId], [GroupId]'
				SET @SQL = @SQL + ' FROM [dbo].[Results]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[UserId], O.[GroupId], O.[GroupMark], O.[CreatedDate], O.[TestTimes]
				FROM
				    [dbo].[Results] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[UserId] = PageIndex.[UserId]
					AND O.[GroupId] = PageIndex.[GroupId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Results]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="Results_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the Results table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupMark" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TestTimes" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[Results]
					(
					[UserId]
					,[GroupId]
					,[GroupMark]
					,[CreatedDate]
					,[TestTimes]
					)
				VALUES
					(
					@UserId
					,@GroupId
					,@GroupMark
					,@CreatedDate
					,@TestTimes
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Results_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the Results table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalUserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalGroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupMark" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@TestTimes" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Results]
				SET
					[UserId] = @UserId
					,[GroupId] = @GroupId
					,[GroupMark] = @GroupMark
					,[CreatedDate] = @CreatedDate
					,[TestTimes] = @TestTimes
				WHERE
[UserId] = @OriginalUserId 
AND [GroupId] = @OriginalGroupId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Results_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the Results table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[Results] WITH (ROWLOCK) 
				WHERE
					[UserId] = @UserId
					AND [GroupId] = @GroupId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Results_GetByUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the Results table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserId],
					[GroupId],
					[GroupMark],
					[CreatedDate],
					[TestTimes]
				FROM
					[dbo].[Results]
				WHERE
					[UserId] = @UserId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Results_GetByGroupId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the Results table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[UserId],
					[GroupId],
					[GroupMark],
					[CreatedDate],
					[TestTimes]
				FROM
					[dbo].[Results]
				WHERE
					[GroupId] = @GroupId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="Results_GetByUserIdGroupIdTestTimes" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the Results table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@TestTimes" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[UserId],
					[GroupId],
					[GroupMark],
					[CreatedDate],
					[TestTimes]
				FROM
					[dbo].[Results]
				WHERE
					[UserId] = @UserId
					AND [GroupId] = @GroupId
					AND [TestTimes] = @TestTimes
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Results_GetByUserIdGroupId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the Results table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[UserId],
					[GroupId],
					[GroupMark],
					[CreatedDate],
					[TestTimes]
				FROM
					[dbo].[Results]
				WHERE
					[UserId] = @UserId
					AND [GroupId] = @GroupId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="Results_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the Results table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@GroupId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@GroupMark" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@TestTimes" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [UserId]
	, [GroupId]
	, [GroupMark]
	, [CreatedDate]
	, [TestTimes]
    FROM
	[dbo].[Results]
    WHERE 
	 ([UserId] = @UserId OR @UserId IS NULL)
	AND ([GroupId] = @GroupId OR @GroupId IS NULL)
	AND ([GroupMark] = @GroupMark OR @GroupMark IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([TestTimes] = @TestTimes OR @TestTimes IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [UserId]
	, [GroupId]
	, [GroupMark]
	, [CreatedDate]
	, [TestTimes]
    FROM
	[dbo].[Results]
    WHERE 
	 ([UserId] = @UserId AND @UserId is not null)
	OR ([GroupId] = @GroupId AND @GroupId is not null)
	OR ([GroupMark] = @GroupMark AND @GroupMark is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([TestTimes] = @TestTimes AND @TestTimes is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="Results_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the Results table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [UserId] uniqueidentifier, [GroupId] int 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [UserId], [GroupId] )
				SELECT TOP {3} [UserId], [GroupId]
				FROM [dbo].[Results] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[UserId], O.[GroupId], O.[GroupMark], O.[CreatedDate], O.[TestTimes]
				FROM
				    [dbo].[Results] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[UserId] = PageIndex.[UserId]
				    AND O.[GroupId] = PageIndex.[GroupId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[Results] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_SchemaVersions_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the aspnet_SchemaVersions table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Feature],
					[CompatibleSchemaVersion],
					[IsCurrentVersion]
				FROM
					[dbo].[aspnet_SchemaVersions]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_SchemaVersions_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_SchemaVersions table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Feature] nvarchar(128) COLLATE database_default , [CompatibleSchemaVersion] nvarchar(128) COLLATE database_default  
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Feature], [CompatibleSchemaVersion])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [Feature], [CompatibleSchemaVersion]'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_SchemaVersions]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[Feature], O.[CompatibleSchemaVersion], O.[IsCurrentVersion]
				FROM
				    [dbo].[aspnet_SchemaVersions] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Feature] = PageIndex.[Feature]
					AND O.[CompatibleSchemaVersion] = PageIndex.[CompatibleSchemaVersion]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_SchemaVersions]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="aspnet_SchemaVersions_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the aspnet_SchemaVersions table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Feature" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@CompatibleSchemaVersion" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@IsCurrentVersion" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[aspnet_SchemaVersions]
					(
					[Feature]
					,[CompatibleSchemaVersion]
					,[IsCurrentVersion]
					)
				VALUES
					(
					@Feature
					,@CompatibleSchemaVersion
					,@IsCurrentVersion
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_SchemaVersions_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the aspnet_SchemaVersions table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Feature" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@OriginalFeature" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@CompatibleSchemaVersion" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@OriginalCompatibleSchemaVersion" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@IsCurrentVersion" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[aspnet_SchemaVersions]
				SET
					[Feature] = @Feature
					,[CompatibleSchemaVersion] = @CompatibleSchemaVersion
					,[IsCurrentVersion] = @IsCurrentVersion
				WHERE
[Feature] = @OriginalFeature 
AND [CompatibleSchemaVersion] = @OriginalCompatibleSchemaVersion 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_SchemaVersions_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the aspnet_SchemaVersions table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Feature" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@CompatibleSchemaVersion" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[aspnet_SchemaVersions] WITH (ROWLOCK) 
				WHERE
					[Feature] = @Feature
					AND [CompatibleSchemaVersion] = @CompatibleSchemaVersion
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_SchemaVersions_GetByFeatureCompatibleSchemaVersion" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_SchemaVersions table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Feature" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@CompatibleSchemaVersion" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Feature],
					[CompatibleSchemaVersion],
					[IsCurrentVersion]
				FROM
					[dbo].[aspnet_SchemaVersions]
				WHERE
					[Feature] = @Feature
					AND [CompatibleSchemaVersion] = @CompatibleSchemaVersion
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_SchemaVersions_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the aspnet_SchemaVersions table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Feature" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@CompatibleSchemaVersion" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@IsCurrentVersion" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Feature]
	, [CompatibleSchemaVersion]
	, [IsCurrentVersion]
    FROM
	[dbo].[aspnet_SchemaVersions]
    WHERE 
	 ([Feature] = @Feature OR @Feature IS NULL)
	AND ([CompatibleSchemaVersion] = @CompatibleSchemaVersion OR @CompatibleSchemaVersion IS NULL)
	AND ([IsCurrentVersion] = @IsCurrentVersion OR @IsCurrentVersion IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Feature]
	, [CompatibleSchemaVersion]
	, [IsCurrentVersion]
    FROM
	[dbo].[aspnet_SchemaVersions]
    WHERE 
	 ([Feature] = @Feature AND @Feature is not null)
	OR ([CompatibleSchemaVersion] = @CompatibleSchemaVersion AND @CompatibleSchemaVersion is not null)
	OR ([IsCurrentVersion] = @IsCurrentVersion AND @IsCurrentVersion is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="aspnet_SchemaVersions_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_SchemaVersions table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Feature] nvarchar(128) COLLATE database_default , [CompatibleSchemaVersion] nvarchar(128) COLLATE database_default  
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Feature], [CompatibleSchemaVersion] )
				SELECT TOP {3} [Feature], [CompatibleSchemaVersion]
				FROM [dbo].[aspnet_SchemaVersions] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Feature], O.[CompatibleSchemaVersion], O.[IsCurrentVersion]
				FROM
				    [dbo].[aspnet_SchemaVersions] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Feature] = PageIndex.[Feature]
				    AND O.[CompatibleSchemaVersion] = PageIndex.[CompatibleSchemaVersion]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[aspnet_SchemaVersions] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_Applications_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the aspnet_Applications table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ApplicationName],
					[LoweredApplicationName],
					[ApplicationId],
					[Description]
				FROM
					[dbo].[aspnet_Applications]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_Applications_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_Applications table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ApplicationId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([ApplicationId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [ApplicationId]'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_Applications]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ApplicationName], O.[LoweredApplicationName], O.[ApplicationId], O.[Description]
				FROM
				    [dbo].[aspnet_Applications] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[ApplicationId] = PageIndex.[ApplicationId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_Applications]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="aspnet_Applications_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the aspnet_Applications table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@LoweredApplicationName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[aspnet_Applications]
					(
					[ApplicationName]
					,[LoweredApplicationName]
					,[ApplicationId]
					,[Description]
					)
				VALUES
					(
					@ApplicationName
					,@LoweredApplicationName
					,@ApplicationId
					,@Description
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Applications_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the aspnet_Applications table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@LoweredApplicationName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[aspnet_Applications]
				SET
					[ApplicationName] = @ApplicationName
					,[LoweredApplicationName] = @LoweredApplicationName
					,[ApplicationId] = @ApplicationId
					,[Description] = @Description
				WHERE
[ApplicationId] = @OriginalApplicationId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Applications_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the aspnet_Applications table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[aspnet_Applications] WITH (ROWLOCK) 
				WHERE
					[ApplicationId] = @ApplicationId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Applications_GetByLoweredApplicationName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Applications table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@LoweredApplicationName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ApplicationName],
					[LoweredApplicationName],
					[ApplicationId],
					[Description]
				FROM
					[dbo].[aspnet_Applications]
				WHERE
					[LoweredApplicationName] = @LoweredApplicationName
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_Applications_GetByApplicationId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Applications table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ApplicationName],
					[LoweredApplicationName],
					[ApplicationId],
					[Description]
				FROM
					[dbo].[aspnet_Applications]
				WHERE
					[ApplicationId] = @ApplicationId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_Applications_GetByApplicationName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Applications table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ApplicationName],
					[LoweredApplicationName],
					[ApplicationId],
					[Description]
				FROM
					[dbo].[aspnet_Applications]
				WHERE
					[ApplicationName] = @ApplicationName
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_Applications_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the aspnet_Applications table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ApplicationName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@LoweredApplicationName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ApplicationName]
	, [LoweredApplicationName]
	, [ApplicationId]
	, [Description]
    FROM
	[dbo].[aspnet_Applications]
    WHERE 
	 ([ApplicationName] = @ApplicationName OR @ApplicationName IS NULL)
	AND ([LoweredApplicationName] = @LoweredApplicationName OR @LoweredApplicationName IS NULL)
	AND ([ApplicationId] = @ApplicationId OR @ApplicationId IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ApplicationName]
	, [LoweredApplicationName]
	, [ApplicationId]
	, [Description]
    FROM
	[dbo].[aspnet_Applications]
    WHERE 
	 ([ApplicationName] = @ApplicationName AND @ApplicationName is not null)
	OR ([LoweredApplicationName] = @LoweredApplicationName AND @LoweredApplicationName is not null)
	OR ([ApplicationId] = @ApplicationId AND @ApplicationId is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="aspnet_Applications_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_Applications table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [ApplicationId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [ApplicationId] )
				SELECT TOP {3} [ApplicationId]
				FROM [dbo].[aspnet_Applications] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ApplicationName], O.[LoweredApplicationName], O.[ApplicationId], O.[Description]
				FROM
				    [dbo].[aspnet_Applications] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[ApplicationId] = PageIndex.[ApplicationId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[aspnet_Applications] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_Membership_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the aspnet_Membership table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ApplicationId],
					[UserId],
					[Password],
					[PasswordFormat],
					[PasswordSalt],
					[MobilePIN],
					[Email],
					[LoweredEmail],
					[PasswordQuestion],
					[PasswordAnswer],
					[IsApproved],
					[IsLockedOut],
					[CreateDate],
					[LastLoginDate],
					[LastPasswordChangedDate],
					[LastLockoutDate],
					[FailedPasswordAttemptCount],
					[FailedPasswordAttemptWindowStart],
					[FailedPasswordAnswerAttemptCount],
					[FailedPasswordAnswerAttemptWindowStart],
					[Comment]
				FROM
					[dbo].[aspnet_Membership]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_Membership_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_Membership table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [UserId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([UserId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [UserId]'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_Membership]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ApplicationId], O.[UserId], O.[Password], O.[PasswordFormat], O.[PasswordSalt], O.[MobilePIN], O.[Email], O.[LoweredEmail], O.[PasswordQuestion], O.[PasswordAnswer], O.[IsApproved], O.[IsLockedOut], O.[CreateDate], O.[LastLoginDate], O.[LastPasswordChangedDate], O.[LastLockoutDate], O.[FailedPasswordAttemptCount], O.[FailedPasswordAttemptWindowStart], O.[FailedPasswordAnswerAttemptCount], O.[FailedPasswordAnswerAttemptWindowStart], O.[Comment]
				FROM
				    [dbo].[aspnet_Membership] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[UserId] = PageIndex.[UserId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_Membership]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="aspnet_Membership_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the aspnet_Membership table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Password" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@PasswordFormat" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PasswordSalt" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@MobilePin" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@Email" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@LoweredEmail" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@PasswordQuestion" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@PasswordAnswer" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@IsApproved" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsLockedOut" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastLoginDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastPasswordChangedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastLockoutDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@FailedPasswordAttemptCount" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FailedPasswordAttemptWindowStart" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@FailedPasswordAnswerAttemptCount" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FailedPasswordAnswerAttemptWindowStart" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Comment" type="ntext" direction="Input" size="3000" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[aspnet_Membership]
					(
					[ApplicationId]
					,[UserId]
					,[Password]
					,[PasswordFormat]
					,[PasswordSalt]
					,[MobilePIN]
					,[Email]
					,[LoweredEmail]
					,[PasswordQuestion]
					,[PasswordAnswer]
					,[IsApproved]
					,[IsLockedOut]
					,[CreateDate]
					,[LastLoginDate]
					,[LastPasswordChangedDate]
					,[LastLockoutDate]
					,[FailedPasswordAttemptCount]
					,[FailedPasswordAttemptWindowStart]
					,[FailedPasswordAnswerAttemptCount]
					,[FailedPasswordAnswerAttemptWindowStart]
					,[Comment]
					)
				VALUES
					(
					@ApplicationId
					,@UserId
					,@Password
					,@PasswordFormat
					,@PasswordSalt
					,@MobilePin
					,@Email
					,@LoweredEmail
					,@PasswordQuestion
					,@PasswordAnswer
					,@IsApproved
					,@IsLockedOut
					,@CreateDate
					,@LastLoginDate
					,@LastPasswordChangedDate
					,@LastLockoutDate
					,@FailedPasswordAttemptCount
					,@FailedPasswordAttemptWindowStart
					,@FailedPasswordAnswerAttemptCount
					,@FailedPasswordAnswerAttemptWindowStart
					,@Comment
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Membership_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the aspnet_Membership table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalUserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Password" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@PasswordFormat" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@PasswordSalt" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@MobilePin" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault=""/>
				<parameter name="@Email" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@LoweredEmail" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@PasswordQuestion" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@PasswordAnswer" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault=""/>
				<parameter name="@IsApproved" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@IsLockedOut" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault=""/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastLoginDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastPasswordChangedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@LastLockoutDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@FailedPasswordAttemptCount" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FailedPasswordAttemptWindowStart" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@FailedPasswordAnswerAttemptCount" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@FailedPasswordAnswerAttemptWindowStart" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
				<parameter name="@Comment" type="ntext" direction="Input" size="3000" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[aspnet_Membership]
				SET
					[ApplicationId] = @ApplicationId
					,[UserId] = @UserId
					,[Password] = @Password
					,[PasswordFormat] = @PasswordFormat
					,[PasswordSalt] = @PasswordSalt
					,[MobilePIN] = @MobilePin
					,[Email] = @Email
					,[LoweredEmail] = @LoweredEmail
					,[PasswordQuestion] = @PasswordQuestion
					,[PasswordAnswer] = @PasswordAnswer
					,[IsApproved] = @IsApproved
					,[IsLockedOut] = @IsLockedOut
					,[CreateDate] = @CreateDate
					,[LastLoginDate] = @LastLoginDate
					,[LastPasswordChangedDate] = @LastPasswordChangedDate
					,[LastLockoutDate] = @LastLockoutDate
					,[FailedPasswordAttemptCount] = @FailedPasswordAttemptCount
					,[FailedPasswordAttemptWindowStart] = @FailedPasswordAttemptWindowStart
					,[FailedPasswordAnswerAttemptCount] = @FailedPasswordAnswerAttemptCount
					,[FailedPasswordAnswerAttemptWindowStart] = @FailedPasswordAnswerAttemptWindowStart
					,[Comment] = @Comment
				WHERE
[UserId] = @OriginalUserId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Membership_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the aspnet_Membership table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[aspnet_Membership] WITH (ROWLOCK) 
				WHERE
					[UserId] = @UserId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Membership_GetByApplicationId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Membership table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ApplicationId],
					[UserId],
					[Password],
					[PasswordFormat],
					[PasswordSalt],
					[MobilePIN],
					[Email],
					[LoweredEmail],
					[PasswordQuestion],
					[PasswordAnswer],
					[IsApproved],
					[IsLockedOut],
					[CreateDate],
					[LastLoginDate],
					[LastPasswordChangedDate],
					[LastLockoutDate],
					[FailedPasswordAttemptCount],
					[FailedPasswordAttemptWindowStart],
					[FailedPasswordAnswerAttemptCount],
					[FailedPasswordAnswerAttemptWindowStart],
					[Comment]
				FROM
					[dbo].[aspnet_Membership]
				WHERE
					[ApplicationId] = @ApplicationId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Membership_GetByApplicationIdLoweredEmail" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Membership table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@LoweredEmail" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ApplicationId],
					[UserId],
					[Password],
					[PasswordFormat],
					[PasswordSalt],
					[MobilePIN],
					[Email],
					[LoweredEmail],
					[PasswordQuestion],
					[PasswordAnswer],
					[IsApproved],
					[IsLockedOut],
					[CreateDate],
					[LastLoginDate],
					[LastPasswordChangedDate],
					[LastLockoutDate],
					[FailedPasswordAttemptCount],
					[FailedPasswordAttemptWindowStart],
					[FailedPasswordAnswerAttemptCount],
					[FailedPasswordAnswerAttemptWindowStart],
					[Comment]
				FROM
					[dbo].[aspnet_Membership]
				WHERE
					[ApplicationId] = @ApplicationId
					AND [LoweredEmail] = @LoweredEmail
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_Membership_GetByUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Membership table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ApplicationId],
					[UserId],
					[Password],
					[PasswordFormat],
					[PasswordSalt],
					[MobilePIN],
					[Email],
					[LoweredEmail],
					[PasswordQuestion],
					[PasswordAnswer],
					[IsApproved],
					[IsLockedOut],
					[CreateDate],
					[LastLoginDate],
					[LastPasswordChangedDate],
					[LastLockoutDate],
					[FailedPasswordAttemptCount],
					[FailedPasswordAttemptWindowStart],
					[FailedPasswordAnswerAttemptCount],
					[FailedPasswordAnswerAttemptWindowStart],
					[Comment]
				FROM
					[dbo].[aspnet_Membership]
				WHERE
					[UserId] = @UserId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_Membership_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the aspnet_Membership table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@Password" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@PasswordFormat" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@PasswordSalt" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@MobilePin" type="nvarchar" direction="Input" size="16" precision="0" scale="0" param="(16)" nulldefault="null"/>
				<parameter name="@Email" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@LoweredEmail" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@PasswordQuestion" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@PasswordAnswer" type="nvarchar" direction="Input" size="128" precision="0" scale="0" param="(128)" nulldefault="null"/>
				<parameter name="@IsApproved" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@IsLockedOut" type="bit" direction="Input" size="1" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@CreateDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@LastLoginDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@LastPasswordChangedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@LastLockoutDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@FailedPasswordAttemptCount" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FailedPasswordAttemptWindowStart" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@FailedPasswordAnswerAttemptCount" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@FailedPasswordAnswerAttemptWindowStart" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
				<parameter name="@Comment" type="ntext" direction="Input" size="3000" precision="0" scale="0" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ApplicationId]
	, [UserId]
	, [Password]
	, [PasswordFormat]
	, [PasswordSalt]
	, [MobilePIN]
	, [Email]
	, [LoweredEmail]
	, [PasswordQuestion]
	, [PasswordAnswer]
	, [IsApproved]
	, [IsLockedOut]
	, [CreateDate]
	, [LastLoginDate]
	, [LastPasswordChangedDate]
	, [LastLockoutDate]
	, [FailedPasswordAttemptCount]
	, [FailedPasswordAttemptWindowStart]
	, [FailedPasswordAnswerAttemptCount]
	, [FailedPasswordAnswerAttemptWindowStart]
	, [Comment]
    FROM
	[dbo].[aspnet_Membership]
    WHERE 
	 ([ApplicationId] = @ApplicationId OR @ApplicationId IS NULL)
	AND ([UserId] = @UserId OR @UserId IS NULL)
	AND ([Password] = @Password OR @Password IS NULL)
	AND ([PasswordFormat] = @PasswordFormat OR @PasswordFormat IS NULL)
	AND ([PasswordSalt] = @PasswordSalt OR @PasswordSalt IS NULL)
	AND ([MobilePIN] = @MobilePin OR @MobilePin IS NULL)
	AND ([Email] = @Email OR @Email IS NULL)
	AND ([LoweredEmail] = @LoweredEmail OR @LoweredEmail IS NULL)
	AND ([PasswordQuestion] = @PasswordQuestion OR @PasswordQuestion IS NULL)
	AND ([PasswordAnswer] = @PasswordAnswer OR @PasswordAnswer IS NULL)
	AND ([IsApproved] = @IsApproved OR @IsApproved IS NULL)
	AND ([IsLockedOut] = @IsLockedOut OR @IsLockedOut IS NULL)
	AND ([CreateDate] = @CreateDate OR @CreateDate IS NULL)
	AND ([LastLoginDate] = @LastLoginDate OR @LastLoginDate IS NULL)
	AND ([LastPasswordChangedDate] = @LastPasswordChangedDate OR @LastPasswordChangedDate IS NULL)
	AND ([LastLockoutDate] = @LastLockoutDate OR @LastLockoutDate IS NULL)
	AND ([FailedPasswordAttemptCount] = @FailedPasswordAttemptCount OR @FailedPasswordAttemptCount IS NULL)
	AND ([FailedPasswordAttemptWindowStart] = @FailedPasswordAttemptWindowStart OR @FailedPasswordAttemptWindowStart IS NULL)
	AND ([FailedPasswordAnswerAttemptCount] = @FailedPasswordAnswerAttemptCount OR @FailedPasswordAnswerAttemptCount IS NULL)
	AND ([FailedPasswordAnswerAttemptWindowStart] = @FailedPasswordAnswerAttemptWindowStart OR @FailedPasswordAnswerAttemptWindowStart IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ApplicationId]
	, [UserId]
	, [Password]
	, [PasswordFormat]
	, [PasswordSalt]
	, [MobilePIN]
	, [Email]
	, [LoweredEmail]
	, [PasswordQuestion]
	, [PasswordAnswer]
	, [IsApproved]
	, [IsLockedOut]
	, [CreateDate]
	, [LastLoginDate]
	, [LastPasswordChangedDate]
	, [LastLockoutDate]
	, [FailedPasswordAttemptCount]
	, [FailedPasswordAttemptWindowStart]
	, [FailedPasswordAnswerAttemptCount]
	, [FailedPasswordAnswerAttemptWindowStart]
	, [Comment]
    FROM
	[dbo].[aspnet_Membership]
    WHERE 
	 ([ApplicationId] = @ApplicationId AND @ApplicationId is not null)
	OR ([UserId] = @UserId AND @UserId is not null)
	OR ([Password] = @Password AND @Password is not null)
	OR ([PasswordFormat] = @PasswordFormat AND @PasswordFormat is not null)
	OR ([PasswordSalt] = @PasswordSalt AND @PasswordSalt is not null)
	OR ([MobilePIN] = @MobilePin AND @MobilePin is not null)
	OR ([Email] = @Email AND @Email is not null)
	OR ([LoweredEmail] = @LoweredEmail AND @LoweredEmail is not null)
	OR ([PasswordQuestion] = @PasswordQuestion AND @PasswordQuestion is not null)
	OR ([PasswordAnswer] = @PasswordAnswer AND @PasswordAnswer is not null)
	OR ([IsApproved] = @IsApproved AND @IsApproved is not null)
	OR ([IsLockedOut] = @IsLockedOut AND @IsLockedOut is not null)
	OR ([CreateDate] = @CreateDate AND @CreateDate is not null)
	OR ([LastLoginDate] = @LastLoginDate AND @LastLoginDate is not null)
	OR ([LastPasswordChangedDate] = @LastPasswordChangedDate AND @LastPasswordChangedDate is not null)
	OR ([LastLockoutDate] = @LastLockoutDate AND @LastLockoutDate is not null)
	OR ([FailedPasswordAttemptCount] = @FailedPasswordAttemptCount AND @FailedPasswordAttemptCount is not null)
	OR ([FailedPasswordAttemptWindowStart] = @FailedPasswordAttemptWindowStart AND @FailedPasswordAttemptWindowStart is not null)
	OR ([FailedPasswordAnswerAttemptCount] = @FailedPasswordAnswerAttemptCount AND @FailedPasswordAnswerAttemptCount is not null)
	OR ([FailedPasswordAnswerAttemptWindowStart] = @FailedPasswordAnswerAttemptWindowStart AND @FailedPasswordAnswerAttemptWindowStart is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="aspnet_Membership_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_Membership table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [UserId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [UserId] )
				SELECT TOP {3} [UserId]
				FROM [dbo].[aspnet_Membership] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ApplicationId], O.[UserId], O.[Password], O.[PasswordFormat], O.[PasswordSalt], O.[MobilePIN], O.[Email], O.[LoweredEmail], O.[PasswordQuestion], O.[PasswordAnswer], O.[IsApproved], O.[IsLockedOut], O.[CreateDate], O.[LastLoginDate], O.[LastPasswordChangedDate], O.[LastLockoutDate], O.[FailedPasswordAttemptCount], O.[FailedPasswordAttemptWindowStart], O.[FailedPasswordAnswerAttemptCount], O.[FailedPasswordAnswerAttemptWindowStart], O.[Comment]
				FROM
				    [dbo].[aspnet_Membership] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[UserId] = PageIndex.[UserId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[aspnet_Membership] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_Paths_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the aspnet_Paths table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ApplicationId],
					[PathId],
					[Path],
					[LoweredPath]
				FROM
					[dbo].[aspnet_Paths]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_Paths_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_Paths table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [PathId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([PathId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [PathId]'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_Paths]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ApplicationId], O.[PathId], O.[Path], O.[LoweredPath]
				FROM
				    [dbo].[aspnet_Paths] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[PathId] = PageIndex.[PathId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_Paths]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="aspnet_Paths_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the aspnet_Paths table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PathId" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Path" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@LoweredPath" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[aspnet_Paths]
					(
					[ApplicationId]
					,[PathId]
					,[Path]
					,[LoweredPath]
					)
				VALUES
					(
					@ApplicationId
					,@PathId
					,@Path
					,@LoweredPath
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Paths_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the aspnet_Paths table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalPathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@Path" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@LoweredPath" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[aspnet_Paths]
				SET
					[ApplicationId] = @ApplicationId
					,[PathId] = @PathId
					,[Path] = @Path
					,[LoweredPath] = @LoweredPath
				WHERE
[PathId] = @OriginalPathId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Paths_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the aspnet_Paths table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[aspnet_Paths] WITH (ROWLOCK) 
				WHERE
					[PathId] = @PathId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Paths_GetByApplicationId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Paths table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ApplicationId],
					[PathId],
					[Path],
					[LoweredPath]
				FROM
					[dbo].[aspnet_Paths]
				WHERE
					[ApplicationId] = @ApplicationId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Paths_GetByApplicationIdLoweredPath" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Paths table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@LoweredPath" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ApplicationId],
					[PathId],
					[Path],
					[LoweredPath]
				FROM
					[dbo].[aspnet_Paths]
				WHERE
					[ApplicationId] = @ApplicationId
					AND [LoweredPath] = @LoweredPath
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_Paths_GetByPathId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Paths table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ApplicationId],
					[PathId],
					[Path],
					[LoweredPath]
				FROM
					[dbo].[aspnet_Paths]
				WHERE
					[PathId] = @PathId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_Paths_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the aspnet_Paths table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@Path" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@LoweredPath" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ApplicationId]
	, [PathId]
	, [Path]
	, [LoweredPath]
    FROM
	[dbo].[aspnet_Paths]
    WHERE 
	 ([ApplicationId] = @ApplicationId OR @ApplicationId IS NULL)
	AND ([PathId] = @PathId OR @PathId IS NULL)
	AND ([Path] = @Path OR @Path IS NULL)
	AND ([LoweredPath] = @LoweredPath OR @LoweredPath IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ApplicationId]
	, [PathId]
	, [Path]
	, [LoweredPath]
    FROM
	[dbo].[aspnet_Paths]
    WHERE 
	 ([ApplicationId] = @ApplicationId AND @ApplicationId is not null)
	OR ([PathId] = @PathId AND @PathId is not null)
	OR ([Path] = @Path AND @Path is not null)
	OR ([LoweredPath] = @LoweredPath AND @LoweredPath is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="aspnet_Paths_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_Paths table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [PathId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [PathId] )
				SELECT TOP {3} [PathId]
				FROM [dbo].[aspnet_Paths] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ApplicationId], O.[PathId], O.[Path], O.[LoweredPath]
				FROM
				    [dbo].[aspnet_Paths] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[PathId] = PageIndex.[PathId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[aspnet_Paths] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_PersonalizationAllUsers_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the aspnet_PersonalizationAllUsers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[PathId],
					[PageSettings],
					[LastUpdatedDate]
				FROM
					[dbo].[aspnet_PersonalizationAllUsers]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_PersonalizationAllUsers_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_PersonalizationAllUsers table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [PathId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([PathId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [PathId]'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_PersonalizationAllUsers]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[PathId], O.[PageSettings], O.[LastUpdatedDate]
				FROM
				    [dbo].[aspnet_PersonalizationAllUsers] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[PathId] = PageIndex.[PathId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_PersonalizationAllUsers]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="aspnet_PersonalizationAllUsers_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the aspnet_PersonalizationAllUsers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PageSettings" type="image" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@LastUpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[aspnet_PersonalizationAllUsers]
					(
					[PathId]
					,[PageSettings]
					,[LastUpdatedDate]
					)
				VALUES
					(
					@PathId
					,@PageSettings
					,@LastUpdatedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_PersonalizationAllUsers_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the aspnet_PersonalizationAllUsers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalPathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PageSettings" type="image" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@LastUpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[aspnet_PersonalizationAllUsers]
				SET
					[PathId] = @PathId
					,[PageSettings] = @PageSettings
					,[LastUpdatedDate] = @LastUpdatedDate
				WHERE
[PathId] = @OriginalPathId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_PersonalizationAllUsers_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the aspnet_PersonalizationAllUsers table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[aspnet_PersonalizationAllUsers] WITH (ROWLOCK) 
				WHERE
					[PathId] = @PathId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_PersonalizationAllUsers_GetByPathId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_PersonalizationAllUsers table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[PathId],
					[PageSettings],
					[LastUpdatedDate]
				FROM
					[dbo].[aspnet_PersonalizationAllUsers]
				WHERE
					[PathId] = @PathId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_PersonalizationAllUsers_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the aspnet_PersonalizationAllUsers table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@PageSettings" type="image" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@LastUpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [PathId]
	, [PageSettings]
	, [LastUpdatedDate]
    FROM
	[dbo].[aspnet_PersonalizationAllUsers]
    WHERE 
	 ([PathId] = @PathId OR @PathId IS NULL)
	AND ([LastUpdatedDate] = @LastUpdatedDate OR @LastUpdatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [PathId]
	, [PageSettings]
	, [LastUpdatedDate]
    FROM
	[dbo].[aspnet_PersonalizationAllUsers]
    WHERE 
	 ([PathId] = @PathId AND @PathId is not null)
	OR ([LastUpdatedDate] = @LastUpdatedDate AND @LastUpdatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="aspnet_PersonalizationAllUsers_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_PersonalizationAllUsers table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [PathId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [PathId] )
				SELECT TOP {3} [PathId]
				FROM [dbo].[aspnet_PersonalizationAllUsers] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[PathId], O.[PageSettings], O.[LastUpdatedDate]
				FROM
				    [dbo].[aspnet_PersonalizationAllUsers] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[PathId] = PageIndex.[PathId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[aspnet_PersonalizationAllUsers] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_Roles_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the aspnet_Roles table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[ApplicationId],
					[RoleId],
					[RoleName],
					[LoweredRoleName],
					[Description]
				FROM
					[dbo].[aspnet_Roles]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_Roles_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_Roles table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [RoleId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([RoleId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [RoleId]'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_Roles]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[ApplicationId], O.[RoleId], O.[RoleName], O.[LoweredRoleName], O.[Description]
				FROM
				    [dbo].[aspnet_Roles] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[RoleId] = PageIndex.[RoleId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_Roles]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="aspnet_Roles_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the aspnet_Roles table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@RoleId" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@RoleName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@LoweredRoleName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[aspnet_Roles]
					(
					[ApplicationId]
					,[RoleId]
					,[RoleName]
					,[LoweredRoleName]
					,[Description]
					)
				VALUES
					(
					@ApplicationId
					,@RoleId
					,@RoleName
					,@LoweredRoleName
					,@Description
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Roles_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the aspnet_Roles table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@RoleId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalRoleId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@RoleName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@LoweredRoleName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[aspnet_Roles]
				SET
					[ApplicationId] = @ApplicationId
					,[RoleId] = @RoleId
					,[RoleName] = @RoleName
					,[LoweredRoleName] = @LoweredRoleName
					,[Description] = @Description
				WHERE
[RoleId] = @OriginalRoleId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Roles_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the aspnet_Roles table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RoleId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[aspnet_Roles] WITH (ROWLOCK) 
				WHERE
					[RoleId] = @RoleId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Roles_GetByApplicationId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Roles table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[ApplicationId],
					[RoleId],
					[RoleName],
					[LoweredRoleName],
					[Description]
				FROM
					[dbo].[aspnet_Roles]
				WHERE
					[ApplicationId] = @ApplicationId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Roles_GetByApplicationIdLoweredRoleName" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Roles table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@LoweredRoleName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ApplicationId],
					[RoleId],
					[RoleName],
					[LoweredRoleName],
					[Description]
				FROM
					[dbo].[aspnet_Roles]
				WHERE
					[ApplicationId] = @ApplicationId
					AND [LoweredRoleName] = @LoweredRoleName
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_Roles_GetByRoleId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Roles table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@RoleId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[ApplicationId],
					[RoleId],
					[RoleName],
					[LoweredRoleName],
					[Description]
				FROM
					[dbo].[aspnet_Roles]
				WHERE
					[RoleId] = @RoleId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_Roles_GetByUserIdFromAspnetUsersInRoles" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
SELECT dbo.[aspnet_Roles].[ApplicationId]
       ,dbo.[aspnet_Roles].[RoleId]
       ,dbo.[aspnet_Roles].[RoleName]
       ,dbo.[aspnet_Roles].[LoweredRoleName]
       ,dbo.[aspnet_Roles].[Description]
  FROM dbo.[aspnet_Roles]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[aspnet_UsersInRoles] 
                WHERE dbo.[aspnet_UsersInRoles].[UserId] = @UserId
                  AND dbo.[aspnet_UsersInRoles].[RoleId] = dbo.[aspnet_Roles].[RoleId]
                  )
				SELECT @@ROWCOUNT			
				]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Roles_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the aspnet_Roles table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@ApplicationId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@RoleId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@RoleName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@LoweredRoleName" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
				<parameter name="@Description" type="nvarchar" direction="Input" size="256" precision="0" scale="0" param="(256)" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ApplicationId]
	, [RoleId]
	, [RoleName]
	, [LoweredRoleName]
	, [Description]
    FROM
	[dbo].[aspnet_Roles]
    WHERE 
	 ([ApplicationId] = @ApplicationId OR @ApplicationId IS NULL)
	AND ([RoleId] = @RoleId OR @RoleId IS NULL)
	AND ([RoleName] = @RoleName OR @RoleName IS NULL)
	AND ([LoweredRoleName] = @LoweredRoleName OR @LoweredRoleName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ApplicationId]
	, [RoleId]
	, [RoleName]
	, [LoweredRoleName]
	, [Description]
    FROM
	[dbo].[aspnet_Roles]
    WHERE 
	 ([ApplicationId] = @ApplicationId AND @ApplicationId is not null)
	OR ([RoleId] = @RoleId AND @RoleId is not null)
	OR ([RoleName] = @RoleName AND @RoleName is not null)
	OR ([LoweredRoleName] = @LoweredRoleName AND @LoweredRoleName is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="aspnet_Roles_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_Roles table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [RoleId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [RoleId] )
				SELECT TOP {3} [RoleId]
				FROM [dbo].[aspnet_Roles] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[ApplicationId], O.[RoleId], O.[RoleName], O.[LoweredRoleName], O.[Description]
				FROM
				    [dbo].[aspnet_Roles] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[RoleId] = PageIndex.[RoleId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[aspnet_Roles] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_PersonalizationPerUser_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the aspnet_PersonalizationPerUser table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[Id],
					[PathId],
					[UserId],
					[PageSettings],
					[LastUpdatedDate]
				FROM
					[dbo].[aspnet_PersonalizationPerUser]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_PersonalizationPerUser_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_PersonalizationPerUser table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] uniqueidentifier 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([Id])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [Id]'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_PersonalizationPerUser]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[Id], O.[PathId], O.[UserId], O.[PageSettings], O.[LastUpdatedDate]
				FROM
				    [dbo].[aspnet_PersonalizationPerUser] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_PersonalizationPerUser]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="aspnet_PersonalizationPerUser_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the aspnet_PersonalizationPerUser table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Output" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PageSettings" type="image" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@LastUpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[aspnet_PersonalizationPerUser]
					(
					[Id]
					,[PathId]
					,[UserId]
					,[PageSettings]
					,[LastUpdatedDate]
					)
				VALUES
					(
					@Id
					,@PathId
					,@UserId
					,@PageSettings
					,@LastUpdatedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_PersonalizationPerUser_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the aspnet_PersonalizationPerUser table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PageSettings" type="image" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@LastUpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[aspnet_PersonalizationPerUser]
				SET
					[Id] = @Id
					,[PathId] = @PathId
					,[UserId] = @UserId
					,[PageSettings] = @PageSettings
					,[LastUpdatedDate] = @LastUpdatedDate
				WHERE
[Id] = @OriginalId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_PersonalizationPerUser_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the aspnet_PersonalizationPerUser table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[aspnet_PersonalizationPerUser] WITH (ROWLOCK) 
				WHERE
					[Id] = @Id
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_PersonalizationPerUser_GetByPathId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_PersonalizationPerUser table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[PathId],
					[UserId],
					[PageSettings],
					[LastUpdatedDate]
				FROM
					[dbo].[aspnet_PersonalizationPerUser]
				WHERE
					[PathId] = @PathId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_PersonalizationPerUser_GetByUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_PersonalizationPerUser table through a foreign key
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SET ANSI_NULLS OFF
				
				SELECT
					[Id],
					[PathId],
					[UserId],
					[PageSettings],
					[LastUpdatedDate]
				FROM
					[dbo].[aspnet_PersonalizationPerUser]
				WHERE
					[UserId] = @UserId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_PersonalizationPerUser_GetByPathIdUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_PersonalizationPerUser table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[PathId],
					[UserId],
					[PageSettings],
					[LastUpdatedDate]
				FROM
					[dbo].[aspnet_PersonalizationPerUser]
				WHERE
					[PathId] = @PathId
					AND [UserId] = @UserId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_PersonalizationPerUser_GetByUserIdPathId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_PersonalizationPerUser table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[PathId],
					[UserId],
					[PageSettings],
					[LastUpdatedDate]
				FROM
					[dbo].[aspnet_PersonalizationPerUser]
				WHERE
					[UserId] = @UserId
					AND [PathId] = @PathId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_PersonalizationPerUser_GetById" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_PersonalizationPerUser table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[Id],
					[PathId],
					[UserId],
					[PageSettings],
					[LastUpdatedDate]
				FROM
					[dbo].[aspnet_PersonalizationPerUser]
				WHERE
					[Id] = @Id
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_PersonalizationPerUser_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the aspnet_PersonalizationPerUser table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@Id" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@PathId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@PageSettings" type="image" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@LastUpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Id]
	, [PathId]
	, [UserId]
	, [PageSettings]
	, [LastUpdatedDate]
    FROM
	[dbo].[aspnet_PersonalizationPerUser]
    WHERE 
	 ([Id] = @Id OR @Id IS NULL)
	AND ([PathId] = @PathId OR @PathId IS NULL)
	AND ([UserId] = @UserId OR @UserId IS NULL)
	AND ([LastUpdatedDate] = @LastUpdatedDate OR @LastUpdatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Id]
	, [PathId]
	, [UserId]
	, [PageSettings]
	, [LastUpdatedDate]
    FROM
	[dbo].[aspnet_PersonalizationPerUser]
    WHERE 
	 ([Id] = @Id AND @Id is not null)
	OR ([PathId] = @PathId AND @PathId is not null)
	OR ([UserId] = @UserId AND @UserId is not null)
	OR ([LastUpdatedDate] = @LastUpdatedDate AND @LastUpdatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="aspnet_PersonalizationPerUser_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_PersonalizationPerUser table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [Id] uniqueidentifier 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [Id] )
				SELECT TOP {3} [Id]
				FROM [dbo].[aspnet_PersonalizationPerUser] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[Id], O.[PathId], O.[UserId], O.[PageSettings], O.[LastUpdatedDate]
				FROM
				    [dbo].[aspnet_PersonalizationPerUser] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[Id] = PageIndex.[Id]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[aspnet_PersonalizationPerUser] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="TraceChange_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the TraceChange table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[TraceId],
					[NameOfTable],
					[OldValue],
					[NewValue],
					[CreatedDate]
				FROM
					[dbo].[TraceChange]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="TraceChange_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the TraceChange table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [TraceId] int 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([TraceId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [TraceId]'
				SET @SQL = @SQL + ' FROM [dbo].[TraceChange]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[TraceId], O.[NameOfTable], O.[OldValue], O.[NewValue], O.[CreatedDate]
				FROM
				    [dbo].[TraceChange] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[TraceId] = PageIndex.[TraceId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TraceChange]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="TraceChange_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the TraceChange table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TraceId" type="int" direction="Output" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@NameOfTable" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@OldValue" type="nchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
				<parameter name="@NewValue" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[TraceChange]
					(
					[NameOfTable]
					,[OldValue]
					,[NewValue]
					,[CreatedDate]
					)
				VALUES
					(
					@NameOfTable
					,@OldValue
					,@NewValue
					,@CreatedDate
					)
				
				-- Get the identity value
				SET @TraceId = SCOPE_IDENTITY()
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="TraceChange_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the TraceChange table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TraceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
				<parameter name="@NameOfTable" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault=""/>
				<parameter name="@OldValue" type="nchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
				<parameter name="@NewValue" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault=""/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TraceChange]
				SET
					[NameOfTable] = @NameOfTable
					,[OldValue] = @OldValue
					,[NewValue] = @NewValue
					,[CreatedDate] = @CreatedDate
				WHERE
[TraceId] = @TraceId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="TraceChange_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the TraceChange table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TraceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[TraceChange] WITH (ROWLOCK) 
				WHERE
					[TraceId] = @TraceId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="TraceChange_GetByTraceId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the TraceChange table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@TraceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[TraceId],
					[NameOfTable],
					[OldValue],
					[NewValue],
					[CreatedDate]
				FROM
					[dbo].[TraceChange]
				WHERE
					[TraceId] = @TraceId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="TraceChange_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the TraceChange table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@TraceId" type="int" direction="Input" size="4" precision="10" scale="0" param="" nulldefault="null"/>
				<parameter name="@NameOfTable" type="nvarchar" direction="Input" size="1024" precision="0" scale="0" param="(1024)" nulldefault="null"/>
				<parameter name="@OldValue" type="nchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault="null"/>
				<parameter name="@NewValue" type="nvarchar" direction="Input" size="4000" precision="0" scale="0" param="(4000)" nulldefault="null"/>
				<parameter name="@CreatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [TraceId]
	, [NameOfTable]
	, [OldValue]
	, [NewValue]
	, [CreatedDate]
    FROM
	[dbo].[TraceChange]
    WHERE 
	 ([TraceId] = @TraceId OR @TraceId IS NULL)
	AND ([NameOfTable] = @NameOfTable OR @NameOfTable IS NULL)
	AND ([OldValue] = @OldValue OR @OldValue IS NULL)
	AND ([NewValue] = @NewValue OR @NewValue IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [TraceId]
	, [NameOfTable]
	, [OldValue]
	, [NewValue]
	, [CreatedDate]
    FROM
	[dbo].[TraceChange]
    WHERE 
	 ([TraceId] = @TraceId AND @TraceId is not null)
	OR ([NameOfTable] = @NameOfTable AND @NameOfTable is not null)
	OR ([OldValue] = @OldValue AND @OldValue is not null)
	OR ([NewValue] = @NewValue AND @NewValue is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="TraceChange_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the TraceChange table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [TraceId] int 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [TraceId] )
				SELECT TOP {3} [TraceId]
				FROM [dbo].[TraceChange] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[TraceId], O.[NameOfTable], O.[OldValue], O.[NewValue], O.[CreatedDate]
				FROM
				    [dbo].[TraceChange] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[TraceId] = PageIndex.[TraceId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[TraceChange] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_Profile_Get_List" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets all records from the aspnet_Profile table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				SELECT
					[UserId],
					[PropertyNames],
					[PropertyValuesString],
					[PropertyValuesBinary],
					[LastUpdatedDate]
				FROM
					[dbo].[aspnet_Profile]
					
				SELECT @@ROWCOUNT
			]]></body>
		</procedure>
		
		
		<procedure owner="dbo" name="aspnet_Profile_GetPaged" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_Profile table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@WhereClause" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)" />
				<parameter name="@OrderBy" type="varchar" direction="Input" size="2000" precision="0" scale="0" param="(2000)"/>
				<parameter name="@PageIndex" type="int" direction="Input" size="0" precision="10" scale="0" />
				<parameter name="@PageSize" type="int" direction="Input" size="0" precision="10" scale="0" /> 
			</parameters>
			<body><![CDATA[
				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [UserId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'INSERT INTO #PageIndex ([UserId])'
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' [UserId]'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_Profile]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				IF LEN(@OrderBy) > 0
				BEGIN
					SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				END
				
				-- Populate the temp table
				EXEC sp_executesql @SQL

				-- Return paged results
				SELECT O.[UserId], O.[PropertyNames], O.[PropertyValuesString], O.[PropertyValuesBinary], O.[LastUpdatedDate]
				FROM
				    [dbo].[aspnet_Profile] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > @PageLowerBound
					AND O.[UserId] = PageIndex.[UserId]
				ORDER BY
				    PageIndex.IndexId
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[aspnet_Profile]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			]]></body>
		</procedure>
		
		<procedure owner="dbo" name="aspnet_Profile_Insert" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Inserts a record into the aspnet_Profile table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PropertyNames" type="ntext" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PropertyValuesString" type="ntext" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PropertyValuesBinary" type="image" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@LastUpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				INSERT INTO [dbo].[aspnet_Profile]
					(
					[UserId]
					,[PropertyNames]
					,[PropertyValuesString]
					,[PropertyValuesBinary]
					,[LastUpdatedDate]
					)
				VALUES
					(
					@UserId
					,@PropertyNames
					,@PropertyValuesString
					,@PropertyValuesBinary
					,@LastUpdatedDate
					)
				
									
							
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Profile_Update" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Updates a record in the aspnet_Profile table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@OriginalUserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PropertyNames" type="ntext" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PropertyValuesString" type="ntext" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@PropertyValuesBinary" type="image" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault=""/>
				<parameter name="@LastUpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[aspnet_Profile]
				SET
					[UserId] = @UserId
					,[PropertyNames] = @PropertyNames
					,[PropertyValuesString] = @PropertyValuesString
					,[PropertyValuesBinary] = @PropertyValuesBinary
					,[LastUpdatedDate] = @LastUpdatedDate
				WHERE
[UserId] = @OriginalUserId 
				
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Profile_Delete" grant="">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Deletes a record in the aspnet_Profile table
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				DELETE FROM [dbo].[aspnet_Profile] WITH (ROWLOCK) 
				WHERE
					[UserId] = @UserId
					
			]]></body>
		</procedure>
		<procedure owner="dbo" name="aspnet_Profile_GetByUserId" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Select records from the aspnet_Profile table through an index
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault=""/>
			</parameters>
			<body><![CDATA[
				SELECT
					[UserId],
					[PropertyNames],
					[PropertyValuesString],
					[PropertyValuesBinary],
					[LastUpdatedDate]
				FROM
					[dbo].[aspnet_Profile]
				WHERE
					[UserId] = @UserId
				SELECT @@ROWCOUNT
					
			]]></body>
			
		</procedure>
		<procedure owner="dbo" name="aspnet_Profile_Find" >
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Finds records in the aspnet_Profile table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters>
				<parameter name="@SearchUsingOR" type="bit" direction="Input" size="0" precision="1" scale="0" param="" nulldefault="null"/>
				<parameter name="@UserId" type="uniqueidentifier" direction="Input" size="16" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@PropertyNames" type="ntext" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@PropertyValuesString" type="ntext" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@PropertyValuesBinary" type="image" direction="Input" size="6000" precision="0" scale="0" param="" nulldefault="null"/>
				<parameter name="@LastUpdatedDate" type="datetime" direction="Input" size="8" precision="23" scale="3" param="" nulldefault="null"/>
			</parameters>
			<body><![CDATA[
				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [UserId]
	, [PropertyNames]
	, [PropertyValuesString]
	, [PropertyValuesBinary]
	, [LastUpdatedDate]
    FROM
	[dbo].[aspnet_Profile]
    WHERE 
	 ([UserId] = @UserId OR @UserId IS NULL)
	AND ([LastUpdatedDate] = @LastUpdatedDate OR @LastUpdatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [UserId]
	, [PropertyNames]
	, [PropertyValuesString]
	, [PropertyValuesBinary]
	, [LastUpdatedDate]
    FROM
	[dbo].[aspnet_Profile]
    WHERE 
	 ([UserId] = @UserId AND @UserId is not null)
	OR ([LastUpdatedDate] = @LastUpdatedDate AND @LastUpdatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				]]></body>
		</procedure>

		
		<procedure owner="dbo" name="aspnet_Profile_Find_Dynamic"  skip="true">
			<comment><![CDATA[/*
----------------------------------------------------------------------------------------------------

-- Created By: AIDT ()
-- Purpose: Gets records from the aspnet_Profile table using a dynamically generated query.
----------------------------------------------------------------------------------------------------
*/
]]></comment>
			<parameters/>
			<body><![CDATA[
				
				BEGIN
				
				-- Create a temp table to store the select results
				CREATE TABLE #PageIndex
				(
				    [IndexId] int IDENTITY (1, 1) NOT NULL,
				    [UserId] uniqueidentifier 
				)
				
				-- Insert into the temp table
				INSERT INTO #PageIndex ( [UserId] )
				SELECT TOP {3} [UserId]
				FROM [dbo].[aspnet_Profile] {0}
				ORDER BY {1}
				
				-- Return paged results
				SELECT O.[UserId], O.[PropertyNames], O.[PropertyValuesString], O.[PropertyValuesBinary], O.[LastUpdatedDate]
				FROM
				    [dbo].[aspnet_Profile] O,
				    #PageIndex PageIndex
				WHERE
				    PageIndex.IndexId > {2}
				    AND O.[UserId] = PageIndex.[UserId]
				ORDER BY
				    PageIndex.IndexId
				

				-- get total count
				SELECT COUNT(*) AS TotalRowCount FROM [dbo].[aspnet_Profile] {0};
				
				DROP TABLE #PageIndex
				END
			]]></body>
		</procedure>
		
</procedures>
</root>
