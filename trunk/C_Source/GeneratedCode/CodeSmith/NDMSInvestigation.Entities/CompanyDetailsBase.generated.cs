
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CompanyDetails.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using NDMSInvestigation.Entities.Validation;
#endregion

namespace NDMSInvestigation.Entities
{
	///<summary>
	/// An object representation of the 'CompanyDetails' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CompanyDetailsBase : EntityBase, ICompanyDetails, IEntityId<CompanyDetailsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CompanyDetailsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CompanyDetailsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CompanyDetailsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CompanyDetails> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CompanyDetailsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CompanyDetailsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CompanyDetailsBase"/> instance.
		///</summary>
		public CompanyDetailsBase()
		{
			this.entityData = new CompanyDetailsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CompanyDetailsBase"/> instance.
		///</summary>
		///<param name="_userId"></param>
		///<param name="_companyName"></param>
		///<param name="_phone"></param>
		///<param name="_fax"></param>
		///<param name="_email"></param>
		///<param name="_address"></param>
		///<param name="_employeeNumber"></param>
		///<param name="_director"></param>
		///<param name="_country"></param>
		///<param name="_city"></param>
		///<param name="_district"></param>
		///<param name="_createdDate"></param>
		///<param name="_updatedDate"></param>
		///<param name="_description"></param>
		///<param name="_currentTotalMark"></param>
		///<param name="_traceChange"></param>
		public CompanyDetailsBase(System.Guid _userId, System.String _companyName, System.String _phone, 
			System.String _fax, System.String _email, System.String _address, System.Int32? _employeeNumber, 
			System.String _director, System.String _country, System.String _city, System.String _district, 
			System.DateTime? _createdDate, System.DateTime? _updatedDate, System.String _description, 
			System.Int32? _currentTotalMark, System.Int32? _traceChange)
		{
			this.entityData = new CompanyDetailsEntityData();
			this.backupData = null;

			this.UserId = _userId;
			this.CompanyName = _companyName;
			this.Phone = _phone;
			this.Fax = _fax;
			this.Email = _email;
			this.Address = _address;
			this.EmployeeNumber = _employeeNumber;
			this.Director = _director;
			this.Country = _country;
			this.City = _city;
			this.District = _district;
			this.CreatedDate = _createdDate;
			this.UpdatedDate = _updatedDate;
			this.Description = _description;
			this.CurrentTotalMark = _currentTotalMark;
			this.TraceChange = _traceChange;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CompanyDetails"/> instance.
		///</summary>
		///<param name="_userId"></param>
		///<param name="_companyName"></param>
		///<param name="_phone"></param>
		///<param name="_fax"></param>
		///<param name="_email"></param>
		///<param name="_address"></param>
		///<param name="_employeeNumber"></param>
		///<param name="_director"></param>
		///<param name="_country"></param>
		///<param name="_city"></param>
		///<param name="_district"></param>
		///<param name="_createdDate"></param>
		///<param name="_updatedDate"></param>
		///<param name="_description"></param>
		///<param name="_currentTotalMark"></param>
		///<param name="_traceChange"></param>
		public static CompanyDetails CreateCompanyDetails(System.Guid _userId, System.String _companyName, System.String _phone, 
			System.String _fax, System.String _email, System.String _address, System.Int32? _employeeNumber, 
			System.String _director, System.String _country, System.String _city, System.String _district, 
			System.DateTime? _createdDate, System.DateTime? _updatedDate, System.String _description, 
			System.Int32? _currentTotalMark, System.Int32? _traceChange)
		{
			CompanyDetails newCompanyDetails = new CompanyDetails();
			newCompanyDetails.UserId = _userId;
			newCompanyDetails.CompanyName = _companyName;
			newCompanyDetails.Phone = _phone;
			newCompanyDetails.Fax = _fax;
			newCompanyDetails.Email = _email;
			newCompanyDetails.Address = _address;
			newCompanyDetails.EmployeeNumber = _employeeNumber;
			newCompanyDetails.Director = _director;
			newCompanyDetails.Country = _country;
			newCompanyDetails.City = _city;
			newCompanyDetails.District = _district;
			newCompanyDetails.CreatedDate = _createdDate;
			newCompanyDetails.UpdatedDate = _updatedDate;
			newCompanyDetails.Description = _description;
			newCompanyDetails.CurrentTotalMark = _currentTotalMark;
			newCompanyDetails.TraceChange = _traceChange;
			return newCompanyDetails;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CompanyId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 CompanyId
		{
			get
			{
				return this.entityData.CompanyId; 
			}
			
			set
			{
				if (this.entityData.CompanyId == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.CompanyId, this.entityData.CompanyId);
				this.entityData.CompanyId = value;
				this.EntityId.CompanyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.CompanyId, this.entityData.CompanyId);
				OnPropertyChanged("CompanyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Guid UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="CompanyName")]
		[ValidatorComposition(CompositionType.Or, Tag="CompanyName")]
		[StringLengthValidator(1024, MessageTemplate="Maximum length has been exceeded.", Tag="CompanyName")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String CompanyName
		{
			get
			{
				return this.entityData.CompanyName; 
			}
			
			set
			{
				if (this.entityData.CompanyName == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.CompanyName, this.entityData.CompanyName);
				this.entityData.CompanyName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.CompanyName, this.entityData.CompanyName);
				OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Phone")]
		[ValidatorComposition(CompositionType.Or, Tag="Phone")]
		[StringLengthValidator(1024, MessageTemplate="Maximum length has been exceeded.", Tag="Phone")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fax property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Fax")]
		[ValidatorComposition(CompositionType.Or, Tag="Fax")]
		[StringLengthValidator(1024, MessageTemplate="Maximum length has been exceeded.", Tag="Fax")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String Fax
		{
			get
			{
				return this.entityData.Fax; 
			}
			
			set
			{
				if (this.entityData.Fax == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.Fax, this.entityData.Fax);
				this.entityData.Fax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.Fax, this.entityData.Fax);
				OnPropertyChanged("Fax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Email")]
		[ValidatorComposition(CompositionType.Or, Tag="Email")]
		[StringLengthValidator(1024, MessageTemplate="Maximum length has been exceeded.", Tag="Email")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Address")]
		[ValidatorComposition(CompositionType.Or, Tag="Address")]
		[StringLengthValidator(2048, MessageTemplate="Maximum length has been exceeded.", Tag="Address")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2048)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmployeeNumber property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEmployeeNumberNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? EmployeeNumber
		{
			get
			{
				return this.entityData.EmployeeNumber; 
			}
			
			set
			{
				if (this.entityData.EmployeeNumber == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.EmployeeNumber, this.entityData.EmployeeNumber);
				this.entityData.EmployeeNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.EmployeeNumber, this.entityData.EmployeeNumber);
				OnPropertyChanged("EmployeeNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Director property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Director")]
		[ValidatorComposition(CompositionType.Or, Tag="Director")]
		[StringLengthValidator(2048, MessageTemplate="Maximum length has been exceeded.", Tag="Director")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2048)]
		public virtual System.String Director
		{
			get
			{
				return this.entityData.Director; 
			}
			
			set
			{
				if (this.entityData.Director == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.Director, this.entityData.Director);
				this.entityData.Director = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.Director, this.entityData.Director);
				OnPropertyChanged("Director");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Country property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Country")]
		[ValidatorComposition(CompositionType.Or, Tag="Country")]
		[StringLengthValidator(1024, MessageTemplate="Maximum length has been exceeded.", Tag="Country")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String Country
		{
			get
			{
				return this.entityData.Country; 
			}
			
			set
			{
				if (this.entityData.Country == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.Country, this.entityData.Country);
				this.entityData.Country = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.Country, this.entityData.Country);
				OnPropertyChanged("Country");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the City property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="City")]
		[ValidatorComposition(CompositionType.Or, Tag="City")]
		[StringLengthValidator(1024, MessageTemplate="Maximum length has been exceeded.", Tag="City")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String City
		{
			get
			{
				return this.entityData.City; 
			}
			
			set
			{
				if (this.entityData.City == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.City, this.entityData.City);
				this.entityData.City = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.City, this.entityData.City);
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the District property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="District")]
		[ValidatorComposition(CompositionType.Or, Tag="District")]
		[StringLengthValidator(1024, MessageTemplate="Maximum length has been exceeded.", Tag="District")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1024)]
		public virtual System.String District
		{
			get
			{
				return this.entityData.District; 
			}
			
			set
			{
				if (this.entityData.District == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.District, this.entityData.District);
				this.entityData.District = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.District, this.entityData.District);
				OnPropertyChanged("District");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreatedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdatedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdatedDate
		{
			get
			{
				return this.entityData.UpdatedDate; 
			}
			
			set
			{
				if (this.entityData.UpdatedDate == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.UpdatedDate, this.entityData.UpdatedDate);
				this.entityData.UpdatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.UpdatedDate, this.entityData.UpdatedDate);
				OnPropertyChanged("UpdatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Description")]
		[ValidatorComposition(CompositionType.Or, Tag="Description")]
		[StringLengthValidator(4000, MessageTemplate="Maximum length has been exceeded.", Tag="Description")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 4000)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrentTotalMark property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCurrentTotalMarkNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CurrentTotalMark
		{
			get
			{
				return this.entityData.CurrentTotalMark; 
			}
			
			set
			{
				if (this.entityData.CurrentTotalMark == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.CurrentTotalMark, this.entityData.CurrentTotalMark);
				this.entityData.CurrentTotalMark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.CurrentTotalMark, this.entityData.CurrentTotalMark);
				OnPropertyChanged("CurrentTotalMark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TraceChange property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTraceChangeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TraceChange
		{
			get
			{
				return this.entityData.TraceChange; 
			}
			
			set
			{
				if (this.entityData.TraceChange == value)
					return;
					
				OnColumnChanging(CompanyDetailsColumn.TraceChange, this.entityData.TraceChange);
				this.entityData.TraceChange = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyDetailsColumn.TraceChange, this.entityData.TraceChange);
				OnPropertyChanged("TraceChange");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AspnetUsers"/>.
		/// </summary>
		/// <value>The source AspnetUsers for UserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AspnetUsers UserIdSource
      	{
            get { return entityData.UserIdSource; }
            set { entityData.UserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="TraceChange"/>.
		/// </summary>
		/// <value>The source TraceChange for TraceChange.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TraceChange TraceChangeSource
      	{
            get { return entityData.TraceChangeSource; }
            set { entityData.TraceChangeSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CompanyDetails"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CompanyId", "UserId", "CompanyName", "Phone", "Fax", "Email", "Address", "EmployeeNumber", "Director", "Country", "City", "District", "CreatedDate", "UpdatedDate", "Description", "CurrentTotalMark", "TraceChange"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CompanyDetailsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CompanyDetails) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CompanyDetails>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CompanyDetails);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CompanyDetails Entity 
		///</summary>
		protected virtual CompanyDetails Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CompanyDetails copy = new CompanyDetails();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CompanyId = this.CompanyId;
				copy.UserId = this.UserId;
				copy.CompanyName = this.CompanyName;
				copy.Phone = this.Phone;
				copy.Fax = this.Fax;
				copy.Email = this.Email;
				copy.Address = this.Address;
				copy.EmployeeNumber = this.EmployeeNumber;
				copy.Director = this.Director;
				copy.Country = this.Country;
				copy.City = this.City;
				copy.District = this.District;
				copy.CreatedDate = this.CreatedDate;
				copy.UpdatedDate = this.UpdatedDate;
				copy.Description = this.Description;
				copy.CurrentTotalMark = this.CurrentTotalMark;
				copy.TraceChange = this.TraceChange;
			
			if (this.UserIdSource != null && existingCopies.Contains(this.UserIdSource))
				copy.UserIdSource = existingCopies[this.UserIdSource] as AspnetUsers;
			else
				copy.UserIdSource = MakeCopyOf(this.UserIdSource, existingCopies) as AspnetUsers;
			if (this.TraceChangeSource != null && existingCopies.Contains(this.TraceChangeSource))
				copy.TraceChangeSource = existingCopies[this.TraceChangeSource] as TraceChange;
			else
				copy.TraceChangeSource = MakeCopyOf(this.TraceChangeSource, existingCopies) as TraceChange;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CompanyDetails Entity 
		///</summary>
		public virtual CompanyDetails Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CompanyDetails Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CompanyDetails DeepCopy()
		{
			return EntityHelper.Clone<CompanyDetails>(this as CompanyDetails);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CompanyDetailsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CompanyDetailsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CompanyDetailsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CompanyDetailsColumn column)
		{
			switch(column)
			{
					case CompanyDetailsColumn.CompanyId:
					return entityData.CompanyId != _originalData.CompanyId;
					case CompanyDetailsColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case CompanyDetailsColumn.CompanyName:
					return entityData.CompanyName != _originalData.CompanyName;
					case CompanyDetailsColumn.Phone:
					return entityData.Phone != _originalData.Phone;
					case CompanyDetailsColumn.Fax:
					return entityData.Fax != _originalData.Fax;
					case CompanyDetailsColumn.Email:
					return entityData.Email != _originalData.Email;
					case CompanyDetailsColumn.Address:
					return entityData.Address != _originalData.Address;
					case CompanyDetailsColumn.EmployeeNumber:
					return entityData.EmployeeNumber != _originalData.EmployeeNumber;
					case CompanyDetailsColumn.Director:
					return entityData.Director != _originalData.Director;
					case CompanyDetailsColumn.Country:
					return entityData.Country != _originalData.Country;
					case CompanyDetailsColumn.City:
					return entityData.City != _originalData.City;
					case CompanyDetailsColumn.District:
					return entityData.District != _originalData.District;
					case CompanyDetailsColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case CompanyDetailsColumn.UpdatedDate:
					return entityData.UpdatedDate != _originalData.UpdatedDate;
					case CompanyDetailsColumn.Description:
					return entityData.Description != _originalData.Description;
					case CompanyDetailsColumn.CurrentTotalMark:
					return entityData.CurrentTotalMark != _originalData.CurrentTotalMark;
					case CompanyDetailsColumn.TraceChange:
					return entityData.TraceChange != _originalData.TraceChange;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CompanyDetailsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CompanyId != _originalData.CompanyId;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.CompanyName != _originalData.CompanyName;
			result = result || entityData.Phone != _originalData.Phone;
			result = result || entityData.Fax != _originalData.Fax;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.Address != _originalData.Address;
			result = result || entityData.EmployeeNumber != _originalData.EmployeeNumber;
			result = result || entityData.Director != _originalData.Director;
			result = result || entityData.Country != _originalData.Country;
			result = result || entityData.City != _originalData.City;
			result = result || entityData.District != _originalData.District;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.UpdatedDate != _originalData.UpdatedDate;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.CurrentTotalMark != _originalData.CurrentTotalMark;
			result = result || entityData.TraceChange != _originalData.TraceChange;
			return result;
		}	
		
		///<summary>
		///  Returns a CompanyDetails Entity with the original data.
		///</summary>
		public CompanyDetails GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCompanyDetails(
				_originalData.UserId,
				_originalData.CompanyName,
				_originalData.Phone,
				_originalData.Fax,
				_originalData.Email,
				_originalData.Address,
				_originalData.EmployeeNumber,
				_originalData.Director,
				_originalData.Country,
				_originalData.City,
				_originalData.District,
				_originalData.CreatedDate,
				_originalData.UpdatedDate,
				_originalData.Description,
				_originalData.CurrentTotalMark,
				_originalData.TraceChange
				);
				
			return (CompanyDetails)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CompanyDetailsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CompanyDetailsBase)
				return ValueEquals(this, (CompanyDetailsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CompanyDetailsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CompanyId.GetHashCode() ^ 
					this.UserId.GetHashCode() ^ 
					((this.CompanyName == null) ? string.Empty : this.CompanyName.ToString()).GetHashCode() ^ 
					((this.Phone == null) ? string.Empty : this.Phone.ToString()).GetHashCode() ^ 
					((this.Fax == null) ? string.Empty : this.Fax.ToString()).GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					((this.Address == null) ? string.Empty : this.Address.ToString()).GetHashCode() ^ 
					((this.EmployeeNumber == null) ? string.Empty : this.EmployeeNumber.ToString()).GetHashCode() ^ 
					((this.Director == null) ? string.Empty : this.Director.ToString()).GetHashCode() ^ 
					((this.Country == null) ? string.Empty : this.Country.ToString()).GetHashCode() ^ 
					((this.City == null) ? string.Empty : this.City.ToString()).GetHashCode() ^ 
					((this.District == null) ? string.Empty : this.District.ToString()).GetHashCode() ^ 
					((this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString()).GetHashCode() ^ 
					((this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString()).GetHashCode() ^ 
					((this.Description == null) ? string.Empty : this.Description.ToString()).GetHashCode() ^ 
					((this.CurrentTotalMark == null) ? string.Empty : this.CurrentTotalMark.ToString()).GetHashCode() ^ 
					((this.TraceChange == null) ? string.Empty : this.TraceChange.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CompanyDetailsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CompanyDetailsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CompanyDetailsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CompanyDetailsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CompanyDetailsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CompanyDetailsBase Object1, CompanyDetailsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CompanyId != Object2.CompanyId)
				equal = false;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if ( Object1.CompanyName != null && Object2.CompanyName != null )
			{
				if (Object1.CompanyName != Object2.CompanyName)
					equal = false;
			}
			else if (Object1.CompanyName == null ^ Object2.CompanyName == null )
			{
				equal = false;
			}
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
			if ( Object1.Fax != null && Object2.Fax != null )
			{
				if (Object1.Fax != Object2.Fax)
					equal = false;
			}
			else if (Object1.Fax == null ^ Object2.Fax == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object2.Address == null )
			{
				equal = false;
			}
			if ( Object1.EmployeeNumber != null && Object2.EmployeeNumber != null )
			{
				if (Object1.EmployeeNumber != Object2.EmployeeNumber)
					equal = false;
			}
			else if (Object1.EmployeeNumber == null ^ Object2.EmployeeNumber == null )
			{
				equal = false;
			}
			if ( Object1.Director != null && Object2.Director != null )
			{
				if (Object1.Director != Object2.Director)
					equal = false;
			}
			else if (Object1.Director == null ^ Object2.Director == null )
			{
				equal = false;
			}
			if ( Object1.Country != null && Object2.Country != null )
			{
				if (Object1.Country != Object2.Country)
					equal = false;
			}
			else if (Object1.Country == null ^ Object2.Country == null )
			{
				equal = false;
			}
			if ( Object1.City != null && Object2.City != null )
			{
				if (Object1.City != Object2.City)
					equal = false;
			}
			else if (Object1.City == null ^ Object2.City == null )
			{
				equal = false;
			}
			if ( Object1.District != null && Object2.District != null )
			{
				if (Object1.District != Object2.District)
					equal = false;
			}
			else if (Object1.District == null ^ Object2.District == null )
			{
				equal = false;
			}
			if ( Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object2.CreatedDate == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedDate != null && Object2.UpdatedDate != null )
			{
				if (Object1.UpdatedDate != Object2.UpdatedDate)
					equal = false;
			}
			else if (Object1.UpdatedDate == null ^ Object2.UpdatedDate == null )
			{
				equal = false;
			}
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.CurrentTotalMark != null && Object2.CurrentTotalMark != null )
			{
				if (Object1.CurrentTotalMark != Object2.CurrentTotalMark)
					equal = false;
			}
			else if (Object1.CurrentTotalMark == null ^ Object2.CurrentTotalMark == null )
			{
				equal = false;
			}
			if ( Object1.TraceChange != null && Object2.TraceChange != null )
			{
				if (Object1.TraceChange != Object2.TraceChange)
					equal = false;
			}
			else if (Object1.TraceChange == null ^ Object2.TraceChange == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CompanyDetailsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CompanyDetailsComparer GetComparer()
        {
            return new CompanyDetailsComparer();
        }
        */

        // Comparer delegates back to CompanyDetails
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CompanyDetails rhs, CompanyDetailsColumn which)
        {
            switch (which)
            {
            	
            	
            	case CompanyDetailsColumn.CompanyId:
            		return this.CompanyId.CompareTo(rhs.CompanyId);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.CompanyName:
            		return this.CompanyName.CompareTo(rhs.CompanyName);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.Fax:
            		return this.Fax.CompareTo(rhs.Fax);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.EmployeeNumber:
            		return this.EmployeeNumber.Value.CompareTo(rhs.EmployeeNumber.Value);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.Director:
            		return this.Director.CompareTo(rhs.Director);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.Country:
            		return this.Country.CompareTo(rhs.Country);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.City:
            		return this.City.CompareTo(rhs.City);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.District:
            		return this.District.CompareTo(rhs.District);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.CreatedDate:
            		return this.CreatedDate.Value.CompareTo(rhs.CreatedDate.Value);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.UpdatedDate:
            		return this.UpdatedDate.Value.CompareTo(rhs.UpdatedDate.Value);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.CurrentTotalMark:
            		return this.CurrentTotalMark.Value.CompareTo(rhs.CurrentTotalMark.Value);
            		
            		                 
            	
            	
            	case CompanyDetailsColumn.TraceChange:
            		return this.TraceChange.Value.CompareTo(rhs.TraceChange.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CompanyDetailsKey> Members
		
		// member variable for the EntityId property
		private CompanyDetailsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CompanyDetailsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CompanyDetailsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CompanyDetails")
					.Append("|").Append( this.CompanyId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{18}{17}- CompanyId: {0}{17}- UserId: {1}{17}- CompanyName: {2}{17}- Phone: {3}{17}- Fax: {4}{17}- Email: {5}{17}- Address: {6}{17}- EmployeeNumber: {7}{17}- Director: {8}{17}- Country: {9}{17}- City: {10}{17}- District: {11}{17}- CreatedDate: {12}{17}- UpdatedDate: {13}{17}- Description: {14}{17}- CurrentTotalMark: {15}{17}- TraceChange: {16}{17}{19}", 
				this.CompanyId,
				this.UserId,
				(this.CompanyName == null) ? string.Empty : this.CompanyName.ToString(),
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				(this.Fax == null) ? string.Empty : this.Fax.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.Address == null) ? string.Empty : this.Address.ToString(),
				(this.EmployeeNumber == null) ? string.Empty : this.EmployeeNumber.ToString(),
				(this.Director == null) ? string.Empty : this.Director.ToString(),
				(this.Country == null) ? string.Empty : this.Country.ToString(),
				(this.City == null) ? string.Empty : this.City.ToString(),
				(this.District == null) ? string.Empty : this.District.ToString(),
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
				(this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString(),
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.CurrentTotalMark == null) ? string.Empty : this.CurrentTotalMark.ToString(),
				(this.TraceChange == null) ? string.Empty : this.TraceChange.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CompanyDetails' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CompanyDetailsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CompanyId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CompanyDetails"</remarks>
		public System.Int32 CompanyId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// UserId : 
		/// </summary>
		public System.Guid		  UserId = Guid.Empty;
		
		/// <summary>
		/// CompanyName : 
		/// </summary>
		public System.String		  CompanyName = null;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		public System.String		  Phone = null;
		
		/// <summary>
		/// Fax : 
		/// </summary>
		public System.String		  Fax = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String		  Email = null;
		
		/// <summary>
		/// Address : 
		/// </summary>
		public System.String		  Address = null;
		
		/// <summary>
		/// EmployeeNumber : 
		/// </summary>
		public System.Int32?		  EmployeeNumber = null;
		
		/// <summary>
		/// Director : 
		/// </summary>
		public System.String		  Director = null;
		
		/// <summary>
		/// Country : 
		/// </summary>
		public System.String		  Country = null;
		
		/// <summary>
		/// City : 
		/// </summary>
		public System.String		  City = null;
		
		/// <summary>
		/// District : 
		/// </summary>
		public System.String		  District = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime?		  CreatedDate = null;
		
		/// <summary>
		/// UpdatedDate : 
		/// </summary>
		public System.DateTime?		  UpdatedDate = null;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = null;
		
		/// <summary>
		/// CurrentTotalMark : 
		/// </summary>
		public System.Int32?		  CurrentTotalMark = null;
		
		/// <summary>
		/// TraceChange : 
		/// </summary>
		public System.Int32?		  TraceChange = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AspnetUsers _userIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AspnetUsers"/>.
		/// </summary>
		/// <value>The source AspnetUsers for UserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AspnetUsers UserIdSource
      	{
            get { return this._userIdSource; }
            set { this._userIdSource = value; }
      	}
		private TraceChange _traceChangeSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="TraceChange"/>.
		/// </summary>
		/// <value>The source TraceChange for TraceChange.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual TraceChange TraceChangeSource
      	{
            get { return this._traceChangeSource; }
            set { this._traceChangeSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CompanyDetailsEntityData _tmp = new CompanyDetailsEntityData();
						
			_tmp.CompanyId = this.CompanyId;
			
			_tmp.UserId = this.UserId;
			_tmp.CompanyName = this.CompanyName;
			_tmp.Phone = this.Phone;
			_tmp.Fax = this.Fax;
			_tmp.Email = this.Email;
			_tmp.Address = this.Address;
			_tmp.EmployeeNumber = this.EmployeeNumber;
			_tmp.Director = this.Director;
			_tmp.Country = this.Country;
			_tmp.City = this.City;
			_tmp.District = this.District;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.UpdatedDate = this.UpdatedDate;
			_tmp.Description = this.Description;
			_tmp.CurrentTotalMark = this.CurrentTotalMark;
			_tmp.TraceChange = this.TraceChange;
			
			#region Source Parent Composite Entities
			if (this.UserIdSource != null)
				_tmp.UserIdSource = MakeCopyOf(this.UserIdSource) as AspnetUsers;
			if (this.TraceChangeSource != null)
				_tmp.TraceChangeSource = MakeCopyOf(this.TraceChangeSource) as TraceChange;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CompanyDetailsEntityData _tmp = new CompanyDetailsEntityData();
						
			_tmp.CompanyId = this.CompanyId;
			
			_tmp.UserId = this.UserId;
			_tmp.CompanyName = this.CompanyName;
			_tmp.Phone = this.Phone;
			_tmp.Fax = this.Fax;
			_tmp.Email = this.Email;
			_tmp.Address = this.Address;
			_tmp.EmployeeNumber = this.EmployeeNumber;
			_tmp.Director = this.Director;
			_tmp.Country = this.Country;
			_tmp.City = this.City;
			_tmp.District = this.District;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.UpdatedDate = this.UpdatedDate;
			_tmp.Description = this.Description;
			_tmp.CurrentTotalMark = this.CurrentTotalMark;
			_tmp.TraceChange = this.TraceChange;
			
			#region Source Parent Composite Entities
			if (this.UserIdSource != null && existingCopies.Contains(this.UserIdSource))
				_tmp.UserIdSource = existingCopies[this.UserIdSource] as AspnetUsers;
			else
				_tmp.UserIdSource = MakeCopyOf(this.UserIdSource, existingCopies) as AspnetUsers;
			if (this.TraceChangeSource != null && existingCopies.Contains(this.TraceChangeSource))
				_tmp.TraceChangeSource = existingCopies[this.TraceChangeSource] as TraceChange;
			else
				_tmp.TraceChangeSource = MakeCopyOf(this.TraceChangeSource, existingCopies) as TraceChange;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyDetailsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CompanyDetailsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyDetailsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CompanyDetailsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyDetailsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CompanyDetailsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CompanyDetailsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CompanyDetailsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyDetailsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CompanyDetailsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CompanyDetailsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CompanyDetailsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CompanyDetailsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CompanyDetails"/> object.
	/// </remarks>
	public class CompanyDetailsEventArgs : System.EventArgs
	{
		private CompanyDetailsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CompanyDetailsEventArgs class.
		///</summary>
		public CompanyDetailsEventArgs(CompanyDetailsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CompanyDetailsEventArgs class.
		///</summary>
		public CompanyDetailsEventArgs(CompanyDetailsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CompanyDetailsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CompanyDetailsColumn" />
		public CompanyDetailsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CompanyDetails related events.
	///</summary>
	public delegate void CompanyDetailsEventHandler(object sender, CompanyDetailsEventArgs e);
	
	#region CompanyDetailsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CompanyDetailsComparer : System.Collections.Generic.IComparer<CompanyDetails>
	{
		CompanyDetailsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CompanyDetailsComparer"/> class.
        /// </summary>
		public CompanyDetailsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CompanyDetailsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CompanyDetailsComparer(CompanyDetailsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CompanyDetails"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CompanyDetails"/> to compare.</param>
        /// <param name="b">The second <c>CompanyDetails</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CompanyDetails a, CompanyDetails b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CompanyDetails entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CompanyDetails a, CompanyDetails b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CompanyDetailsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CompanyDetailsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CompanyDetails"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CompanyDetailsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CompanyDetailsKey class.
		/// </summary>
		public CompanyDetailsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CompanyDetailsKey class.
		/// </summary>
		public CompanyDetailsKey(CompanyDetailsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CompanyId = entity.CompanyId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CompanyDetailsKey class.
		/// </summary>
		public CompanyDetailsKey(System.Int32 _companyId)
		{
			#region Init Properties

			this.CompanyId = _companyId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CompanyDetailsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CompanyDetailsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CompanyId property
		private System.Int32 _companyId;
		
		/// <summary>
		/// Gets or sets the CompanyId property.
		/// </summary>
		public System.Int32 CompanyId
		{
			get { return _companyId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CompanyId = value;
				
				_companyId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CompanyId = ( values["CompanyId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["CompanyId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CompanyId", CompanyId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CompanyId: {0}{1}",
								CompanyId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CompanyDetailsColumn Enum
	
	/// <summary>
	/// Enumerate the CompanyDetails columns.
	/// </summary>
	[Serializable]
	public enum CompanyDetailsColumn : int
	{
		/// <summary>
		/// CompanyId : 
		/// </summary>
		[EnumTextValue("CompanyId")]
		[ColumnEnum("CompanyId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		CompanyId = 1,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserId")]
		[ColumnEnum("UserId", typeof(System.Guid), System.Data.DbType.Guid, false, false, false)]
		UserId = 2,
		/// <summary>
		/// CompanyName : 
		/// </summary>
		[EnumTextValue("CompanyName")]
		[ColumnEnum("CompanyName", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		CompanyName = 3,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		Phone = 4,
		/// <summary>
		/// Fax : 
		/// </summary>
		[EnumTextValue("Fax")]
		[ColumnEnum("Fax", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		Fax = 5,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		Email = 6,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("Address", typeof(System.String), System.Data.DbType.String, false, false, true, 2048)]
		Address = 7,
		/// <summary>
		/// EmployeeNumber : 
		/// </summary>
		[EnumTextValue("EmployeeNumber")]
		[ColumnEnum("EmployeeNumber", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		EmployeeNumber = 8,
		/// <summary>
		/// Director : 
		/// </summary>
		[EnumTextValue("Director")]
		[ColumnEnum("Director", typeof(System.String), System.Data.DbType.String, false, false, true, 2048)]
		Director = 9,
		/// <summary>
		/// Country : 
		/// </summary>
		[EnumTextValue("Country")]
		[ColumnEnum("Country", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		Country = 10,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		City = 11,
		/// <summary>
		/// District : 
		/// </summary>
		[EnumTextValue("District")]
		[ColumnEnum("District", typeof(System.String), System.Data.DbType.String, false, false, true, 1024)]
		District = 12,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate = 13,
		/// <summary>
		/// UpdatedDate : 
		/// </summary>
		[EnumTextValue("UpdatedDate")]
		[ColumnEnum("UpdatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdatedDate = 14,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, true, 4000)]
		Description = 15,
		/// <summary>
		/// CurrentTotalMark : 
		/// </summary>
		[EnumTextValue("CurrentTotalMark")]
		[ColumnEnum("CurrentTotalMark", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CurrentTotalMark = 16,
		/// <summary>
		/// TraceChange : 
		/// </summary>
		[EnumTextValue("TraceChange")]
		[ColumnEnum("TraceChange", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TraceChange = 17
	}//End enum

	#endregion CompanyDetailsColumn Enum

} // end namespace
