
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AspnetMembership.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

using NDMSInvestigation.Entities.Validation;
#endregion

namespace NDMSInvestigation.Entities
{
	///<summary>
	/// An object representation of the 'aspnet_Membership' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AspnetMembershipBase : EntityBase, IAspnetMembership, IEntityId<AspnetMembershipKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AspnetMembershipEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AspnetMembershipEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AspnetMembershipEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AspnetMembership> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AspnetMembershipEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AspnetMembershipEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AspnetMembershipBase"/> instance.
		///</summary>
		public AspnetMembershipBase()
		{
			this.entityData = new AspnetMembershipEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AspnetMembershipBase"/> instance.
		///</summary>
		///<param name="_applicationId"></param>
		///<param name="_userId"></param>
		///<param name="_password"></param>
		///<param name="_passwordFormat"></param>
		///<param name="_passwordSalt"></param>
		///<param name="_mobilePin"></param>
		///<param name="_email"></param>
		///<param name="_loweredEmail"></param>
		///<param name="_passwordQuestion"></param>
		///<param name="_passwordAnswer"></param>
		///<param name="_isApproved"></param>
		///<param name="_isLockedOut"></param>
		///<param name="_createDate"></param>
		///<param name="_lastLoginDate"></param>
		///<param name="_lastPasswordChangedDate"></param>
		///<param name="_lastLockoutDate"></param>
		///<param name="_failedPasswordAttemptCount"></param>
		///<param name="_failedPasswordAttemptWindowStart"></param>
		///<param name="_failedPasswordAnswerAttemptCount"></param>
		///<param name="_failedPasswordAnswerAttemptWindowStart"></param>
		///<param name="_comment"></param>
		public AspnetMembershipBase(System.Guid _applicationId, System.Guid _userId, 
			System.String _password, System.Int32 _passwordFormat, System.String _passwordSalt, 
			System.String _mobilePin, System.String _email, System.String _loweredEmail, 
			System.String _passwordQuestion, System.String _passwordAnswer, System.Boolean _isApproved, 
			System.Boolean _isLockedOut, System.DateTime _createDate, System.DateTime _lastLoginDate, 
			System.DateTime _lastPasswordChangedDate, System.DateTime _lastLockoutDate, System.Int32 _failedPasswordAttemptCount, 
			System.DateTime _failedPasswordAttemptWindowStart, System.Int32 _failedPasswordAnswerAttemptCount, 
			System.DateTime _failedPasswordAnswerAttemptWindowStart, System.String _comment)
		{
			this.entityData = new AspnetMembershipEntityData();
			this.backupData = null;

			this.ApplicationId = _applicationId;
			this.UserId = _userId;
			this.Password = _password;
			this.PasswordFormat = _passwordFormat;
			this.PasswordSalt = _passwordSalt;
			this.MobilePin = _mobilePin;
			this.Email = _email;
			this.LoweredEmail = _loweredEmail;
			this.PasswordQuestion = _passwordQuestion;
			this.PasswordAnswer = _passwordAnswer;
			this.IsApproved = _isApproved;
			this.IsLockedOut = _isLockedOut;
			this.CreateDate = _createDate;
			this.LastLoginDate = _lastLoginDate;
			this.LastPasswordChangedDate = _lastPasswordChangedDate;
			this.LastLockoutDate = _lastLockoutDate;
			this.FailedPasswordAttemptCount = _failedPasswordAttemptCount;
			this.FailedPasswordAttemptWindowStart = _failedPasswordAttemptWindowStart;
			this.FailedPasswordAnswerAttemptCount = _failedPasswordAnswerAttemptCount;
			this.FailedPasswordAnswerAttemptWindowStart = _failedPasswordAnswerAttemptWindowStart;
			this.Comment = _comment;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AspnetMembership"/> instance.
		///</summary>
		///<param name="_applicationId"></param>
		///<param name="_userId"></param>
		///<param name="_password"></param>
		///<param name="_passwordFormat"></param>
		///<param name="_passwordSalt"></param>
		///<param name="_mobilePin"></param>
		///<param name="_email"></param>
		///<param name="_loweredEmail"></param>
		///<param name="_passwordQuestion"></param>
		///<param name="_passwordAnswer"></param>
		///<param name="_isApproved"></param>
		///<param name="_isLockedOut"></param>
		///<param name="_createDate"></param>
		///<param name="_lastLoginDate"></param>
		///<param name="_lastPasswordChangedDate"></param>
		///<param name="_lastLockoutDate"></param>
		///<param name="_failedPasswordAttemptCount"></param>
		///<param name="_failedPasswordAttemptWindowStart"></param>
		///<param name="_failedPasswordAnswerAttemptCount"></param>
		///<param name="_failedPasswordAnswerAttemptWindowStart"></param>
		///<param name="_comment"></param>
		public static AspnetMembership CreateAspnetMembership(System.Guid _applicationId, System.Guid _userId, 
			System.String _password, System.Int32 _passwordFormat, System.String _passwordSalt, 
			System.String _mobilePin, System.String _email, System.String _loweredEmail, 
			System.String _passwordQuestion, System.String _passwordAnswer, System.Boolean _isApproved, 
			System.Boolean _isLockedOut, System.DateTime _createDate, System.DateTime _lastLoginDate, 
			System.DateTime _lastPasswordChangedDate, System.DateTime _lastLockoutDate, System.Int32 _failedPasswordAttemptCount, 
			System.DateTime _failedPasswordAttemptWindowStart, System.Int32 _failedPasswordAnswerAttemptCount, 
			System.DateTime _failedPasswordAnswerAttemptWindowStart, System.String _comment)
		{
			AspnetMembership newAspnetMembership = new AspnetMembership();
			newAspnetMembership.ApplicationId = _applicationId;
			newAspnetMembership.UserId = _userId;
			newAspnetMembership.Password = _password;
			newAspnetMembership.PasswordFormat = _passwordFormat;
			newAspnetMembership.PasswordSalt = _passwordSalt;
			newAspnetMembership.MobilePin = _mobilePin;
			newAspnetMembership.Email = _email;
			newAspnetMembership.LoweredEmail = _loweredEmail;
			newAspnetMembership.PasswordQuestion = _passwordQuestion;
			newAspnetMembership.PasswordAnswer = _passwordAnswer;
			newAspnetMembership.IsApproved = _isApproved;
			newAspnetMembership.IsLockedOut = _isLockedOut;
			newAspnetMembership.CreateDate = _createDate;
			newAspnetMembership.LastLoginDate = _lastLoginDate;
			newAspnetMembership.LastPasswordChangedDate = _lastPasswordChangedDate;
			newAspnetMembership.LastLockoutDate = _lastLockoutDate;
			newAspnetMembership.FailedPasswordAttemptCount = _failedPasswordAttemptCount;
			newAspnetMembership.FailedPasswordAttemptWindowStart = _failedPasswordAttemptWindowStart;
			newAspnetMembership.FailedPasswordAnswerAttemptCount = _failedPasswordAnswerAttemptCount;
			newAspnetMembership.FailedPasswordAnswerAttemptWindowStart = _failedPasswordAnswerAttemptWindowStart;
			newAspnetMembership.Comment = _comment;
			return newAspnetMembership;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ApplicationId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Guid ApplicationId
		{
			get
			{
				return this.entityData.ApplicationId; 
			}
			
			set
			{
				if (this.entityData.ApplicationId == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.ApplicationId, this.entityData.ApplicationId);
				this.entityData.ApplicationId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.ApplicationId, this.entityData.ApplicationId);
				OnPropertyChanged("ApplicationId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Guid UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				this.EntityId.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the UserId property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the UserId property.</remarks>
		/// <value>This type is uniqueidentifier</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Guid OriginalUserId
		{
			get { return this.entityData.OriginalUserId; }
			set { this.entityData.OriginalUserId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Password property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="Password")]
		[ValidatorComposition(CompositionType.And, Tag="Password")]

		[StringLengthValidator(128, MessageTemplate="Maximum length has been exceeded.", Tag="Password")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 128)]
		public virtual System.String Password
		{
			get
			{
				return this.entityData.Password; 
			}
			
			set
			{
				if (this.entityData.Password == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.Password, this.entityData.Password);
				this.entityData.Password = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.Password, this.entityData.Password);
				OnPropertyChanged("Password");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PasswordFormat property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 PasswordFormat
		{
			get
			{
				return this.entityData.PasswordFormat; 
			}
			
			set
			{
				if (this.entityData.PasswordFormat == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.PasswordFormat, this.entityData.PasswordFormat);
				this.entityData.PasswordFormat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.PasswordFormat, this.entityData.PasswordFormat);
				OnPropertyChanged("PasswordFormat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PasswordSalt property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[NotNullValidator(MessageTemplate="Property does not allow null values.", Tag="PasswordSalt")]
		[ValidatorComposition(CompositionType.And, Tag="PasswordSalt")]

		[StringLengthValidator(128, MessageTemplate="Maximum length has been exceeded.", Tag="PasswordSalt")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 128)]
		public virtual System.String PasswordSalt
		{
			get
			{
				return this.entityData.PasswordSalt; 
			}
			
			set
			{
				if (this.entityData.PasswordSalt == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.PasswordSalt, this.entityData.PasswordSalt);
				this.entityData.PasswordSalt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.PasswordSalt, this.entityData.PasswordSalt);
				OnPropertyChanged("PasswordSalt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MobilePin property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="MobilePIN")]
		[ValidatorComposition(CompositionType.Or, Tag="MobilePIN")]
		[StringLengthValidator(16, MessageTemplate="Maximum length has been exceeded.", Tag="MobilePIN")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 16)]
		public virtual System.String MobilePin
		{
			get
			{
				return this.entityData.MobilePin; 
			}
			
			set
			{
				if (this.entityData.MobilePin == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.MobilePin, this.entityData.MobilePin);
				this.entityData.MobilePin = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.MobilePin, this.entityData.MobilePin);
				OnPropertyChanged("MobilePin");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Email")]
		[ValidatorComposition(CompositionType.Or, Tag="Email")]
		[StringLengthValidator(256, MessageTemplate="Maximum length has been exceeded.", Tag="Email")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 256)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LoweredEmail property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="LoweredEmail")]
		[ValidatorComposition(CompositionType.Or, Tag="LoweredEmail")]
		[StringLengthValidator(256, MessageTemplate="Maximum length has been exceeded.", Tag="LoweredEmail")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 256)]
		public virtual System.String LoweredEmail
		{
			get
			{
				return this.entityData.LoweredEmail; 
			}
			
			set
			{
				if (this.entityData.LoweredEmail == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.LoweredEmail, this.entityData.LoweredEmail);
				this.entityData.LoweredEmail = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.LoweredEmail, this.entityData.LoweredEmail);
				OnPropertyChanged("LoweredEmail");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PasswordQuestion property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="PasswordQuestion")]
		[ValidatorComposition(CompositionType.Or, Tag="PasswordQuestion")]
		[StringLengthValidator(256, MessageTemplate="Maximum length has been exceeded.", Tag="PasswordQuestion")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 256)]
		public virtual System.String PasswordQuestion
		{
			get
			{
				return this.entityData.PasswordQuestion; 
			}
			
			set
			{
				if (this.entityData.PasswordQuestion == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.PasswordQuestion, this.entityData.PasswordQuestion);
				this.entityData.PasswordQuestion = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.PasswordQuestion, this.entityData.PasswordQuestion);
				OnPropertyChanged("PasswordQuestion");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PasswordAnswer property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="PasswordAnswer")]
		[ValidatorComposition(CompositionType.Or, Tag="PasswordAnswer")]
		[StringLengthValidator(128, MessageTemplate="Maximum length has been exceeded.", Tag="PasswordAnswer")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 128)]
		public virtual System.String PasswordAnswer
		{
			get
			{
				return this.entityData.PasswordAnswer; 
			}
			
			set
			{
				if (this.entityData.PasswordAnswer == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.PasswordAnswer, this.entityData.PasswordAnswer);
				this.entityData.PasswordAnswer = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.PasswordAnswer, this.entityData.PasswordAnswer);
				OnPropertyChanged("PasswordAnswer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsApproved property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsApproved
		{
			get
			{
				return this.entityData.IsApproved; 
			}
			
			set
			{
				if (this.entityData.IsApproved == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.IsApproved, this.entityData.IsApproved);
				this.entityData.IsApproved = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.IsApproved, this.entityData.IsApproved);
				OnPropertyChanged("IsApproved");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsLockedOut property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IsLockedOut
		{
			get
			{
				return this.entityData.IsLockedOut; 
			}
			
			set
			{
				if (this.entityData.IsLockedOut == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.IsLockedOut, this.entityData.IsLockedOut);
				this.entityData.IsLockedOut = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.IsLockedOut, this.entityData.IsLockedOut);
				OnPropertyChanged("IsLockedOut");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreateDate
		{
			get
			{
				return this.entityData.CreateDate; 
			}
			
			set
			{
				if (this.entityData.CreateDate == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.CreateDate, this.entityData.CreateDate);
				this.entityData.CreateDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.CreateDate, this.entityData.CreateDate);
				OnPropertyChanged("CreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastLoginDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastLoginDate
		{
			get
			{
				return this.entityData.LastLoginDate; 
			}
			
			set
			{
				if (this.entityData.LastLoginDate == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.LastLoginDate, this.entityData.LastLoginDate);
				this.entityData.LastLoginDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.LastLoginDate, this.entityData.LastLoginDate);
				OnPropertyChanged("LastLoginDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastPasswordChangedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this.entityData.LastPasswordChangedDate; 
			}
			
			set
			{
				if (this.entityData.LastPasswordChangedDate == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.LastPasswordChangedDate, this.entityData.LastPasswordChangedDate);
				this.entityData.LastPasswordChangedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.LastPasswordChangedDate, this.entityData.LastPasswordChangedDate);
				OnPropertyChanged("LastPasswordChangedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastLockoutDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastLockoutDate
		{
			get
			{
				return this.entityData.LastLockoutDate; 
			}
			
			set
			{
				if (this.entityData.LastLockoutDate == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.LastLockoutDate, this.entityData.LastLockoutDate);
				this.entityData.LastLockoutDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.LastLockoutDate, this.entityData.LastLockoutDate);
				OnPropertyChanged("LastLockoutDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FailedPasswordAttemptCount property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 FailedPasswordAttemptCount
		{
			get
			{
				return this.entityData.FailedPasswordAttemptCount; 
			}
			
			set
			{
				if (this.entityData.FailedPasswordAttemptCount == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.FailedPasswordAttemptCount, this.entityData.FailedPasswordAttemptCount);
				this.entityData.FailedPasswordAttemptCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.FailedPasswordAttemptCount, this.entityData.FailedPasswordAttemptCount);
				OnPropertyChanged("FailedPasswordAttemptCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FailedPasswordAttemptWindowStart property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this.entityData.FailedPasswordAttemptWindowStart; 
			}
			
			set
			{
				if (this.entityData.FailedPasswordAttemptWindowStart == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.FailedPasswordAttemptWindowStart, this.entityData.FailedPasswordAttemptWindowStart);
				this.entityData.FailedPasswordAttemptWindowStart = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.FailedPasswordAttemptWindowStart, this.entityData.FailedPasswordAttemptWindowStart);
				OnPropertyChanged("FailedPasswordAttemptWindowStart");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FailedPasswordAnswerAttemptCount property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this.entityData.FailedPasswordAnswerAttemptCount; 
			}
			
			set
			{
				if (this.entityData.FailedPasswordAnswerAttemptCount == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.FailedPasswordAnswerAttemptCount, this.entityData.FailedPasswordAnswerAttemptCount);
				this.entityData.FailedPasswordAnswerAttemptCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.FailedPasswordAnswerAttemptCount, this.entityData.FailedPasswordAnswerAttemptCount);
				OnPropertyChanged("FailedPasswordAnswerAttemptCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FailedPasswordAnswerAttemptWindowStart property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this.entityData.FailedPasswordAnswerAttemptWindowStart; 
			}
			
			set
			{
				if (this.entityData.FailedPasswordAnswerAttemptWindowStart == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.FailedPasswordAnswerAttemptWindowStart, this.entityData.FailedPasswordAnswerAttemptWindowStart);
				this.entityData.FailedPasswordAnswerAttemptWindowStart = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.FailedPasswordAnswerAttemptWindowStart, this.entityData.FailedPasswordAnswerAttemptWindowStart);
				OnPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Comment property. 
		///		
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>


		[NotNullValidator(Negated=true, Tag="Comment")]
		[ValidatorComposition(CompositionType.Or, Tag="Comment")]
		[StringLengthValidator(3000, MessageTemplate="Maximum length has been exceeded.", Tag="Comment")]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3000)]
		public virtual System.String Comment
		{
			get
			{
				return this.entityData.Comment; 
			}
			
			set
			{
				if (this.entityData.Comment == value)
					return;
					
				OnColumnChanging(AspnetMembershipColumn.Comment, this.entityData.Comment);
				this.entityData.Comment = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AspnetMembershipColumn.Comment, this.entityData.Comment);
				OnPropertyChanged("Comment");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AspnetApplications"/>.
		/// </summary>
		/// <value>The source AspnetApplications for ApplicationId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AspnetApplications ApplicationIdSource
      	{
            get { return entityData.ApplicationIdSource; }
            set { entityData.ApplicationIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AspnetUsers"/>.
		/// </summary>
		/// <value>The source AspnetUsers for UserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AspnetUsers UserIdSource
      	{
            get { return entityData.UserIdSource; }
            set { entityData.UserIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "aspnet_Membership"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ApplicationId", "UserId", "Password", "PasswordFormat", "PasswordSalt", "MobilePIN", "Email", "LoweredEmail", "PasswordQuestion", "PasswordAnswer", "IsApproved", "IsLockedOut", "CreateDate", "LastLoginDate", "LastPasswordChangedDate", "LastLockoutDate", "FailedPasswordAttemptCount", "FailedPasswordAttemptWindowStart", "FailedPasswordAnswerAttemptCount", "FailedPasswordAnswerAttemptWindowStart", "Comment"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AspnetMembershipEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AspnetMembership) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AspnetMembership>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AspnetMembership);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AspnetMembership Entity 
		///</summary>
		protected virtual AspnetMembership Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AspnetMembership copy = new AspnetMembership();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.ApplicationId = this.ApplicationId;
				copy.UserId = this.UserId;
					copy.OriginalUserId = this.OriginalUserId;
				copy.Password = this.Password;
				copy.PasswordFormat = this.PasswordFormat;
				copy.PasswordSalt = this.PasswordSalt;
				copy.MobilePin = this.MobilePin;
				copy.Email = this.Email;
				copy.LoweredEmail = this.LoweredEmail;
				copy.PasswordQuestion = this.PasswordQuestion;
				copy.PasswordAnswer = this.PasswordAnswer;
				copy.IsApproved = this.IsApproved;
				copy.IsLockedOut = this.IsLockedOut;
				copy.CreateDate = this.CreateDate;
				copy.LastLoginDate = this.LastLoginDate;
				copy.LastPasswordChangedDate = this.LastPasswordChangedDate;
				copy.LastLockoutDate = this.LastLockoutDate;
				copy.FailedPasswordAttemptCount = this.FailedPasswordAttemptCount;
				copy.FailedPasswordAttemptWindowStart = this.FailedPasswordAttemptWindowStart;
				copy.FailedPasswordAnswerAttemptCount = this.FailedPasswordAnswerAttemptCount;
				copy.FailedPasswordAnswerAttemptWindowStart = this.FailedPasswordAnswerAttemptWindowStart;
				copy.Comment = this.Comment;
			
			if (this.ApplicationIdSource != null && existingCopies.Contains(this.ApplicationIdSource))
				copy.ApplicationIdSource = existingCopies[this.ApplicationIdSource] as AspnetApplications;
			else
				copy.ApplicationIdSource = MakeCopyOf(this.ApplicationIdSource, existingCopies) as AspnetApplications;
			if (this.UserIdSource != null && existingCopies.Contains(this.UserIdSource))
				copy.UserIdSource = existingCopies[this.UserIdSource] as AspnetUsers;
			else
				copy.UserIdSource = MakeCopyOf(this.UserIdSource, existingCopies) as AspnetUsers;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AspnetMembership Entity 
		///</summary>
		public virtual AspnetMembership Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AspnetMembership Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AspnetMembership DeepCopy()
		{
			return EntityHelper.Clone<AspnetMembership>(this as AspnetMembership);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AspnetMembershipEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AspnetMembershipEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AspnetMembershipEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AspnetMembershipColumn column)
		{
			switch(column)
			{
					case AspnetMembershipColumn.ApplicationId:
					return entityData.ApplicationId != _originalData.ApplicationId;
					case AspnetMembershipColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case AspnetMembershipColumn.Password:
					return entityData.Password != _originalData.Password;
					case AspnetMembershipColumn.PasswordFormat:
					return entityData.PasswordFormat != _originalData.PasswordFormat;
					case AspnetMembershipColumn.PasswordSalt:
					return entityData.PasswordSalt != _originalData.PasswordSalt;
					case AspnetMembershipColumn.MobilePin:
					return entityData.MobilePin != _originalData.MobilePin;
					case AspnetMembershipColumn.Email:
					return entityData.Email != _originalData.Email;
					case AspnetMembershipColumn.LoweredEmail:
					return entityData.LoweredEmail != _originalData.LoweredEmail;
					case AspnetMembershipColumn.PasswordQuestion:
					return entityData.PasswordQuestion != _originalData.PasswordQuestion;
					case AspnetMembershipColumn.PasswordAnswer:
					return entityData.PasswordAnswer != _originalData.PasswordAnswer;
					case AspnetMembershipColumn.IsApproved:
					return entityData.IsApproved != _originalData.IsApproved;
					case AspnetMembershipColumn.IsLockedOut:
					return entityData.IsLockedOut != _originalData.IsLockedOut;
					case AspnetMembershipColumn.CreateDate:
					return entityData.CreateDate != _originalData.CreateDate;
					case AspnetMembershipColumn.LastLoginDate:
					return entityData.LastLoginDate != _originalData.LastLoginDate;
					case AspnetMembershipColumn.LastPasswordChangedDate:
					return entityData.LastPasswordChangedDate != _originalData.LastPasswordChangedDate;
					case AspnetMembershipColumn.LastLockoutDate:
					return entityData.LastLockoutDate != _originalData.LastLockoutDate;
					case AspnetMembershipColumn.FailedPasswordAttemptCount:
					return entityData.FailedPasswordAttemptCount != _originalData.FailedPasswordAttemptCount;
					case AspnetMembershipColumn.FailedPasswordAttemptWindowStart:
					return entityData.FailedPasswordAttemptWindowStart != _originalData.FailedPasswordAttemptWindowStart;
					case AspnetMembershipColumn.FailedPasswordAnswerAttemptCount:
					return entityData.FailedPasswordAnswerAttemptCount != _originalData.FailedPasswordAnswerAttemptCount;
					case AspnetMembershipColumn.FailedPasswordAnswerAttemptWindowStart:
					return entityData.FailedPasswordAnswerAttemptWindowStart != _originalData.FailedPasswordAnswerAttemptWindowStart;
					case AspnetMembershipColumn.Comment:
					return entityData.Comment != _originalData.Comment;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AspnetMembershipColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ApplicationId != _originalData.ApplicationId;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.Password != _originalData.Password;
			result = result || entityData.PasswordFormat != _originalData.PasswordFormat;
			result = result || entityData.PasswordSalt != _originalData.PasswordSalt;
			result = result || entityData.MobilePin != _originalData.MobilePin;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.LoweredEmail != _originalData.LoweredEmail;
			result = result || entityData.PasswordQuestion != _originalData.PasswordQuestion;
			result = result || entityData.PasswordAnswer != _originalData.PasswordAnswer;
			result = result || entityData.IsApproved != _originalData.IsApproved;
			result = result || entityData.IsLockedOut != _originalData.IsLockedOut;
			result = result || entityData.CreateDate != _originalData.CreateDate;
			result = result || entityData.LastLoginDate != _originalData.LastLoginDate;
			result = result || entityData.LastPasswordChangedDate != _originalData.LastPasswordChangedDate;
			result = result || entityData.LastLockoutDate != _originalData.LastLockoutDate;
			result = result || entityData.FailedPasswordAttemptCount != _originalData.FailedPasswordAttemptCount;
			result = result || entityData.FailedPasswordAttemptWindowStart != _originalData.FailedPasswordAttemptWindowStart;
			result = result || entityData.FailedPasswordAnswerAttemptCount != _originalData.FailedPasswordAnswerAttemptCount;
			result = result || entityData.FailedPasswordAnswerAttemptWindowStart != _originalData.FailedPasswordAnswerAttemptWindowStart;
			result = result || entityData.Comment != _originalData.Comment;
			return result;
		}	
		
		///<summary>
		///  Returns a AspnetMembership Entity with the original data.
		///</summary>
		public AspnetMembership GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAspnetMembership(
				_originalData.ApplicationId,
				_originalData.UserId,
				_originalData.Password,
				_originalData.PasswordFormat,
				_originalData.PasswordSalt,
				_originalData.MobilePin,
				_originalData.Email,
				_originalData.LoweredEmail,
				_originalData.PasswordQuestion,
				_originalData.PasswordAnswer,
				_originalData.IsApproved,
				_originalData.IsLockedOut,
				_originalData.CreateDate,
				_originalData.LastLoginDate,
				_originalData.LastPasswordChangedDate,
				_originalData.LastLockoutDate,
				_originalData.FailedPasswordAttemptCount,
				_originalData.FailedPasswordAttemptWindowStart,
				_originalData.FailedPasswordAnswerAttemptCount,
				_originalData.FailedPasswordAnswerAttemptWindowStart,
				_originalData.Comment
				);
				
			return (AspnetMembership)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AspnetMembershipBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AspnetMembershipBase)
				return ValueEquals(this, (AspnetMembershipBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AspnetMembershipBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ApplicationId.GetHashCode() ^ 
					this.UserId.GetHashCode() ^ 
					this.Password.GetHashCode() ^ 
					this.PasswordFormat.GetHashCode() ^ 
					this.PasswordSalt.GetHashCode() ^ 
					((this.MobilePin == null) ? string.Empty : this.MobilePin.ToString()).GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					((this.LoweredEmail == null) ? string.Empty : this.LoweredEmail.ToString()).GetHashCode() ^ 
					((this.PasswordQuestion == null) ? string.Empty : this.PasswordQuestion.ToString()).GetHashCode() ^ 
					((this.PasswordAnswer == null) ? string.Empty : this.PasswordAnswer.ToString()).GetHashCode() ^ 
					this.IsApproved.GetHashCode() ^ 
					this.IsLockedOut.GetHashCode() ^ 
					this.CreateDate.GetHashCode() ^ 
					this.LastLoginDate.GetHashCode() ^ 
					this.LastPasswordChangedDate.GetHashCode() ^ 
					this.LastLockoutDate.GetHashCode() ^ 
					this.FailedPasswordAttemptCount.GetHashCode() ^ 
					this.FailedPasswordAttemptWindowStart.GetHashCode() ^ 
					this.FailedPasswordAnswerAttemptCount.GetHashCode() ^ 
					this.FailedPasswordAnswerAttemptWindowStart.GetHashCode() ^ 
					((this.Comment == null) ? string.Empty : this.Comment.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AspnetMembershipBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AspnetMembershipBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AspnetMembershipBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AspnetMembershipBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AspnetMembershipBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AspnetMembershipBase Object1, AspnetMembershipBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ApplicationId != Object2.ApplicationId)
				equal = false;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.Password != Object2.Password)
				equal = false;
			if (Object1.PasswordFormat != Object2.PasswordFormat)
				equal = false;
			if (Object1.PasswordSalt != Object2.PasswordSalt)
				equal = false;
			if ( Object1.MobilePin != null && Object2.MobilePin != null )
			{
				if (Object1.MobilePin != Object2.MobilePin)
					equal = false;
			}
			else if (Object1.MobilePin == null ^ Object2.MobilePin == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.LoweredEmail != null && Object2.LoweredEmail != null )
			{
				if (Object1.LoweredEmail != Object2.LoweredEmail)
					equal = false;
			}
			else if (Object1.LoweredEmail == null ^ Object2.LoweredEmail == null )
			{
				equal = false;
			}
			if ( Object1.PasswordQuestion != null && Object2.PasswordQuestion != null )
			{
				if (Object1.PasswordQuestion != Object2.PasswordQuestion)
					equal = false;
			}
			else if (Object1.PasswordQuestion == null ^ Object2.PasswordQuestion == null )
			{
				equal = false;
			}
			if ( Object1.PasswordAnswer != null && Object2.PasswordAnswer != null )
			{
				if (Object1.PasswordAnswer != Object2.PasswordAnswer)
					equal = false;
			}
			else if (Object1.PasswordAnswer == null ^ Object2.PasswordAnswer == null )
			{
				equal = false;
			}
			if (Object1.IsApproved != Object2.IsApproved)
				equal = false;
			if (Object1.IsLockedOut != Object2.IsLockedOut)
				equal = false;
			if (Object1.CreateDate != Object2.CreateDate)
				equal = false;
			if (Object1.LastLoginDate != Object2.LastLoginDate)
				equal = false;
			if (Object1.LastPasswordChangedDate != Object2.LastPasswordChangedDate)
				equal = false;
			if (Object1.LastLockoutDate != Object2.LastLockoutDate)
				equal = false;
			if (Object1.FailedPasswordAttemptCount != Object2.FailedPasswordAttemptCount)
				equal = false;
			if (Object1.FailedPasswordAttemptWindowStart != Object2.FailedPasswordAttemptWindowStart)
				equal = false;
			if (Object1.FailedPasswordAnswerAttemptCount != Object2.FailedPasswordAnswerAttemptCount)
				equal = false;
			if (Object1.FailedPasswordAnswerAttemptWindowStart != Object2.FailedPasswordAnswerAttemptWindowStart)
				equal = false;
			if ( Object1.Comment != null && Object2.Comment != null )
			{
				if (Object1.Comment != Object2.Comment)
					equal = false;
			}
			else if (Object1.Comment == null ^ Object2.Comment == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AspnetMembershipBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AspnetMembershipComparer GetComparer()
        {
            return new AspnetMembershipComparer();
        }
        */

        // Comparer delegates back to AspnetMembership
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AspnetMembership rhs, AspnetMembershipColumn which)
        {
            switch (which)
            {
            	
            	
            	case AspnetMembershipColumn.ApplicationId:
            		return this.ApplicationId.CompareTo(rhs.ApplicationId);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.Password:
            		return this.Password.CompareTo(rhs.Password);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.PasswordFormat:
            		return this.PasswordFormat.CompareTo(rhs.PasswordFormat);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.PasswordSalt:
            		return this.PasswordSalt.CompareTo(rhs.PasswordSalt);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.MobilePin:
            		return this.MobilePin.CompareTo(rhs.MobilePin);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.LoweredEmail:
            		return this.LoweredEmail.CompareTo(rhs.LoweredEmail);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.PasswordQuestion:
            		return this.PasswordQuestion.CompareTo(rhs.PasswordQuestion);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.PasswordAnswer:
            		return this.PasswordAnswer.CompareTo(rhs.PasswordAnswer);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.IsApproved:
            		return this.IsApproved.CompareTo(rhs.IsApproved);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.IsLockedOut:
            		return this.IsLockedOut.CompareTo(rhs.IsLockedOut);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.CreateDate:
            		return this.CreateDate.CompareTo(rhs.CreateDate);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.LastLoginDate:
            		return this.LastLoginDate.CompareTo(rhs.LastLoginDate);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.LastPasswordChangedDate:
            		return this.LastPasswordChangedDate.CompareTo(rhs.LastPasswordChangedDate);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.LastLockoutDate:
            		return this.LastLockoutDate.CompareTo(rhs.LastLockoutDate);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.FailedPasswordAttemptCount:
            		return this.FailedPasswordAttemptCount.CompareTo(rhs.FailedPasswordAttemptCount);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.FailedPasswordAttemptWindowStart:
            		return this.FailedPasswordAttemptWindowStart.CompareTo(rhs.FailedPasswordAttemptWindowStart);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.FailedPasswordAnswerAttemptCount:
            		return this.FailedPasswordAnswerAttemptCount.CompareTo(rhs.FailedPasswordAnswerAttemptCount);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.FailedPasswordAnswerAttemptWindowStart:
            		return this.FailedPasswordAnswerAttemptWindowStart.CompareTo(rhs.FailedPasswordAnswerAttemptWindowStart);
            		
            		                 
            	
            	
            	case AspnetMembershipColumn.Comment:
            		return this.Comment.CompareTo(rhs.Comment);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AspnetMembershipKey> Members
		
		// member variable for the EntityId property
		private AspnetMembershipKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AspnetMembershipKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AspnetMembershipKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AspnetMembership")
					.Append("|").Append( this.UserId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{22}{21}- ApplicationId: {0}{21}- UserId: {1}{21}- Password: {2}{21}- PasswordFormat: {3}{21}- PasswordSalt: {4}{21}- MobilePin: {5}{21}- Email: {6}{21}- LoweredEmail: {7}{21}- PasswordQuestion: {8}{21}- PasswordAnswer: {9}{21}- IsApproved: {10}{21}- IsLockedOut: {11}{21}- CreateDate: {12}{21}- LastLoginDate: {13}{21}- LastPasswordChangedDate: {14}{21}- LastLockoutDate: {15}{21}- FailedPasswordAttemptCount: {16}{21}- FailedPasswordAttemptWindowStart: {17}{21}- FailedPasswordAnswerAttemptCount: {18}{21}- FailedPasswordAnswerAttemptWindowStart: {19}{21}- Comment: {20}{21}{23}", 
				this.ApplicationId,
				this.UserId,
				this.Password,
				this.PasswordFormat,
				this.PasswordSalt,
				(this.MobilePin == null) ? string.Empty : this.MobilePin.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.LoweredEmail == null) ? string.Empty : this.LoweredEmail.ToString(),
				(this.PasswordQuestion == null) ? string.Empty : this.PasswordQuestion.ToString(),
				(this.PasswordAnswer == null) ? string.Empty : this.PasswordAnswer.ToString(),
				this.IsApproved,
				this.IsLockedOut,
				this.CreateDate,
				this.LastLoginDate,
				this.LastPasswordChangedDate,
				this.LastLockoutDate,
				this.FailedPasswordAttemptCount,
				this.FailedPasswordAttemptWindowStart,
				this.FailedPasswordAnswerAttemptCount,
				this.FailedPasswordAnswerAttemptWindowStart,
				(this.Comment == null) ? string.Empty : this.Comment.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'aspnet_Membership' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AspnetMembershipEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// UserId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "aspnet_Membership"</remarks>
		public System.Guid UserId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Guid OriginalUserId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ApplicationId : 
		/// </summary>
		public System.Guid		  ApplicationId = Guid.Empty;
		
		/// <summary>
		/// Password : 
		/// </summary>
		public System.String		  Password = string.Empty;
		
		/// <summary>
		/// PasswordFormat : 
		/// </summary>
		public System.Int32		  PasswordFormat = (int)0;
		
		/// <summary>
		/// PasswordSalt : 
		/// </summary>
		public System.String		  PasswordSalt = string.Empty;
		
		/// <summary>
		/// MobilePIN : 
		/// </summary>
		public System.String		  MobilePin = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String		  Email = null;
		
		/// <summary>
		/// LoweredEmail : 
		/// </summary>
		public System.String		  LoweredEmail = null;
		
		/// <summary>
		/// PasswordQuestion : 
		/// </summary>
		public System.String		  PasswordQuestion = null;
		
		/// <summary>
		/// PasswordAnswer : 
		/// </summary>
		public System.String		  PasswordAnswer = null;
		
		/// <summary>
		/// IsApproved : 
		/// </summary>
		public System.Boolean		  IsApproved = false;
		
		/// <summary>
		/// IsLockedOut : 
		/// </summary>
		public System.Boolean		  IsLockedOut = false;
		
		/// <summary>
		/// CreateDate : 
		/// </summary>
		public System.DateTime		  CreateDate = DateTime.MinValue;
		
		/// <summary>
		/// LastLoginDate : 
		/// </summary>
		public System.DateTime		  LastLoginDate = DateTime.MinValue;
		
		/// <summary>
		/// LastPasswordChangedDate : 
		/// </summary>
		public System.DateTime		  LastPasswordChangedDate = DateTime.MinValue;
		
		/// <summary>
		/// LastLockoutDate : 
		/// </summary>
		public System.DateTime		  LastLockoutDate = DateTime.MinValue;
		
		/// <summary>
		/// FailedPasswordAttemptCount : 
		/// </summary>
		public System.Int32		  FailedPasswordAttemptCount = (int)0;
		
		/// <summary>
		/// FailedPasswordAttemptWindowStart : 
		/// </summary>
		public System.DateTime		  FailedPasswordAttemptWindowStart = DateTime.MinValue;
		
		/// <summary>
		/// FailedPasswordAnswerAttemptCount : 
		/// </summary>
		public System.Int32		  FailedPasswordAnswerAttemptCount = (int)0;
		
		/// <summary>
		/// FailedPasswordAnswerAttemptWindowStart : 
		/// </summary>
		public System.DateTime		  FailedPasswordAnswerAttemptWindowStart = DateTime.MinValue;
		
		/// <summary>
		/// Comment : 
		/// </summary>
		public System.String		  Comment = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AspnetApplications _applicationIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AspnetApplications"/>.
		/// </summary>
		/// <value>The source AspnetApplications for ApplicationId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AspnetApplications ApplicationIdSource
      	{
            get { return this._applicationIdSource; }
            set { this._applicationIdSource = value; }
      	}
		private AspnetUsers _userIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AspnetUsers"/>.
		/// </summary>
		/// <value>The source AspnetUsers for UserId.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual AspnetUsers UserIdSource
      	{
            get { return this._userIdSource; }
            set { this._userIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AspnetMembershipEntityData _tmp = new AspnetMembershipEntityData();
						
			_tmp.UserId = this.UserId;
			_tmp.OriginalUserId = this.OriginalUserId;
			
			_tmp.ApplicationId = this.ApplicationId;
			_tmp.Password = this.Password;
			_tmp.PasswordFormat = this.PasswordFormat;
			_tmp.PasswordSalt = this.PasswordSalt;
			_tmp.MobilePin = this.MobilePin;
			_tmp.Email = this.Email;
			_tmp.LoweredEmail = this.LoweredEmail;
			_tmp.PasswordQuestion = this.PasswordQuestion;
			_tmp.PasswordAnswer = this.PasswordAnswer;
			_tmp.IsApproved = this.IsApproved;
			_tmp.IsLockedOut = this.IsLockedOut;
			_tmp.CreateDate = this.CreateDate;
			_tmp.LastLoginDate = this.LastLoginDate;
			_tmp.LastPasswordChangedDate = this.LastPasswordChangedDate;
			_tmp.LastLockoutDate = this.LastLockoutDate;
			_tmp.FailedPasswordAttemptCount = this.FailedPasswordAttemptCount;
			_tmp.FailedPasswordAttemptWindowStart = this.FailedPasswordAttemptWindowStart;
			_tmp.FailedPasswordAnswerAttemptCount = this.FailedPasswordAnswerAttemptCount;
			_tmp.FailedPasswordAnswerAttemptWindowStart = this.FailedPasswordAnswerAttemptWindowStart;
			_tmp.Comment = this.Comment;
			
			#region Source Parent Composite Entities
			if (this.ApplicationIdSource != null)
				_tmp.ApplicationIdSource = MakeCopyOf(this.ApplicationIdSource) as AspnetApplications;
			if (this.UserIdSource != null)
				_tmp.UserIdSource = MakeCopyOf(this.UserIdSource) as AspnetUsers;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AspnetMembershipEntityData _tmp = new AspnetMembershipEntityData();
						
			_tmp.UserId = this.UserId;
			_tmp.OriginalUserId = this.OriginalUserId;
			
			_tmp.ApplicationId = this.ApplicationId;
			_tmp.Password = this.Password;
			_tmp.PasswordFormat = this.PasswordFormat;
			_tmp.PasswordSalt = this.PasswordSalt;
			_tmp.MobilePin = this.MobilePin;
			_tmp.Email = this.Email;
			_tmp.LoweredEmail = this.LoweredEmail;
			_tmp.PasswordQuestion = this.PasswordQuestion;
			_tmp.PasswordAnswer = this.PasswordAnswer;
			_tmp.IsApproved = this.IsApproved;
			_tmp.IsLockedOut = this.IsLockedOut;
			_tmp.CreateDate = this.CreateDate;
			_tmp.LastLoginDate = this.LastLoginDate;
			_tmp.LastPasswordChangedDate = this.LastPasswordChangedDate;
			_tmp.LastLockoutDate = this.LastLockoutDate;
			_tmp.FailedPasswordAttemptCount = this.FailedPasswordAttemptCount;
			_tmp.FailedPasswordAttemptWindowStart = this.FailedPasswordAttemptWindowStart;
			_tmp.FailedPasswordAnswerAttemptCount = this.FailedPasswordAnswerAttemptCount;
			_tmp.FailedPasswordAnswerAttemptWindowStart = this.FailedPasswordAnswerAttemptWindowStart;
			_tmp.Comment = this.Comment;
			
			#region Source Parent Composite Entities
			if (this.ApplicationIdSource != null && existingCopies.Contains(this.ApplicationIdSource))
				_tmp.ApplicationIdSource = existingCopies[this.ApplicationIdSource] as AspnetApplications;
			else
				_tmp.ApplicationIdSource = MakeCopyOf(this.ApplicationIdSource, existingCopies) as AspnetApplications;
			if (this.UserIdSource != null && existingCopies.Contains(this.UserIdSource))
				_tmp.UserIdSource = existingCopies[this.UserIdSource] as AspnetUsers;
			else
				_tmp.UserIdSource = MakeCopyOf(this.UserIdSource, existingCopies) as AspnetUsers;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AspnetMembershipColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AspnetMembershipColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AspnetMembershipColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AspnetMembershipColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AspnetMembershipColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AspnetMembershipColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AspnetMembershipEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AspnetMembershipEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AspnetMembershipColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AspnetMembershipColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AspnetMembershipEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AspnetMembershipEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AspnetMembershipEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AspnetMembership"/> object.
	/// </remarks>
	public class AspnetMembershipEventArgs : System.EventArgs
	{
		private AspnetMembershipColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AspnetMembershipEventArgs class.
		///</summary>
		public AspnetMembershipEventArgs(AspnetMembershipColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AspnetMembershipEventArgs class.
		///</summary>
		public AspnetMembershipEventArgs(AspnetMembershipColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AspnetMembershipColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AspnetMembershipColumn" />
		public AspnetMembershipColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AspnetMembership related events.
	///</summary>
	public delegate void AspnetMembershipEventHandler(object sender, AspnetMembershipEventArgs e);
	
	#region AspnetMembershipComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AspnetMembershipComparer : System.Collections.Generic.IComparer<AspnetMembership>
	{
		AspnetMembershipColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AspnetMembershipComparer"/> class.
        /// </summary>
		public AspnetMembershipComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AspnetMembershipComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AspnetMembershipComparer(AspnetMembershipColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AspnetMembership"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AspnetMembership"/> to compare.</param>
        /// <param name="b">The second <c>AspnetMembership</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AspnetMembership a, AspnetMembership b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AspnetMembership entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AspnetMembership a, AspnetMembership b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AspnetMembershipColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AspnetMembershipKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AspnetMembership"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AspnetMembershipKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AspnetMembershipKey class.
		/// </summary>
		public AspnetMembershipKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AspnetMembershipKey class.
		/// </summary>
		public AspnetMembershipKey(AspnetMembershipBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.UserId = entity.UserId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AspnetMembershipKey class.
		/// </summary>
		public AspnetMembershipKey(System.Guid _userId)
		{
			#region Init Properties

			this.UserId = _userId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AspnetMembershipBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AspnetMembershipBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the UserId property
		private System.Guid _userId;
		
		/// <summary>
		/// Gets or sets the UserId property.
		/// </summary>
		public System.Guid UserId
		{
			get { return _userId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.UserId = value;
				
				_userId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				UserId = ( values["UserId"] != null ) ? (System.Guid) EntityUtil.ChangeType(values["UserId"], typeof(System.Guid)) : Guid.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("UserId", UserId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("UserId: {0}{1}",
								UserId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AspnetMembershipColumn Enum
	
	/// <summary>
	/// Enumerate the AspnetMembership columns.
	/// </summary>
	[Serializable]
	public enum AspnetMembershipColumn : int
	{
		/// <summary>
		/// ApplicationId : 
		/// </summary>
		[EnumTextValue("ApplicationId")]
		[ColumnEnum("ApplicationId", typeof(System.Guid), System.Data.DbType.Guid, false, false, false)]
		ApplicationId = 1,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserId")]
		[ColumnEnum("UserId", typeof(System.Guid), System.Data.DbType.Guid, true, false, false)]
		UserId = 2,
		/// <summary>
		/// Password : 
		/// </summary>
		[EnumTextValue("Password")]
		[ColumnEnum("Password", typeof(System.String), System.Data.DbType.String, false, false, false, 128)]
		Password = 3,
		/// <summary>
		/// PasswordFormat : 
		/// </summary>
		[EnumTextValue("PasswordFormat")]
		[ColumnEnum("PasswordFormat", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		PasswordFormat = 4,
		/// <summary>
		/// PasswordSalt : 
		/// </summary>
		[EnumTextValue("PasswordSalt")]
		[ColumnEnum("PasswordSalt", typeof(System.String), System.Data.DbType.String, false, false, false, 128)]
		PasswordSalt = 5,
		/// <summary>
		/// MobilePin : 
		/// </summary>
		[EnumTextValue("MobilePIN")]
		[ColumnEnum("MobilePIN", typeof(System.String), System.Data.DbType.String, false, false, true, 16)]
		MobilePin = 6,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		Email = 7,
		/// <summary>
		/// LoweredEmail : 
		/// </summary>
		[EnumTextValue("LoweredEmail")]
		[ColumnEnum("LoweredEmail", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		LoweredEmail = 8,
		/// <summary>
		/// PasswordQuestion : 
		/// </summary>
		[EnumTextValue("PasswordQuestion")]
		[ColumnEnum("PasswordQuestion", typeof(System.String), System.Data.DbType.String, false, false, true, 256)]
		PasswordQuestion = 9,
		/// <summary>
		/// PasswordAnswer : 
		/// </summary>
		[EnumTextValue("PasswordAnswer")]
		[ColumnEnum("PasswordAnswer", typeof(System.String), System.Data.DbType.String, false, false, true, 128)]
		PasswordAnswer = 10,
		/// <summary>
		/// IsApproved : 
		/// </summary>
		[EnumTextValue("IsApproved")]
		[ColumnEnum("IsApproved", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsApproved = 11,
		/// <summary>
		/// IsLockedOut : 
		/// </summary>
		[EnumTextValue("IsLockedOut")]
		[ColumnEnum("IsLockedOut", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IsLockedOut = 12,
		/// <summary>
		/// CreateDate : 
		/// </summary>
		[EnumTextValue("CreateDate")]
		[ColumnEnum("CreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreateDate = 13,
		/// <summary>
		/// LastLoginDate : 
		/// </summary>
		[EnumTextValue("LastLoginDate")]
		[ColumnEnum("LastLoginDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastLoginDate = 14,
		/// <summary>
		/// LastPasswordChangedDate : 
		/// </summary>
		[EnumTextValue("LastPasswordChangedDate")]
		[ColumnEnum("LastPasswordChangedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastPasswordChangedDate = 15,
		/// <summary>
		/// LastLockoutDate : 
		/// </summary>
		[EnumTextValue("LastLockoutDate")]
		[ColumnEnum("LastLockoutDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastLockoutDate = 16,
		/// <summary>
		/// FailedPasswordAttemptCount : 
		/// </summary>
		[EnumTextValue("FailedPasswordAttemptCount")]
		[ColumnEnum("FailedPasswordAttemptCount", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		FailedPasswordAttemptCount = 17,
		/// <summary>
		/// FailedPasswordAttemptWindowStart : 
		/// </summary>
		[EnumTextValue("FailedPasswordAttemptWindowStart")]
		[ColumnEnum("FailedPasswordAttemptWindowStart", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		FailedPasswordAttemptWindowStart = 18,
		/// <summary>
		/// FailedPasswordAnswerAttemptCount : 
		/// </summary>
		[EnumTextValue("FailedPasswordAnswerAttemptCount")]
		[ColumnEnum("FailedPasswordAnswerAttemptCount", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		FailedPasswordAnswerAttemptCount = 19,
		/// <summary>
		/// FailedPasswordAnswerAttemptWindowStart : 
		/// </summary>
		[EnumTextValue("FailedPasswordAnswerAttemptWindowStart")]
		[ColumnEnum("FailedPasswordAnswerAttemptWindowStart", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		FailedPasswordAnswerAttemptWindowStart = 20,
		/// <summary>
		/// Comment : 
		/// </summary>
		[EnumTextValue("Comment")]
		[ColumnEnum("Comment", typeof(System.String), System.Data.DbType.String, false, false, true, 3000)]
		Comment = 21
	}//End enum

	#endregion AspnetMembershipColumn Enum

} // end namespace
