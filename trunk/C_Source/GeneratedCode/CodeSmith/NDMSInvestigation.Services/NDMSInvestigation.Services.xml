<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NDMSInvestigation.Services</name>
    </assembly>
    <members>
        <member name="T:NDMSInvestigation.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:NDMSInvestigation.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:NDMSInvestigation.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:NDMSInvestigation.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:NDMSInvestigation.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetApplicationsServiceBase">
            <summary>
             An object representation of the 'aspnet_Applications' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AspnetApplications.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> class.
             </remarks>
        </member>
        <member name="T:NDMSInvestigation.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.OnProcessStarting(NDMSInvestigation.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.OnProcessEnded(NDMSInvestigation.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             <remarks>
             If no AbortIfFailure parameter is passed then the process will not abort if there is a failure
             </remarks>
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Executes the processors in the processor list
             <remarks>
             If abortIfFailure is set to true then the execution will halt on the first failure
            </remarks>
             </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.BulkInsert(NDMSInvestigation.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[],NDMSInvestigation.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.DeepLoad(NDMSInvestigation.Entities.TList{`0},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.DeepSave(`0,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.DeepSave(`0,NDMSInvestigation.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceBaseCore`2.DeepSave(NDMSInvestigation.Entities.TList{`0},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:NDMSInvestigation.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:NDMSInvestigation.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.CreateAspnetApplications(System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> instance.
            </summary>
            <param name="_applicationName"></param>
            <param name="_loweredApplicationName"></param>
            <param name="_description"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Get(NDMSInvestigation.Entities.AspnetApplicationsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.GetByLoweredApplicationName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_Applications_Index index.
            </summary>
            <param name="_loweredApplicationName"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.GetByLoweredApplicationName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_Applications_Index index.
            </summary>
            <param name="_loweredApplicationName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.GetByApplicationId(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Applicati__7E6CC920 index.
            </summary>
            <param name="_applicationId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.GetByApplicationId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Applicati__7E6CC920 index.
            </summary>
            <param name="_applicationId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.GetByApplicationName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key UQ__aspnet_Applicati__00551192 index.
            </summary>
            <param name="_applicationName"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.GetByApplicationName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key UQ__aspnet_Applicati__00551192 index.
            </summary>
            <param name="_applicationName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetApplications</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetApplications</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetApplications</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AspnetApplications} of <c>AspnetApplications</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetApplications</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetApplications</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AspnetApplications</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetApplications</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetApplications</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Insert(NDMSInvestigation.Entities.AspnetApplications)">
            <summary>
            public virtual method that Inserts a AspnetApplications object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetApplications object to Insert.</param>
            <remarks>After Inserting into the datasource, the AspnetApplications object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AspnetApplications entity = new AspnetApplications();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AspnetApplicationsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetApplications})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetApplications</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AspnetApplications</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AspnetApplications.
             <code><![CDATA[
             TList<AspnetApplications> list = new TList<AspnetApplications>();
             AspnetApplications entity = new AspnetApplications();
             entity.StringProperty = "foo";
             AspnetApplications entity2 = new AspnetApplications();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetApplicationsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Update(NDMSInvestigation.Entities.AspnetApplications)">
            <summary>
            public virtual method that Updates a AspnetApplications object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetApplications object to Update.</param>
            <remarks>After Updateing into the datasource, the AspnetApplications object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AspnetApplications entity = AspnetApplicationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AspnetApplicationsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetApplications})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetApplications</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AspnetApplications</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AspnetApplications.
             <code><![CDATA[
             TList<AspnetApplications> list = new TList<AspnetApplications>();
             AspnetApplications entity = new AspnetApplications();
             entity.StringProperty = "foo";
             AspnetApplications entity2 = new AspnetApplications();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetApplicationsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Save(NDMSInvestigation.Entities.AspnetApplications)">
            <summary>
            public virtual method that Saves a AspnetApplications object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetApplications object to Save.</param>
            <remarks>After Saveing into the datasource, the AspnetApplications object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AspnetApplications entity = AspnetApplicationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AspnetApplicationsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetApplications})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetApplications</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AspnetApplications</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AspnetApplications.
             <code><![CDATA[
             TList<AspnetApplications> list = new TList<AspnetApplications>();
             AspnetApplications entity = new AspnetApplications();
             entity.StringProperty = "foo";
             AspnetApplications entity2 = new AspnetApplications();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetApplicationsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Delete(NDMSInvestigation.Entities.AspnetApplications)">
            <summary>
            public virtual method that Deletes a AspnetApplications object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetApplications object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AspnetApplications object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AspnetApplications entity = AspnetApplicationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AspnetApplicationsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetApplications})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetApplications</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AspnetApplications</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AspnetApplications.
             <code><![CDATA[
             TList<AspnetApplications> list = new TList<AspnetApplications>();
             AspnetApplications entity = new AspnetApplications();
             entity.StringProperty = "foo";
             AspnetApplications entity2 = new AspnetApplications();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetApplicationsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Delete(NDMSInvestigation.Entities.AspnetApplicationsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.Delete(System.Guid)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid _applicationId
            </summary>
            <param name="_applicationId">AspnetApplications pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepLoadByLoweredApplicationName(System.String,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_loweredApplicationName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetApplications Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepLoadByApplicationId(System.Guid,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_applicationId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetApplications Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepLoadByApplicationName(System.String,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_applicationName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetApplications Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetApplications)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AspnetApplications Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetApplications)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetApplications,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetApplications)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AspnetApplications Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetApplications,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetApplications Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetApplications})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetApplications)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetApplications},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetApplications)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetApplications},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetApplications)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.AspnetApplications"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AspnetApplications Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetApplications,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AspnetApplications object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AspnetApplications Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AspnetApplications</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetApplications})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AspnetApplications} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetApplications},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AspnetApplications Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.AspnetApplicationsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AnswerDetailsService">
            <summary>
            An component type implementation of the 'AnswerDetails' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:NDMSInvestigation.Services.AnswerDetailsServiceBase">
            <summary>
             An object representation of the 'AnswerDetails' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AnswerDetails.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.CreateAnswerDetails(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> instance.
            </summary>
            <param name="_answerContent"></param>
            <param name="_answerMark"></param>
            <param name="_answerDescription"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Get(NDMSInvestigation.Entities.AnswerDetailsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.GetByAnswerId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK_AnswerDetails index.
            </summary>
            <param name="_answerId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.GetByAnswerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK_AnswerDetails index.
            </summary>
            <param name="_answerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AnswerDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AnswerDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AnswerDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AnswerDetails} of <c>AnswerDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AnswerDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AnswerDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AnswerDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AnswerDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AnswerDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Insert(NDMSInvestigation.Entities.AnswerDetails)">
            <summary>
            public virtual method that Inserts a AnswerDetails object into the datasource using a transaction.
            </summary>
            <param name="entity">AnswerDetails object to Insert.</param>
            <remarks>After Inserting into the datasource, the AnswerDetails object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AnswerDetails entity = new AnswerDetails();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AnswerDetailsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AnswerDetails})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AnswerDetails</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AnswerDetails</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AnswerDetails.
             <code><![CDATA[
             TList<AnswerDetails> list = new TList<AnswerDetails>();
             AnswerDetails entity = new AnswerDetails();
             entity.StringProperty = "foo";
             AnswerDetails entity2 = new AnswerDetails();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AnswerDetailsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Update(NDMSInvestigation.Entities.AnswerDetails)">
            <summary>
            public virtual method that Updates a AnswerDetails object into the datasource using a transaction.
            </summary>
            <param name="entity">AnswerDetails object to Update.</param>
            <remarks>After Updateing into the datasource, the AnswerDetails object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AnswerDetails entity = AnswerDetailsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AnswerDetailsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AnswerDetails})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AnswerDetails</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AnswerDetails</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AnswerDetails.
             <code><![CDATA[
             TList<AnswerDetails> list = new TList<AnswerDetails>();
             AnswerDetails entity = new AnswerDetails();
             entity.StringProperty = "foo";
             AnswerDetails entity2 = new AnswerDetails();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AnswerDetailsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Save(NDMSInvestigation.Entities.AnswerDetails)">
            <summary>
            public virtual method that Saves a AnswerDetails object into the datasource using a transaction.
            </summary>
            <param name="entity">AnswerDetails object to Save.</param>
            <remarks>After Saveing into the datasource, the AnswerDetails object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AnswerDetails entity = AnswerDetailsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AnswerDetailsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AnswerDetails})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AnswerDetails</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AnswerDetails</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AnswerDetails.
             <code><![CDATA[
             TList<AnswerDetails> list = new TList<AnswerDetails>();
             AnswerDetails entity = new AnswerDetails();
             entity.StringProperty = "foo";
             AnswerDetails entity2 = new AnswerDetails();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AnswerDetailsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Delete(NDMSInvestigation.Entities.AnswerDetails)">
            <summary>
            public virtual method that Deletes a AnswerDetails object into the datasource using a transaction.
            </summary>
            <param name="entity">AnswerDetails object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AnswerDetails object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AnswerDetails entity = AnswerDetailsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AnswerDetailsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AnswerDetails})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AnswerDetails</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AnswerDetails</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AnswerDetails.
             <code><![CDATA[
             TList<AnswerDetails> list = new TList<AnswerDetails>();
             AnswerDetails entity = new AnswerDetails();
             entity.StringProperty = "foo";
             AnswerDetails entity2 = new AnswerDetails();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AnswerDetailsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Delete(NDMSInvestigation.Entities.AnswerDetailsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _answerId
            </summary>
            <param name="_answerId">AnswerDetails pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepLoadByAnswerId(System.Int32,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_answerId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AnswerDetails Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.AnswerDetails)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AnswerDetails Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.AnswerDetails)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.AnswerDetails,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.AnswerDetails)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AnswerDetails Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.AnswerDetails,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AnswerDetails Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AnswerDetails})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.AnswerDetails)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AnswerDetails},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.AnswerDetails)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AnswerDetails},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepSave(NDMSInvestigation.Entities.AnswerDetails)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.AnswerDetails"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AnswerDetails Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepSave(NDMSInvestigation.Entities.AnswerDetails,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AnswerDetails object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AnswerDetails Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AnswerDetails</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AnswerDetails})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AnswerDetails} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AnswerDetails},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AnswerDetails Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.AnswerDetailsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AnswerDetailsService.#ctor">
            <summary>
            Initializes a new instance of the AnswerDetailsService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.UserServiceBase">
            <summary>
             An object representation of the 'User' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the User.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.User"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.User"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.CreateUser(System.Guid,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.User"/> instance.
            </summary>
            <param name="_userId"></param>
            <param name="_companyName"></param>
            <param name="_phone"></param>
            <param name="_fax"></param>
            <param name="_email"></param>
            <param name="_address"></param>
            <param name="_employeeNumber"></param>
            <param name="_director"></param>
            <param name="_country"></param>
            <param name="_city"></param>
            <param name="_district"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Get(NDMSInvestigation.Entities.UserKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.GetByUserId(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK_User index.
            </summary>
            <param name="_userId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.User"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.GetByUserId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK_User index.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.User"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.User"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.User"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{User} of <c>User</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Insert(NDMSInvestigation.Entities.User)">
            <summary>
            public virtual method that Inserts a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Insert.</param>
            <remarks>After Inserting into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            User entity = new User();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UserService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.User})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Update(NDMSInvestigation.Entities.User)">
            <summary>
            public virtual method that Updates a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Update.</param>
            <remarks>After Updateing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UserService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.User})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Save(NDMSInvestigation.Entities.User)">
            <summary>
            public virtual method that Saves a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Save.</param>
            <remarks>After Saveing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UserService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.User})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Delete(NDMSInvestigation.Entities.User)">
            <summary>
            public virtual method that Deletes a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Delete.</param>
            <remarks>After Deleteing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UserService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.User})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Delete(NDMSInvestigation.Entities.UserKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.Delete(System.Guid)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid _userId
            </summary>
            <param name="_userId">User pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.DeepLoadByUserId(System.Guid,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.User"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_userId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.User"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.DeepLoad(NDMSInvestigation.Entities.User)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">User Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.UserServiceBase.DeepLoad(NDMSInvestigation.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.DeepLoad(NDMSInvestigation.Entities.User,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.UserServiceBase.DeepLoad(NDMSInvestigation.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">User Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.DeepLoad(NDMSInvestigation.Entities.User,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.User"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.User})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.UserServiceBase.DeepLoad(NDMSInvestigation.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.User},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.UserServiceBase.DeepLoad(NDMSInvestigation.Entities.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.User},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.User"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.DeepSave(NDMSInvestigation.Entities.User)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.User"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">User Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.DeepSave(NDMSInvestigation.Entities.User,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the User object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">User Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>User</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.User})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{User} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.UserServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.User},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.UserServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase">
            <summary>
             An object representation of the 'aspnet_WebEvent_Events' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AspnetWebEventEvents.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.CreateAspnetWebEventEvents(System.String,System.DateTime,System.DateTime,System.String,System.Decimal,System.Decimal,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> instance.
            </summary>
            <param name="_eventId"></param>
            <param name="_eventTimeUtc"></param>
            <param name="_eventTime"></param>
            <param name="_eventType"></param>
            <param name="_eventSequence"></param>
            <param name="_eventOccurrence"></param>
            <param name="_eventCode"></param>
            <param name="_eventDetailCode"></param>
            <param name="_message"></param>
            <param name="_applicationPath"></param>
            <param name="_applicationVirtualPath"></param>
            <param name="_machineName"></param>
            <param name="_requestUrl"></param>
            <param name="_exceptionType"></param>
            <param name="_details"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Get(NDMSInvestigation.Entities.AspnetWebEventEventsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.GetByEventId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_WebEvent___5FB337D6 index.
            </summary>
            <param name="_eventId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.GetByEventId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_WebEvent___5FB337D6 index.
            </summary>
            <param name="_eventId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetWebEventEvents</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetWebEventEvents</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetWebEventEvents</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AspnetWebEventEvents} of <c>AspnetWebEventEvents</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetWebEventEvents</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetWebEventEvents</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AspnetWebEventEvents</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetWebEventEvents</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetWebEventEvents</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Insert(NDMSInvestigation.Entities.AspnetWebEventEvents)">
            <summary>
            public virtual method that Inserts a AspnetWebEventEvents object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetWebEventEvents object to Insert.</param>
            <remarks>After Inserting into the datasource, the AspnetWebEventEvents object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AspnetWebEventEvents entity = new AspnetWebEventEvents();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AspnetWebEventEventsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetWebEventEvents})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetWebEventEvents</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AspnetWebEventEvents</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AspnetWebEventEvents.
             <code><![CDATA[
             TList<AspnetWebEventEvents> list = new TList<AspnetWebEventEvents>();
             AspnetWebEventEvents entity = new AspnetWebEventEvents();
             entity.StringProperty = "foo";
             AspnetWebEventEvents entity2 = new AspnetWebEventEvents();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetWebEventEventsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Update(NDMSInvestigation.Entities.AspnetWebEventEvents)">
            <summary>
            public virtual method that Updates a AspnetWebEventEvents object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetWebEventEvents object to Update.</param>
            <remarks>After Updateing into the datasource, the AspnetWebEventEvents object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AspnetWebEventEvents entity = AspnetWebEventEventsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AspnetWebEventEventsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetWebEventEvents})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetWebEventEvents</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AspnetWebEventEvents</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AspnetWebEventEvents.
             <code><![CDATA[
             TList<AspnetWebEventEvents> list = new TList<AspnetWebEventEvents>();
             AspnetWebEventEvents entity = new AspnetWebEventEvents();
             entity.StringProperty = "foo";
             AspnetWebEventEvents entity2 = new AspnetWebEventEvents();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetWebEventEventsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Save(NDMSInvestigation.Entities.AspnetWebEventEvents)">
            <summary>
            public virtual method that Saves a AspnetWebEventEvents object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetWebEventEvents object to Save.</param>
            <remarks>After Saveing into the datasource, the AspnetWebEventEvents object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AspnetWebEventEvents entity = AspnetWebEventEventsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AspnetWebEventEventsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetWebEventEvents})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetWebEventEvents</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AspnetWebEventEvents</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AspnetWebEventEvents.
             <code><![CDATA[
             TList<AspnetWebEventEvents> list = new TList<AspnetWebEventEvents>();
             AspnetWebEventEvents entity = new AspnetWebEventEvents();
             entity.StringProperty = "foo";
             AspnetWebEventEvents entity2 = new AspnetWebEventEvents();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetWebEventEventsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Delete(NDMSInvestigation.Entities.AspnetWebEventEvents)">
            <summary>
            public virtual method that Deletes a AspnetWebEventEvents object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetWebEventEvents object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AspnetWebEventEvents object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AspnetWebEventEvents entity = AspnetWebEventEventsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AspnetWebEventEventsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetWebEventEvents})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetWebEventEvents</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AspnetWebEventEvents</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AspnetWebEventEvents.
             <code><![CDATA[
             TList<AspnetWebEventEvents> list = new TList<AspnetWebEventEvents>();
             AspnetWebEventEvents entity = new AspnetWebEventEvents();
             entity.StringProperty = "foo";
             AspnetWebEventEvents entity2 = new AspnetWebEventEvents();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetWebEventEventsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Delete(NDMSInvestigation.Entities.AspnetWebEventEventsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _eventId
            </summary>
            <param name="_eventId">AspnetWebEventEvents pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepLoadByEventId(System.String,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_eventId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetWebEventEvents Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetWebEventEvents)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AspnetWebEventEvents Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetWebEventEvents)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetWebEventEvents,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetWebEventEvents)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AspnetWebEventEvents Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetWebEventEvents,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetWebEventEvents Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetWebEventEvents})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetWebEventEvents)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetWebEventEvents},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetWebEventEvents)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetWebEventEvents},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetWebEventEvents)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.AspnetWebEventEvents"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AspnetWebEventEvents Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetWebEventEvents,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AspnetWebEventEvents object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AspnetWebEventEvents Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AspnetWebEventEvents</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetWebEventEvents})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AspnetWebEventEvents} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetWebEventEvents},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AspnetWebEventEvents Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.AspnetWebEventEventsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:NDMSInvestigation.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:NDMSInvestigation.Services.ProcessorEventArgs">
            <summary>
            Processor Event Args
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ProcessorEventArgs.#ctor(NDMSInvestigation.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:NDMSInvestigation.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:NDMSInvestigation.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:NDMSInvestigation.Services.QuestionGroupService">
            <summary>
            An component type implementation of the 'QuestionGroup' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:NDMSInvestigation.Services.QuestionGroupServiceBase">
            <summary>
             An object representation of the 'QuestionGroup' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the QuestionGroup.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.CreateQuestionGroup(System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> instance.
            </summary>
            <param name="_groupName"></param>
            <param name="_groupDescription"></param>
            <param name="_orderNumber"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Get(NDMSInvestigation.Entities.QuestionGroupKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.GetByOrderNumber(System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key IX_QuestionGroup index.
            </summary>
            <param name="_orderNumber"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.GetByOrderNumber(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key IX_QuestionGroup index.
            </summary>
            <param name="_orderNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.GetByGroupId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK_QuestionGroup index.
            </summary>
            <param name="_groupId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.GetByGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK_QuestionGroup index.
            </summary>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionGroup</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionGroup</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionGroup</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{QuestionGroup} of <c>QuestionGroup</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionGroup</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionGroup</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>QuestionGroup</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionGroup</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionGroup</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Insert(NDMSInvestigation.Entities.QuestionGroup)">
            <summary>
            public virtual method that Inserts a QuestionGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionGroup object to Insert.</param>
            <remarks>After Inserting into the datasource, the QuestionGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            QuestionGroup entity = new QuestionGroup();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	QuestionGroupService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionGroup})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionGroup</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>QuestionGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of QuestionGroup.
             <code><![CDATA[
             TList<QuestionGroup> list = new TList<QuestionGroup>();
             QuestionGroup entity = new QuestionGroup();
             entity.StringProperty = "foo";
             QuestionGroup entity2 = new QuestionGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionGroupService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Update(NDMSInvestigation.Entities.QuestionGroup)">
            <summary>
            public virtual method that Updates a QuestionGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionGroup object to Update.</param>
            <remarks>After Updateing into the datasource, the QuestionGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            QuestionGroup entity = QuestionGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	QuestionGroupService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionGroup})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionGroup</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>QuestionGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of QuestionGroup.
             <code><![CDATA[
             TList<QuestionGroup> list = new TList<QuestionGroup>();
             QuestionGroup entity = new QuestionGroup();
             entity.StringProperty = "foo";
             QuestionGroup entity2 = new QuestionGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionGroupService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Save(NDMSInvestigation.Entities.QuestionGroup)">
            <summary>
            public virtual method that Saves a QuestionGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionGroup object to Save.</param>
            <remarks>After Saveing into the datasource, the QuestionGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            QuestionGroup entity = QuestionGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	QuestionGroupService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionGroup})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionGroup</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>QuestionGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of QuestionGroup.
             <code><![CDATA[
             TList<QuestionGroup> list = new TList<QuestionGroup>();
             QuestionGroup entity = new QuestionGroup();
             entity.StringProperty = "foo";
             QuestionGroup entity2 = new QuestionGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionGroupService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Delete(NDMSInvestigation.Entities.QuestionGroup)">
            <summary>
            public virtual method that Deletes a QuestionGroup object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionGroup object to Delete.</param>
            <remarks>After Deleteing into the datasource, the QuestionGroup object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            QuestionGroup entity = QuestionGroupService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	QuestionGroupService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionGroup})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionGroup</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>QuestionGroup</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of QuestionGroup.
             <code><![CDATA[
             TList<QuestionGroup> list = new TList<QuestionGroup>();
             QuestionGroup entity = new QuestionGroup();
             entity.StringProperty = "foo";
             QuestionGroup entity2 = new QuestionGroup();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionGroupService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Delete(NDMSInvestigation.Entities.QuestionGroupKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _groupId
            </summary>
            <param name="_groupId">QuestionGroup pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.GetByUserIdFromResult(System.Guid)">
            <summary>
            	Gets QuestionGroup objects from the datasource by UserId in the
            	Result table. Table QuestionGroup is related to table aspnet_Users
            	through the (M:N) relationship defined in the Result table.
            </summary>
            <param name="_userId"></param>
            <returns>Returns a typed collection of QuestionGroup objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.GetByUserIdFromResult(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets QuestionGroup objects from the datasource by UserId in the
            	Result table. Table QuestionGroup is related to table aspnet_Users
            	through the (M:N) relationship defined in the Result table.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of QuestionGroup objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepLoadByOrderNumber(System.Nullable{System.Int32},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_orderNumber"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionGroup Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepLoadByGroupId(System.Int32,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_groupId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionGroup Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionGroup)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">QuestionGroup Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionGroup,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">QuestionGroup Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionGroup,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionGroup Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionGroup})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionGroup},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionGroup)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionGroup},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepSave(NDMSInvestigation.Entities.QuestionGroup)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.QuestionGroup"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">QuestionGroup Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepSave(NDMSInvestigation.Entities.QuestionGroup,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the QuestionGroup object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">QuestionGroup Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>QuestionGroup</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionGroup})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{QuestionGroup} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionGroup},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QuestionGroup Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.QuestionGroupServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionGroupService.#ctor">
            <summary>
            Initializes a new instance of the QuestionGroupService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase">
            <summary>
             An object representation of the 'aspnet_SchemaVersions' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AspnetSchemaVersions.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.CreateAspnetSchemaVersions(System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> instance.
            </summary>
            <param name="_feature"></param>
            <param name="_compatibleSchemaVersion"></param>
            <param name="_isCurrentVersion"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Get(NDMSInvestigation.Entities.AspnetSchemaVersionsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.GetByFeatureCompatibleSchemaVersion(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_SchemaVer__08EA5793 index.
            </summary>
            <param name="_feature"></param>
            <param name="_compatibleSchemaVersion"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.GetByFeatureCompatibleSchemaVersion(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_SchemaVer__08EA5793 index.
            </summary>
            <param name="_feature"></param>
            <param name="_compatibleSchemaVersion"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetSchemaVersions</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetSchemaVersions</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetSchemaVersions</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AspnetSchemaVersions} of <c>AspnetSchemaVersions</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetSchemaVersions</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetSchemaVersions</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AspnetSchemaVersions</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetSchemaVersions</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetSchemaVersions</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Insert(NDMSInvestigation.Entities.AspnetSchemaVersions)">
            <summary>
            public virtual method that Inserts a AspnetSchemaVersions object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetSchemaVersions object to Insert.</param>
            <remarks>After Inserting into the datasource, the AspnetSchemaVersions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AspnetSchemaVersions entity = new AspnetSchemaVersions();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AspnetSchemaVersionsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetSchemaVersions})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetSchemaVersions</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AspnetSchemaVersions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AspnetSchemaVersions.
             <code><![CDATA[
             TList<AspnetSchemaVersions> list = new TList<AspnetSchemaVersions>();
             AspnetSchemaVersions entity = new AspnetSchemaVersions();
             entity.StringProperty = "foo";
             AspnetSchemaVersions entity2 = new AspnetSchemaVersions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetSchemaVersionsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Update(NDMSInvestigation.Entities.AspnetSchemaVersions)">
            <summary>
            public virtual method that Updates a AspnetSchemaVersions object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetSchemaVersions object to Update.</param>
            <remarks>After Updateing into the datasource, the AspnetSchemaVersions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AspnetSchemaVersions entity = AspnetSchemaVersionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AspnetSchemaVersionsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetSchemaVersions})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetSchemaVersions</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AspnetSchemaVersions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AspnetSchemaVersions.
             <code><![CDATA[
             TList<AspnetSchemaVersions> list = new TList<AspnetSchemaVersions>();
             AspnetSchemaVersions entity = new AspnetSchemaVersions();
             entity.StringProperty = "foo";
             AspnetSchemaVersions entity2 = new AspnetSchemaVersions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetSchemaVersionsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Save(NDMSInvestigation.Entities.AspnetSchemaVersions)">
            <summary>
            public virtual method that Saves a AspnetSchemaVersions object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetSchemaVersions object to Save.</param>
            <remarks>After Saveing into the datasource, the AspnetSchemaVersions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AspnetSchemaVersions entity = AspnetSchemaVersionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AspnetSchemaVersionsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetSchemaVersions})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetSchemaVersions</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AspnetSchemaVersions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AspnetSchemaVersions.
             <code><![CDATA[
             TList<AspnetSchemaVersions> list = new TList<AspnetSchemaVersions>();
             AspnetSchemaVersions entity = new AspnetSchemaVersions();
             entity.StringProperty = "foo";
             AspnetSchemaVersions entity2 = new AspnetSchemaVersions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetSchemaVersionsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Delete(NDMSInvestigation.Entities.AspnetSchemaVersions)">
            <summary>
            public virtual method that Deletes a AspnetSchemaVersions object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetSchemaVersions object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AspnetSchemaVersions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AspnetSchemaVersions entity = AspnetSchemaVersionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AspnetSchemaVersionsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetSchemaVersions})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetSchemaVersions</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AspnetSchemaVersions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AspnetSchemaVersions.
             <code><![CDATA[
             TList<AspnetSchemaVersions> list = new TList<AspnetSchemaVersions>();
             AspnetSchemaVersions entity = new AspnetSchemaVersions();
             entity.StringProperty = "foo";
             AspnetSchemaVersions entity2 = new AspnetSchemaVersions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetSchemaVersionsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Delete(NDMSInvestigation.Entities.AspnetSchemaVersionsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _feature, System.String _compatibleSchemaVersion
            </summary>
            <param name="_feature">AspnetSchemaVersions pk id.</param>
            <param name="_compatibleSchemaVersion">AspnetSchemaVersions pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepLoadByFeatureCompatibleSchemaVersion(System.String,System.String,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_feature"></param>
            <param name="_compatibleSchemaVersion"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetSchemaVersions Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetSchemaVersions)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AspnetSchemaVersions Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetSchemaVersions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetSchemaVersions,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetSchemaVersions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AspnetSchemaVersions Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetSchemaVersions,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetSchemaVersions Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetSchemaVersions})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetSchemaVersions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetSchemaVersions},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetSchemaVersions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetSchemaVersions},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetSchemaVersions)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.AspnetSchemaVersions"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AspnetSchemaVersions Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetSchemaVersions,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AspnetSchemaVersions object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AspnetSchemaVersions Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AspnetSchemaVersions</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetSchemaVersions})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AspnetSchemaVersions} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetSchemaVersions},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AspnetSchemaVersions Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.AspnetSchemaVersionsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetUsersServiceBase">
            <summary>
             An object representation of the 'aspnet_Users' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AspnetUsers.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.CreateAspnetUsers(System.Guid,System.String,System.String,System.String,System.Boolean,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> instance.
            </summary>
            <param name="_applicationId"></param>
            <param name="_userName"></param>
            <param name="_loweredUserName"></param>
            <param name="_mobileAlias"></param>
            <param name="_isAnonymous"></param>
            <param name="_lastActivityDate"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetByApplicationId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Us__Appli__0425A276 key.
            	FK__aspnet_Us__Appli__0425A276 Description: 
            </summary>
            <param name="_applicationId"></param>
            <returns>Returns a generic collection of AspnetUsers objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetByApplicationId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Us__Appli__0425A276 key.
            	FK__aspnet_Us__Appli__0425A276 Description: 
            </summary>
            <param name="_applicationId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:NDMSInvestigation.Entities.TList`1"/> of <c>AspnetUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Get(NDMSInvestigation.Entities.AspnetUsersKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetByApplicationIdLoweredUserName(System.Guid,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_Users_Index index.
            </summary>
            <param name="_applicationId"></param>
            <param name="_loweredUserName"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetByApplicationIdLoweredUserName(System.Guid,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_Users_Index index.
            </summary>
            <param name="_applicationId"></param>
            <param name="_loweredUserName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetByApplicationIdLastActivityDate(System.Guid,System.DateTime)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_Users_Index2 index.
            </summary>
            <param name="_applicationId"></param>
            <param name="_lastActivityDate"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetByApplicationIdLastActivityDate(System.Guid,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_Users_Index2 index.
            </summary>
            <param name="_applicationId"></param>
            <param name="_lastActivityDate"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetByUserId(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Users__03317E3D index.
            </summary>
            <param name="_userId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetByUserId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Users__03317E3D index.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AspnetUsers} of <c>AspnetUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AspnetUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Insert(NDMSInvestigation.Entities.AspnetUsers)">
            <summary>
            public virtual method that Inserts a AspnetUsers object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetUsers object to Insert.</param>
            <remarks>After Inserting into the datasource, the AspnetUsers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AspnetUsers entity = new AspnetUsers();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AspnetUsersService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsers})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetUsers</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AspnetUsers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AspnetUsers.
             <code><![CDATA[
             TList<AspnetUsers> list = new TList<AspnetUsers>();
             AspnetUsers entity = new AspnetUsers();
             entity.StringProperty = "foo";
             AspnetUsers entity2 = new AspnetUsers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetUsersService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Update(NDMSInvestigation.Entities.AspnetUsers)">
            <summary>
            public virtual method that Updates a AspnetUsers object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetUsers object to Update.</param>
            <remarks>After Updateing into the datasource, the AspnetUsers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AspnetUsers entity = AspnetUsersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AspnetUsersService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsers})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetUsers</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AspnetUsers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AspnetUsers.
             <code><![CDATA[
             TList<AspnetUsers> list = new TList<AspnetUsers>();
             AspnetUsers entity = new AspnetUsers();
             entity.StringProperty = "foo";
             AspnetUsers entity2 = new AspnetUsers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetUsersService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Save(NDMSInvestigation.Entities.AspnetUsers)">
            <summary>
            public virtual method that Saves a AspnetUsers object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetUsers object to Save.</param>
            <remarks>After Saveing into the datasource, the AspnetUsers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AspnetUsers entity = AspnetUsersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AspnetUsersService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsers})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetUsers</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AspnetUsers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AspnetUsers.
             <code><![CDATA[
             TList<AspnetUsers> list = new TList<AspnetUsers>();
             AspnetUsers entity = new AspnetUsers();
             entity.StringProperty = "foo";
             AspnetUsers entity2 = new AspnetUsers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetUsersService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Delete(NDMSInvestigation.Entities.AspnetUsers)">
            <summary>
            public virtual method that Deletes a AspnetUsers object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetUsers object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AspnetUsers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AspnetUsers entity = AspnetUsersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AspnetUsersService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsers})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetUsers</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AspnetUsers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AspnetUsers.
             <code><![CDATA[
             TList<AspnetUsers> list = new TList<AspnetUsers>();
             AspnetUsers entity = new AspnetUsers();
             entity.StringProperty = "foo";
             AspnetUsers entity2 = new AspnetUsers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetUsersService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Delete(NDMSInvestigation.Entities.AspnetUsersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.Delete(System.Guid)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid _userId
            </summary>
            <param name="_userId">AspnetUsers pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetByRoleIdFromAspnetUsersInRoles(System.Guid)">
            <summary>
            	Gets aspnet_Users objects from the datasource by RoleId in the
            	aspnet_UsersInRoles table. Table aspnet_Users is related to table aspnet_Roles
            	through the (M:N) relationship defined in the aspnet_UsersInRoles table.
            </summary>
            <param name="_roleId"></param>
            <returns>Returns a typed collection of AspnetUsers objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetByRoleIdFromAspnetUsersInRoles(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets aspnet_Users objects from the datasource by RoleId in the
            	aspnet_UsersInRoles table. Table aspnet_Users is related to table aspnet_Roles
            	through the (M:N) relationship defined in the aspnet_UsersInRoles table.
            </summary>
            <param name="_roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AspnetUsers objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetByGroupIdFromResult(System.Int32)">
            <summary>
            	Gets aspnet_Users objects from the datasource by GroupId in the
            	Result table. Table aspnet_Users is related to table QuestionGroup
            	through the (M:N) relationship defined in the Result table.
            </summary>
            <param name="_groupId"></param>
            <returns>Returns a typed collection of AspnetUsers objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.GetByGroupIdFromResult(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets aspnet_Users objects from the datasource by GroupId in the
            	Result table. Table aspnet_Users is related to table QuestionGroup
            	through the (M:N) relationship defined in the Result table.
            </summary>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AspnetUsers objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepLoadByApplicationIdLoweredUserName(System.Guid,System.String,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_applicationId"></param>
            <param name="_loweredUserName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetUsers Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepLoadByApplicationIdLastActivityDate(System.Guid,System.DateTime,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_applicationId"></param>
            <param name="_lastActivityDate"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetUsers Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepLoadByUserId(System.Guid,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_userId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetUsers Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsers)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AspnetUsers Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsers)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsers,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsers)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AspnetUsers Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsers,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetUsers Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsers})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsers)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsers},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsers)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsers},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetUsers)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.AspnetUsers"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AspnetUsers Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetUsers,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AspnetUsers object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AspnetUsers Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AspnetUsers</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsers})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AspnetUsers} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsers},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AspnetUsers Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.AspnetUsersServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetMembershipService">
            <summary>
            An component type implementation of the 'aspnet_Membership' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetMembershipServiceBase">
            <summary>
             An object representation of the 'aspnet_Membership' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AspnetMembership.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.CreateAspnetMembership(System.Guid,System.Guid,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.Int32,System.DateTime,System.Int32,System.DateTime,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> instance.
            </summary>
            <param name="_applicationId"></param>
            <param name="_userId"></param>
            <param name="_password"></param>
            <param name="_passwordFormat"></param>
            <param name="_passwordSalt"></param>
            <param name="_mobilePin"></param>
            <param name="_email"></param>
            <param name="_loweredEmail"></param>
            <param name="_passwordQuestion"></param>
            <param name="_passwordAnswer"></param>
            <param name="_isApproved"></param>
            <param name="_isLockedOut"></param>
            <param name="_createDate"></param>
            <param name="_lastLoginDate"></param>
            <param name="_lastPasswordChangedDate"></param>
            <param name="_lastLockoutDate"></param>
            <param name="_failedPasswordAttemptCount"></param>
            <param name="_failedPasswordAttemptWindowStart"></param>
            <param name="_failedPasswordAnswerAttemptCount"></param>
            <param name="_failedPasswordAnswerAttemptWindowStart"></param>
            <param name="_comment"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.GetByApplicationId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Me__Appli__145C0A3F key.
            	FK__aspnet_Me__Appli__145C0A3F Description: 
            </summary>
            <param name="_applicationId"></param>
            <returns>Returns a generic collection of AspnetMembership objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.GetByApplicationId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Me__Appli__145C0A3F key.
            	FK__aspnet_Me__Appli__145C0A3F Description: 
            </summary>
            <param name="_applicationId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:NDMSInvestigation.Entities.TList`1"/> of <c>AspnetMembership</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Get(NDMSInvestigation.Entities.AspnetMembershipKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.GetByApplicationIdLoweredEmail(System.Guid,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_Membership_index index.
            </summary>
            <param name="_applicationId"></param>
            <param name="_loweredEmail"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.GetByApplicationIdLoweredEmail(System.Guid,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_Membership_index index.
            </summary>
            <param name="_applicationId"></param>
            <param name="_loweredEmail"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.GetByUserId(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Membershi__1367E606 index.
            </summary>
            <param name="_userId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.GetByUserId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Membershi__1367E606 index.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetMembership</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetMembership</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetMembership</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AspnetMembership} of <c>AspnetMembership</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetMembership</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetMembership</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AspnetMembership</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetMembership</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetMembership</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Insert(NDMSInvestigation.Entities.AspnetMembership)">
            <summary>
            public virtual method that Inserts a AspnetMembership object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetMembership object to Insert.</param>
            <remarks>After Inserting into the datasource, the AspnetMembership object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AspnetMembership entity = new AspnetMembership();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AspnetMembershipService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetMembership})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetMembership</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AspnetMembership</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AspnetMembership.
             <code><![CDATA[
             TList<AspnetMembership> list = new TList<AspnetMembership>();
             AspnetMembership entity = new AspnetMembership();
             entity.StringProperty = "foo";
             AspnetMembership entity2 = new AspnetMembership();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetMembershipService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Update(NDMSInvestigation.Entities.AspnetMembership)">
            <summary>
            public virtual method that Updates a AspnetMembership object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetMembership object to Update.</param>
            <remarks>After Updateing into the datasource, the AspnetMembership object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AspnetMembership entity = AspnetMembershipService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AspnetMembershipService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetMembership})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetMembership</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AspnetMembership</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AspnetMembership.
             <code><![CDATA[
             TList<AspnetMembership> list = new TList<AspnetMembership>();
             AspnetMembership entity = new AspnetMembership();
             entity.StringProperty = "foo";
             AspnetMembership entity2 = new AspnetMembership();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetMembershipService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Save(NDMSInvestigation.Entities.AspnetMembership)">
            <summary>
            public virtual method that Saves a AspnetMembership object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetMembership object to Save.</param>
            <remarks>After Saveing into the datasource, the AspnetMembership object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AspnetMembership entity = AspnetMembershipService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AspnetMembershipService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetMembership})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetMembership</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AspnetMembership</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AspnetMembership.
             <code><![CDATA[
             TList<AspnetMembership> list = new TList<AspnetMembership>();
             AspnetMembership entity = new AspnetMembership();
             entity.StringProperty = "foo";
             AspnetMembership entity2 = new AspnetMembership();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetMembershipService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Delete(NDMSInvestigation.Entities.AspnetMembership)">
            <summary>
            public virtual method that Deletes a AspnetMembership object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetMembership object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AspnetMembership object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AspnetMembership entity = AspnetMembershipService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AspnetMembershipService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetMembership})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetMembership</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AspnetMembership</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AspnetMembership.
             <code><![CDATA[
             TList<AspnetMembership> list = new TList<AspnetMembership>();
             AspnetMembership entity = new AspnetMembership();
             entity.StringProperty = "foo";
             AspnetMembership entity2 = new AspnetMembership();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetMembershipService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Delete(NDMSInvestigation.Entities.AspnetMembershipKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.Delete(System.Guid)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid _userId
            </summary>
            <param name="_userId">AspnetMembership pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepLoadByApplicationIdLoweredEmail(System.Guid,System.String,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_applicationId"></param>
            <param name="_loweredEmail"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetMembership Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepLoadByUserId(System.Guid,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_userId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetMembership Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetMembership)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AspnetMembership Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetMembership)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetMembership,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetMembership)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AspnetMembership Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetMembership,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetMembership Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetMembership})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetMembership)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetMembership},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetMembership)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetMembership},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetMembership)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.AspnetMembership"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AspnetMembership Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetMembership,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AspnetMembership object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AspnetMembership Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AspnetMembership</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetMembership})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AspnetMembership} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetMembership},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AspnetMembership Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.AspnetMembershipServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetMembershipService.#ctor">
            <summary>
            Initializes a new instance of the AspnetMembershipService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetApplicationsService">
            <summary>
            An component type implementation of the 'aspnet_Applications' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetApplicationsService.#ctor">
            <summary>
            Initializes a new instance of the AspnetApplicationsService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceViewBaseCore`1.OnProcessStarting(NDMSInvestigation.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceViewBaseCore`1.OnProcessEnded(NDMSInvestigation.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ServiceViewBaseCore`1.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:NDMSInvestigation.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:NDMSInvestigation.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetSchemaVersionsService">
            <summary>
            An component type implementation of the 'aspnet_SchemaVersions' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetSchemaVersionsService.#ctor">
            <summary>
            Initializes a new instance of the AspnetSchemaVersionsService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.ConnectionScopeBase">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.IConnectionScope">
            <summary>
            Connection Scope Interface
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.IConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>The connection string key.</value>
        </member>
        <member name="P:NDMSInvestigation.Services.IConnectionScope.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:NDMSInvestigation.Services.IConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the dynamic connection string.
            </summary>
            <value>The dynamic connection string.</value>
        </member>
        <member name="P:NDMSInvestigation.Services.IConnectionScope.HasTransaction">
            <summary>
            Gets a value indicating whether this instance has transaction.
            </summary>
            <value>
            	<c>true</c> if this instance has transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NDMSInvestigation.Services.IConnectionScope.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="M:NDMSInvestigation.Services.ConnectionScopeBase.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="F:NDMSInvestigation.Services.ConnectionScopeBase.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:NDMSInvestigation.Services.ConnectionScopeBase.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:NDMSInvestigation.Services.ConnectionScopeBase.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:NDMSInvestigation.Services.ConnectionScopeBase.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ConnectionScopeBase.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ConnectionScopeBase.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ConnectionScopeBase.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ConnectionScopeBase.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:NDMSInvestigation.Services.ConnectionScopeBase.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.SecurityContextBase`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.SecurityContextBase`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.SecurityContextBase`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.SecurityContextBase`1.Identity">
            <summary>
            The Current IIdentity.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.SecurityContextBase`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.SecurityContextBase`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.SecurityContextBase`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.SecurityContext`1.#ctor">
            <summary>
             Creates a new <see cref="T:System.Security.SecurityContext"/> instance.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.IProcessorResult.AddBrokenRulesList(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:NDMSInvestigation.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:NDMSInvestigation.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.QuestionDetailsServiceBase">
            <summary>
             An object representation of the 'QuestionDetails' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the QuestionDetails.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.CreateQuestionDetails(System.String,System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> instance.
            </summary>
            <param name="_questionContent"></param>
            <param name="_questionSuggest"></param>
            <param name="_questionDescription"></param>
            <param name="_groupId"></param>
            <param name="_orderNumber"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.GetByGroupId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK_QuestionDetails_QuestionGroup key.
            	FK_QuestionDetails_QuestionGroup Description: 
            </summary>
            <param name="_groupId"></param>
            <returns>Returns a generic collection of QuestionDetails objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.GetByGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK_QuestionDetails_QuestionGroup key.
            	FK_QuestionDetails_QuestionGroup Description: 
            </summary>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:NDMSInvestigation.Entities.TList`1"/> of <c>QuestionDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Get(NDMSInvestigation.Entities.QuestionDetailsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.GetByGroupIdOrderNumber(System.Int32,System.Nullable{System.Int32})">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key IX_QuestionDetails index.
            </summary>
            <param name="_groupId"></param>
            <param name="_orderNumber"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.GetByGroupIdOrderNumber(System.Int32,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key IX_QuestionDetails index.
            </summary>
            <param name="_groupId"></param>
            <param name="_orderNumber"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.GetByQuestionId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK_QuestionDetails_1 index.
            </summary>
            <param name="_questionId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.GetByQuestionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK_QuestionDetails_1 index.
            </summary>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{QuestionDetails} of <c>QuestionDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>QuestionDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionDetails</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Insert(NDMSInvestigation.Entities.QuestionDetails)">
            <summary>
            public virtual method that Inserts a QuestionDetails object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionDetails object to Insert.</param>
            <remarks>After Inserting into the datasource, the QuestionDetails object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            QuestionDetails entity = new QuestionDetails();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	QuestionDetailsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionDetails})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionDetails</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>QuestionDetails</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of QuestionDetails.
             <code><![CDATA[
             TList<QuestionDetails> list = new TList<QuestionDetails>();
             QuestionDetails entity = new QuestionDetails();
             entity.StringProperty = "foo";
             QuestionDetails entity2 = new QuestionDetails();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionDetailsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Update(NDMSInvestigation.Entities.QuestionDetails)">
            <summary>
            public virtual method that Updates a QuestionDetails object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionDetails object to Update.</param>
            <remarks>After Updateing into the datasource, the QuestionDetails object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            QuestionDetails entity = QuestionDetailsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	QuestionDetailsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionDetails})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionDetails</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>QuestionDetails</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of QuestionDetails.
             <code><![CDATA[
             TList<QuestionDetails> list = new TList<QuestionDetails>();
             QuestionDetails entity = new QuestionDetails();
             entity.StringProperty = "foo";
             QuestionDetails entity2 = new QuestionDetails();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionDetailsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Save(NDMSInvestigation.Entities.QuestionDetails)">
            <summary>
            public virtual method that Saves a QuestionDetails object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionDetails object to Save.</param>
            <remarks>After Saveing into the datasource, the QuestionDetails object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            QuestionDetails entity = QuestionDetailsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	QuestionDetailsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionDetails})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionDetails</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>QuestionDetails</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of QuestionDetails.
             <code><![CDATA[
             TList<QuestionDetails> list = new TList<QuestionDetails>();
             QuestionDetails entity = new QuestionDetails();
             entity.StringProperty = "foo";
             QuestionDetails entity2 = new QuestionDetails();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionDetailsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Delete(NDMSInvestigation.Entities.QuestionDetails)">
            <summary>
            public virtual method that Deletes a QuestionDetails object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionDetails object to Delete.</param>
            <remarks>After Deleteing into the datasource, the QuestionDetails object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            QuestionDetails entity = QuestionDetailsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	QuestionDetailsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionDetails})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionDetails</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>QuestionDetails</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of QuestionDetails.
             <code><![CDATA[
             TList<QuestionDetails> list = new TList<QuestionDetails>();
             QuestionDetails entity = new QuestionDetails();
             entity.StringProperty = "foo";
             QuestionDetails entity2 = new QuestionDetails();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionDetailsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Delete(NDMSInvestigation.Entities.QuestionDetailsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _questionId
            </summary>
            <param name="_questionId">QuestionDetails pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepLoadByGroupIdOrderNumber(System.Int32,System.Nullable{System.Int32},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_groupId"></param>
            <param name="_orderNumber"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionDetails Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepLoadByQuestionId(System.Int32,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_questionId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionDetails Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionDetails)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">QuestionDetails Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionDetails)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionDetails,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionDetails)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">QuestionDetails Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionDetails,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionDetails Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionDetails})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionDetails)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionDetails},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionDetails)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionDetails},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepSave(NDMSInvestigation.Entities.QuestionDetails)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.QuestionDetails"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">QuestionDetails Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepSave(NDMSInvestigation.Entities.QuestionDetails,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the QuestionDetails object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">QuestionDetails Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>QuestionDetails</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionDetails})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{QuestionDetails} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionDetails},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QuestionDetails Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.QuestionDetailsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetWebEventEventsService">
            <summary>
            An component type implementation of the 'aspnet_WebEvent_Events' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetWebEventEventsService.#ctor">
            <summary>
            Initializes a new instance of the AspnetWebEventEventsService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:NDMSInvestigation.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NDMSInvestigation.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ContextView`2.#ctor(`0,NDMSInvestigation.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NDMSInvestigation.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ContextView`2.#ctor(`0,NDMSInvestigation.Services.SecurityContext{`0},NDMSInvestigation.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:NDMSInvestigation.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:NDMSInvestigation.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:NDMSInvestigation.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:NDMSInvestigation.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase">
            <summary>
             An object representation of the 'aspnet_UsersInRoles' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AspnetUsersInRoles.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.CreateAspnetUsersInRoles(System.Guid,System.Guid)">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> instance.
            </summary>
            <param name="_userId"></param>
            <param name="_roleId"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.GetByUserId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Us__UserI__36B12243 key.
            	FK__aspnet_Us__UserI__36B12243 Description: 
            </summary>
            <param name="_userId"></param>
            <returns>Returns a generic collection of AspnetUsersInRoles objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.GetByUserId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Us__UserI__36B12243 key.
            	FK__aspnet_Us__UserI__36B12243 Description: 
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:NDMSInvestigation.Entities.TList`1"/> of <c>AspnetUsersInRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Get(NDMSInvestigation.Entities.AspnetUsersInRolesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.GetByRoleId(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_UsersInRoles_index index.
            </summary>
            <param name="_roleId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.GetByRoleId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_UsersInRoles_index index.
            </summary>
            <param name="_roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.GetByUserIdRoleId(System.Guid,System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_UsersInRo__35BCFE0A index.
            </summary>
            <param name="_userId"></param>
            <param name="_roleId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.GetByUserIdRoleId(System.Guid,System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_UsersInRo__35BCFE0A index.
            </summary>
            <param name="_userId"></param>
            <param name="_roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetUsersInRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetUsersInRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetUsersInRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AspnetUsersInRoles} of <c>AspnetUsersInRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetUsersInRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetUsersInRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AspnetUsersInRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetUsersInRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetUsersInRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Insert(NDMSInvestigation.Entities.AspnetUsersInRoles)">
            <summary>
            public virtual method that Inserts a AspnetUsersInRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetUsersInRoles object to Insert.</param>
            <remarks>After Inserting into the datasource, the AspnetUsersInRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AspnetUsersInRoles entity = new AspnetUsersInRoles();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AspnetUsersInRolesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsersInRoles})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetUsersInRoles</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AspnetUsersInRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AspnetUsersInRoles.
             <code><![CDATA[
             TList<AspnetUsersInRoles> list = new TList<AspnetUsersInRoles>();
             AspnetUsersInRoles entity = new AspnetUsersInRoles();
             entity.StringProperty = "foo";
             AspnetUsersInRoles entity2 = new AspnetUsersInRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetUsersInRolesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Update(NDMSInvestigation.Entities.AspnetUsersInRoles)">
            <summary>
            public virtual method that Updates a AspnetUsersInRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetUsersInRoles object to Update.</param>
            <remarks>After Updateing into the datasource, the AspnetUsersInRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AspnetUsersInRoles entity = AspnetUsersInRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AspnetUsersInRolesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsersInRoles})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetUsersInRoles</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AspnetUsersInRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AspnetUsersInRoles.
             <code><![CDATA[
             TList<AspnetUsersInRoles> list = new TList<AspnetUsersInRoles>();
             AspnetUsersInRoles entity = new AspnetUsersInRoles();
             entity.StringProperty = "foo";
             AspnetUsersInRoles entity2 = new AspnetUsersInRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetUsersInRolesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Save(NDMSInvestigation.Entities.AspnetUsersInRoles)">
            <summary>
            public virtual method that Saves a AspnetUsersInRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetUsersInRoles object to Save.</param>
            <remarks>After Saveing into the datasource, the AspnetUsersInRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AspnetUsersInRoles entity = AspnetUsersInRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AspnetUsersInRolesService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsersInRoles})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetUsersInRoles</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AspnetUsersInRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AspnetUsersInRoles.
             <code><![CDATA[
             TList<AspnetUsersInRoles> list = new TList<AspnetUsersInRoles>();
             AspnetUsersInRoles entity = new AspnetUsersInRoles();
             entity.StringProperty = "foo";
             AspnetUsersInRoles entity2 = new AspnetUsersInRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetUsersInRolesService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Delete(NDMSInvestigation.Entities.AspnetUsersInRoles)">
            <summary>
            public virtual method that Deletes a AspnetUsersInRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetUsersInRoles object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AspnetUsersInRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AspnetUsersInRoles entity = AspnetUsersInRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AspnetUsersInRolesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsersInRoles})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetUsersInRoles</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AspnetUsersInRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AspnetUsersInRoles.
             <code><![CDATA[
             TList<AspnetUsersInRoles> list = new TList<AspnetUsersInRoles>();
             AspnetUsersInRoles entity = new AspnetUsersInRoles();
             entity.StringProperty = "foo";
             AspnetUsersInRoles entity2 = new AspnetUsersInRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetUsersInRolesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Delete(NDMSInvestigation.Entities.AspnetUsersInRolesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.Delete(System.Guid,System.Guid)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid _userId, System.Guid _roleId
            </summary>
            <param name="_userId">AspnetUsersInRoles pk id.</param>
            <param name="_roleId">AspnetUsersInRoles pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepLoadByRoleId(System.Guid,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_roleId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetUsersInRoles Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepLoadByUserIdRoleId(System.Guid,System.Guid,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_userId"></param>
            <param name="_roleId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetUsersInRoles Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsersInRoles)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AspnetUsersInRoles Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsersInRoles)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsersInRoles,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsersInRoles)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AspnetUsersInRoles Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsersInRoles,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetUsersInRoles Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsersInRoles})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsersInRoles)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsersInRoles},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetUsersInRoles)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsersInRoles},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetUsersInRoles)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.AspnetUsersInRoles"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AspnetUsersInRoles Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetUsersInRoles,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AspnetUsersInRoles object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AspnetUsersInRoles Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AspnetUsersInRoles</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsersInRoles})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AspnetUsersInRoles} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetUsersInRoles},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AspnetUsersInRoles Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.AspnetUsersInRolesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetPathsServiceBase">
            <summary>
             An object representation of the 'aspnet_Paths' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AspnetPaths.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.CreateAspnetPaths(System.Guid,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> instance.
            </summary>
            <param name="_applicationId"></param>
            <param name="_path"></param>
            <param name="_loweredPath"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.GetByApplicationId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Pa__Appli__45F365D3 key.
            	FK__aspnet_Pa__Appli__45F365D3 Description: 
            </summary>
            <param name="_applicationId"></param>
            <returns>Returns a generic collection of AspnetPaths objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.GetByApplicationId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Pa__Appli__45F365D3 key.
            	FK__aspnet_Pa__Appli__45F365D3 Description: 
            </summary>
            <param name="_applicationId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:NDMSInvestigation.Entities.TList`1"/> of <c>AspnetPaths</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Get(NDMSInvestigation.Entities.AspnetPathsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.GetByApplicationIdLoweredPath(System.Guid,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_Paths_index index.
            </summary>
            <param name="_applicationId"></param>
            <param name="_loweredPath"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.GetByApplicationIdLoweredPath(System.Guid,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_Paths_index index.
            </summary>
            <param name="_applicationId"></param>
            <param name="_loweredPath"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.GetByPathId(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Paths__44FF419A index.
            </summary>
            <param name="_pathId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.GetByPathId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Paths__44FF419A index.
            </summary>
            <param name="_pathId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetPaths</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetPaths</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetPaths</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AspnetPaths} of <c>AspnetPaths</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetPaths</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetPaths</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AspnetPaths</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetPaths</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetPaths</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Insert(NDMSInvestigation.Entities.AspnetPaths)">
            <summary>
            public virtual method that Inserts a AspnetPaths object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetPaths object to Insert.</param>
            <remarks>After Inserting into the datasource, the AspnetPaths object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AspnetPaths entity = new AspnetPaths();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AspnetPathsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPaths})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetPaths</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AspnetPaths</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AspnetPaths.
             <code><![CDATA[
             TList<AspnetPaths> list = new TList<AspnetPaths>();
             AspnetPaths entity = new AspnetPaths();
             entity.StringProperty = "foo";
             AspnetPaths entity2 = new AspnetPaths();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetPathsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Update(NDMSInvestigation.Entities.AspnetPaths)">
            <summary>
            public virtual method that Updates a AspnetPaths object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetPaths object to Update.</param>
            <remarks>After Updateing into the datasource, the AspnetPaths object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AspnetPaths entity = AspnetPathsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AspnetPathsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPaths})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetPaths</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AspnetPaths</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AspnetPaths.
             <code><![CDATA[
             TList<AspnetPaths> list = new TList<AspnetPaths>();
             AspnetPaths entity = new AspnetPaths();
             entity.StringProperty = "foo";
             AspnetPaths entity2 = new AspnetPaths();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetPathsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Save(NDMSInvestigation.Entities.AspnetPaths)">
            <summary>
            public virtual method that Saves a AspnetPaths object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetPaths object to Save.</param>
            <remarks>After Saveing into the datasource, the AspnetPaths object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AspnetPaths entity = AspnetPathsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AspnetPathsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPaths})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetPaths</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AspnetPaths</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AspnetPaths.
             <code><![CDATA[
             TList<AspnetPaths> list = new TList<AspnetPaths>();
             AspnetPaths entity = new AspnetPaths();
             entity.StringProperty = "foo";
             AspnetPaths entity2 = new AspnetPaths();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetPathsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Delete(NDMSInvestigation.Entities.AspnetPaths)">
            <summary>
            public virtual method that Deletes a AspnetPaths object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetPaths object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AspnetPaths object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AspnetPaths entity = AspnetPathsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AspnetPathsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPaths})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetPaths</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AspnetPaths</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AspnetPaths.
             <code><![CDATA[
             TList<AspnetPaths> list = new TList<AspnetPaths>();
             AspnetPaths entity = new AspnetPaths();
             entity.StringProperty = "foo";
             AspnetPaths entity2 = new AspnetPaths();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetPathsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Delete(NDMSInvestigation.Entities.AspnetPathsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.Delete(System.Guid)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid _pathId
            </summary>
            <param name="_pathId">AspnetPaths pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepLoadByApplicationIdLoweredPath(System.Guid,System.String,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_applicationId"></param>
            <param name="_loweredPath"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetPaths Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepLoadByPathId(System.Guid,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_pathId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetPaths Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPaths)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AspnetPaths Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPaths)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPaths,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPaths)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AspnetPaths Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPaths,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetPaths Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPaths})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPaths)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPaths},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPaths)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPaths},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetPaths)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.AspnetPaths"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AspnetPaths Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetPaths,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AspnetPaths object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AspnetPaths Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AspnetPaths</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPaths})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AspnetPaths} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPaths},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AspnetPaths Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.AspnetPathsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:NDMSInvestigation.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:NDMSInvestigation.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:NDMSInvestigation.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:NDMSInvestigation.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:NDMSInvestigation.Services.IProcessor.ChangeProcessorState(NDMSInvestigation.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:NDMSInvestigation.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.ResultService">
            <summary>
            An component type implementation of the 'Result' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:NDMSInvestigation.Services.ResultServiceBase">
            <summary>
             An object representation of the 'Result' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Result.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.Result"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.Result"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.CreateResult(System.Guid,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.Result"/> instance.
            </summary>
            <param name="_userId"></param>
            <param name="_groupId"></param>
            <param name="_groupMark"></param>
            <param name="_updateDay"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.GetByUserId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK_Result_aspnet_Users key.
            	FK_Result_aspnet_Users Description: 
            </summary>
            <param name="_userId"></param>
            <returns>Returns a generic collection of Result objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.GetByUserId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK_Result_aspnet_Users key.
            	FK_Result_aspnet_Users Description: 
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:NDMSInvestigation.Entities.TList`1"/> of <c>Result</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.GetByGroupId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK_Result_QuestionGroup key.
            	FK_Result_QuestionGroup Description: 
            </summary>
            <param name="_groupId"></param>
            <returns>Returns a generic collection of Result objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.GetByGroupId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK_Result_QuestionGroup key.
            	FK_Result_QuestionGroup Description: 
            </summary>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:NDMSInvestigation.Entities.TList`1"/> of <c>Result</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Get(NDMSInvestigation.Entities.ResultKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.GetByUserIdGroupId(System.Guid,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK_Result index.
            </summary>
            <param name="_userId"></param>
            <param name="_groupId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.Result"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.GetByUserIdGroupId(System.Guid,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK_Result index.
            </summary>
            <param name="_userId"></param>
            <param name="_groupId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.Result"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.Result"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.Result"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Result</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Result</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Result</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Result} of <c>Result</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Result</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Result</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Result</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Result</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Result</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Insert(NDMSInvestigation.Entities.Result)">
            <summary>
            public virtual method that Inserts a Result object into the datasource using a transaction.
            </summary>
            <param name="entity">Result object to Insert.</param>
            <remarks>After Inserting into the datasource, the Result object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Result entity = new Result();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ResultService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.Result})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Result</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Result</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Result.
             <code><![CDATA[
             TList<Result> list = new TList<Result>();
             Result entity = new Result();
             entity.StringProperty = "foo";
             Result entity2 = new Result();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResultService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Update(NDMSInvestigation.Entities.Result)">
            <summary>
            public virtual method that Updates a Result object into the datasource using a transaction.
            </summary>
            <param name="entity">Result object to Update.</param>
            <remarks>After Updateing into the datasource, the Result object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Result entity = ResultService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ResultService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.Result})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Result</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Result</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Result.
             <code><![CDATA[
             TList<Result> list = new TList<Result>();
             Result entity = new Result();
             entity.StringProperty = "foo";
             Result entity2 = new Result();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResultService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Save(NDMSInvestigation.Entities.Result)">
            <summary>
            public virtual method that Saves a Result object into the datasource using a transaction.
            </summary>
            <param name="entity">Result object to Save.</param>
            <remarks>After Saveing into the datasource, the Result object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Result entity = ResultService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ResultService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.Result})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Result</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Result</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Result.
             <code><![CDATA[
             TList<Result> list = new TList<Result>();
             Result entity = new Result();
             entity.StringProperty = "foo";
             Result entity2 = new Result();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResultService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Delete(NDMSInvestigation.Entities.Result)">
            <summary>
            public virtual method that Deletes a Result object into the datasource using a transaction.
            </summary>
            <param name="entity">Result object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Result object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Result entity = ResultService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ResultService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.Result})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Result</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Result</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Result.
             <code><![CDATA[
             TList<Result> list = new TList<Result>();
             Result entity = new Result();
             entity.StringProperty = "foo";
             Result entity2 = new Result();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResultService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Delete(NDMSInvestigation.Entities.ResultKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.Delete(System.Guid,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid _userId, System.Int32 _groupId
            </summary>
            <param name="_userId">Result pk id.</param>
            <param name="_groupId">Result pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.DeepLoadByUserIdGroupId(System.Guid,System.Int32,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.Result"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_userId"></param>
            <param name="_groupId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Result Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.Result"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.DeepLoad(NDMSInvestigation.Entities.Result)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Result Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.ResultServiceBase.DeepLoad(NDMSInvestigation.Entities.Result)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.DeepLoad(NDMSInvestigation.Entities.Result,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.ResultServiceBase.DeepLoad(NDMSInvestigation.Entities.Result)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Result Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.DeepLoad(NDMSInvestigation.Entities.Result,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.Result"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Result Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.Result})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.ResultServiceBase.DeepLoad(NDMSInvestigation.Entities.Result)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.Result},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.ResultServiceBase.DeepLoad(NDMSInvestigation.Entities.Result)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.Result},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.Result"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.DeepSave(NDMSInvestigation.Entities.Result)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.Result"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Result Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.DeepSave(NDMSInvestigation.Entities.Result,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Result object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Result Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Result</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.Result})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Result} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.Result},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Result Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.ResultServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ResultService.#ctor">
            <summary>
            Initializes a new instance of the ResultService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.QuestionDetailsService">
            <summary>
            An component type implementation of the 'QuestionDetails' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionDetailsService.#ctor">
            <summary>
            Initializes a new instance of the QuestionDetailsService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ConnectionScope.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:NDMSInvestigation.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:NDMSInvestigation.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ConnectionScope.Copy(NDMSInvestigation.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:NDMSInvestigation.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:NDMSInvestigation.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="T:NDMSInvestigation.Data.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="T:NDMSInvestigation.Data.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="T:NDMSInvestigation.Data.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="T:NDMSInvestigation.Data.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.ConnectionScope.Complete">
            <summary>
            Completes this transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.DomainUtil.GetErrorsFromList``1(NDMSInvestigation.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:NDMSInvestigation.Services.QuestionAnswerServiceBase">
            <summary>
             An object representation of the 'Question_Answer' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the QuestionAnswer.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.CreateQuestionAnswer(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> instance.
            </summary>
            <param name="_questionId"></param>
            <param name="_answerId"></param>
            <param name="_mark"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.GetByAnswerId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK_Question_Answer_AnswerDetails key.
            	FK_Question_Answer_AnswerDetails Description: 
            </summary>
            <param name="_answerId"></param>
            <returns>Returns a generic collection of QuestionAnswer objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.GetByAnswerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK_Question_Answer_AnswerDetails key.
            	FK_Question_Answer_AnswerDetails Description: 
            </summary>
            <param name="_answerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:NDMSInvestigation.Entities.TList`1"/> of <c>QuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.GetByQuestionId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK_Question_Answer_QuestionDetails key.
            	FK_Question_Answer_QuestionDetails Description: 
            </summary>
            <param name="_questionId"></param>
            <returns>Returns a generic collection of QuestionAnswer objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.GetByQuestionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK_Question_Answer_QuestionDetails key.
            	FK_Question_Answer_QuestionDetails Description: 
            </summary>
            <param name="_questionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:NDMSInvestigation.Entities.TList`1"/> of <c>QuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Get(NDMSInvestigation.Entities.QuestionAnswerKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.GetByQuestionAnswerId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK_Question_Answer index.
            </summary>
            <param name="_questionAnswerId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.GetByQuestionAnswerId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK_Question_Answer index.
            </summary>
            <param name="_questionAnswerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{QuestionAnswer} of <c>QuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>QuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>QuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuestionAnswer</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Insert(NDMSInvestigation.Entities.QuestionAnswer)">
            <summary>
            public virtual method that Inserts a QuestionAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionAnswer object to Insert.</param>
            <remarks>After Inserting into the datasource, the QuestionAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            QuestionAnswer entity = new QuestionAnswer();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	QuestionAnswerService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionAnswer})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionAnswer</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>QuestionAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of QuestionAnswer.
             <code><![CDATA[
             TList<QuestionAnswer> list = new TList<QuestionAnswer>();
             QuestionAnswer entity = new QuestionAnswer();
             entity.StringProperty = "foo";
             QuestionAnswer entity2 = new QuestionAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionAnswerService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Update(NDMSInvestigation.Entities.QuestionAnswer)">
            <summary>
            public virtual method that Updates a QuestionAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionAnswer object to Update.</param>
            <remarks>After Updateing into the datasource, the QuestionAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            QuestionAnswer entity = QuestionAnswerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	QuestionAnswerService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionAnswer})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionAnswer</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>QuestionAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of QuestionAnswer.
             <code><![CDATA[
             TList<QuestionAnswer> list = new TList<QuestionAnswer>();
             QuestionAnswer entity = new QuestionAnswer();
             entity.StringProperty = "foo";
             QuestionAnswer entity2 = new QuestionAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionAnswerService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Save(NDMSInvestigation.Entities.QuestionAnswer)">
            <summary>
            public virtual method that Saves a QuestionAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionAnswer object to Save.</param>
            <remarks>After Saveing into the datasource, the QuestionAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            QuestionAnswer entity = QuestionAnswerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	QuestionAnswerService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionAnswer})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionAnswer</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>QuestionAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of QuestionAnswer.
             <code><![CDATA[
             TList<QuestionAnswer> list = new TList<QuestionAnswer>();
             QuestionAnswer entity = new QuestionAnswer();
             entity.StringProperty = "foo";
             QuestionAnswer entity2 = new QuestionAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionAnswerService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Delete(NDMSInvestigation.Entities.QuestionAnswer)">
            <summary>
            public virtual method that Deletes a QuestionAnswer object into the datasource using a transaction.
            </summary>
            <param name="entity">QuestionAnswer object to Delete.</param>
            <remarks>After Deleteing into the datasource, the QuestionAnswer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            QuestionAnswer entity = QuestionAnswerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	QuestionAnswerService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionAnswer})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuestionAnswer</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>QuestionAnswer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of QuestionAnswer.
             <code><![CDATA[
             TList<QuestionAnswer> list = new TList<QuestionAnswer>();
             QuestionAnswer entity = new QuestionAnswer();
             entity.StringProperty = "foo";
             QuestionAnswer entity2 = new QuestionAnswer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuestionAnswerService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Delete(NDMSInvestigation.Entities.QuestionAnswerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _questionAnswerId
            </summary>
            <param name="_questionAnswerId">QuestionAnswer pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepLoadByQuestionAnswerId(System.Int32,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_questionAnswerId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionAnswer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionAnswer)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">QuestionAnswer Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionAnswer,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">QuestionAnswer Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionAnswer,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuestionAnswer Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionAnswer})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionAnswer},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepLoad(NDMSInvestigation.Entities.QuestionAnswer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionAnswer},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepSave(NDMSInvestigation.Entities.QuestionAnswer)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.QuestionAnswer"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">QuestionAnswer Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepSave(NDMSInvestigation.Entities.QuestionAnswer,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the QuestionAnswer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">QuestionAnswer Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>QuestionAnswer</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionAnswer})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{QuestionAnswer} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.QuestionAnswer},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QuestionAnswer Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.QuestionAnswerServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetPersonalizationPerUserService">
            <summary>
            An component type implementation of the 'aspnet_PersonalizationPerUser' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase">
            <summary>
             An object representation of the 'aspnet_PersonalizationPerUser' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AspnetPersonalizationPerUser.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.CreateAspnetPersonalizationPerUser(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Byte[],System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> instance.
            </summary>
            <param name="_pathId"></param>
            <param name="_userId"></param>
            <param name="_pageSettings"></param>
            <param name="_lastUpdatedDate"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetByPathId(System.Nullable{System.Guid})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Pe__PathI__4F7CD00D key.
            	FK__aspnet_Pe__PathI__4F7CD00D Description: 
            </summary>
            <param name="_pathId"></param>
            <returns>Returns a generic collection of AspnetPersonalizationPerUser objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetByPathId(System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Pe__PathI__4F7CD00D key.
            	FK__aspnet_Pe__PathI__4F7CD00D Description: 
            </summary>
            <param name="_pathId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:NDMSInvestigation.Entities.TList`1"/> of <c>AspnetPersonalizationPerUser</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetByUserId(System.Nullable{System.Guid})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Pe__UserI__5070F446 key.
            	FK__aspnet_Pe__UserI__5070F446 Description: 
            </summary>
            <param name="_userId"></param>
            <returns>Returns a generic collection of AspnetPersonalizationPerUser objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetByUserId(System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Pe__UserI__5070F446 key.
            	FK__aspnet_Pe__UserI__5070F446 Description: 
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:NDMSInvestigation.Entities.TList`1"/> of <c>AspnetPersonalizationPerUser</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Get(NDMSInvestigation.Entities.AspnetPersonalizationPerUserKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetByPathIdUserId(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_PersonalizationPerUser_index1 index.
            </summary>
            <param name="_pathId"></param>
            <param name="_userId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetByPathIdUserId(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_PersonalizationPerUser_index1 index.
            </summary>
            <param name="_pathId"></param>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetByUserIdPathId(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_PersonalizationPerUser_ncindex2 index.
            </summary>
            <param name="_userId"></param>
            <param name="_pathId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetByUserIdPathId(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_PersonalizationPerUser_ncindex2 index.
            </summary>
            <param name="_userId"></param>
            <param name="_pathId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetById(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Personali__4D94879B index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetById(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Personali__4D94879B index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetPersonalizationPerUser</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetPersonalizationPerUser</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetPersonalizationPerUser</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AspnetPersonalizationPerUser} of <c>AspnetPersonalizationPerUser</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetPersonalizationPerUser</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetPersonalizationPerUser</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AspnetPersonalizationPerUser</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetPersonalizationPerUser</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetPersonalizationPerUser</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Insert(NDMSInvestigation.Entities.AspnetPersonalizationPerUser)">
            <summary>
            public virtual method that Inserts a AspnetPersonalizationPerUser object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetPersonalizationPerUser object to Insert.</param>
            <remarks>After Inserting into the datasource, the AspnetPersonalizationPerUser object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AspnetPersonalizationPerUser entity = new AspnetPersonalizationPerUser();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AspnetPersonalizationPerUserService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationPerUser})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetPersonalizationPerUser</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AspnetPersonalizationPerUser</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AspnetPersonalizationPerUser.
             <code><![CDATA[
             TList<AspnetPersonalizationPerUser> list = new TList<AspnetPersonalizationPerUser>();
             AspnetPersonalizationPerUser entity = new AspnetPersonalizationPerUser();
             entity.StringProperty = "foo";
             AspnetPersonalizationPerUser entity2 = new AspnetPersonalizationPerUser();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetPersonalizationPerUserService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Update(NDMSInvestigation.Entities.AspnetPersonalizationPerUser)">
            <summary>
            public virtual method that Updates a AspnetPersonalizationPerUser object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetPersonalizationPerUser object to Update.</param>
            <remarks>After Updateing into the datasource, the AspnetPersonalizationPerUser object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AspnetPersonalizationPerUser entity = AspnetPersonalizationPerUserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AspnetPersonalizationPerUserService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationPerUser})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetPersonalizationPerUser</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AspnetPersonalizationPerUser</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AspnetPersonalizationPerUser.
             <code><![CDATA[
             TList<AspnetPersonalizationPerUser> list = new TList<AspnetPersonalizationPerUser>();
             AspnetPersonalizationPerUser entity = new AspnetPersonalizationPerUser();
             entity.StringProperty = "foo";
             AspnetPersonalizationPerUser entity2 = new AspnetPersonalizationPerUser();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetPersonalizationPerUserService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Save(NDMSInvestigation.Entities.AspnetPersonalizationPerUser)">
            <summary>
            public virtual method that Saves a AspnetPersonalizationPerUser object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetPersonalizationPerUser object to Save.</param>
            <remarks>After Saveing into the datasource, the AspnetPersonalizationPerUser object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AspnetPersonalizationPerUser entity = AspnetPersonalizationPerUserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AspnetPersonalizationPerUserService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationPerUser})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetPersonalizationPerUser</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AspnetPersonalizationPerUser</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AspnetPersonalizationPerUser.
             <code><![CDATA[
             TList<AspnetPersonalizationPerUser> list = new TList<AspnetPersonalizationPerUser>();
             AspnetPersonalizationPerUser entity = new AspnetPersonalizationPerUser();
             entity.StringProperty = "foo";
             AspnetPersonalizationPerUser entity2 = new AspnetPersonalizationPerUser();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetPersonalizationPerUserService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Delete(NDMSInvestigation.Entities.AspnetPersonalizationPerUser)">
            <summary>
            public virtual method that Deletes a AspnetPersonalizationPerUser object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetPersonalizationPerUser object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AspnetPersonalizationPerUser object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AspnetPersonalizationPerUser entity = AspnetPersonalizationPerUserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AspnetPersonalizationPerUserService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationPerUser})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetPersonalizationPerUser</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AspnetPersonalizationPerUser</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AspnetPersonalizationPerUser.
             <code><![CDATA[
             TList<AspnetPersonalizationPerUser> list = new TList<AspnetPersonalizationPerUser>();
             AspnetPersonalizationPerUser entity = new AspnetPersonalizationPerUser();
             entity.StringProperty = "foo";
             AspnetPersonalizationPerUser entity2 = new AspnetPersonalizationPerUser();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetPersonalizationPerUserService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Delete(NDMSInvestigation.Entities.AspnetPersonalizationPerUserKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.Delete(System.Guid)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid _id
            </summary>
            <param name="_id">AspnetPersonalizationPerUser pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepLoadByPathIdUserId(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_pathId"></param>
            <param name="_userId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetPersonalizationPerUser Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepLoadByUserIdPathId(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_userId"></param>
            <param name="_pathId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetPersonalizationPerUser Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepLoadById(System.Guid,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetPersonalizationPerUser Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationPerUser)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AspnetPersonalizationPerUser Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationPerUser)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationPerUser,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationPerUser)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AspnetPersonalizationPerUser Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationPerUser,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetPersonalizationPerUser Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationPerUser})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationPerUser)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationPerUser},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationPerUser)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationPerUser},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetPersonalizationPerUser)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationPerUser"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AspnetPersonalizationPerUser Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetPersonalizationPerUser,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AspnetPersonalizationPerUser object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AspnetPersonalizationPerUser Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AspnetPersonalizationPerUser</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationPerUser})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AspnetPersonalizationPerUser} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationPerUser},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AspnetPersonalizationPerUser Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.AspnetPersonalizationPerUserServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationPerUserService.#ctor">
            <summary>
            Initializes a new instance of the AspnetPersonalizationPerUserService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetProfileService">
            <summary>
            An component type implementation of the 'aspnet_Profile' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetProfileServiceBase">
            <summary>
             An object representation of the 'aspnet_Profile' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AspnetProfile.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.CreateAspnetProfile(System.Guid,System.String,System.String,System.Byte[],System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> instance.
            </summary>
            <param name="_userId"></param>
            <param name="_propertyNames"></param>
            <param name="_propertyValuesString"></param>
            <param name="_propertyValuesBinary"></param>
            <param name="_lastUpdatedDate"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Get(NDMSInvestigation.Entities.AspnetProfileKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.GetByUserId(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Profile__286302EC index.
            </summary>
            <param name="_userId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.GetByUserId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Profile__286302EC index.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetProfile</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetProfile</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetProfile</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AspnetProfile} of <c>AspnetProfile</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetProfile</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetProfile</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AspnetProfile</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetProfile</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetProfile</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Insert(NDMSInvestigation.Entities.AspnetProfile)">
            <summary>
            public virtual method that Inserts a AspnetProfile object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetProfile object to Insert.</param>
            <remarks>After Inserting into the datasource, the AspnetProfile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AspnetProfile entity = new AspnetProfile();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AspnetProfileService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetProfile})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetProfile</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AspnetProfile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AspnetProfile.
             <code><![CDATA[
             TList<AspnetProfile> list = new TList<AspnetProfile>();
             AspnetProfile entity = new AspnetProfile();
             entity.StringProperty = "foo";
             AspnetProfile entity2 = new AspnetProfile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetProfileService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Update(NDMSInvestigation.Entities.AspnetProfile)">
            <summary>
            public virtual method that Updates a AspnetProfile object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetProfile object to Update.</param>
            <remarks>After Updateing into the datasource, the AspnetProfile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AspnetProfile entity = AspnetProfileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AspnetProfileService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetProfile})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetProfile</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AspnetProfile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AspnetProfile.
             <code><![CDATA[
             TList<AspnetProfile> list = new TList<AspnetProfile>();
             AspnetProfile entity = new AspnetProfile();
             entity.StringProperty = "foo";
             AspnetProfile entity2 = new AspnetProfile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetProfileService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Save(NDMSInvestigation.Entities.AspnetProfile)">
            <summary>
            public virtual method that Saves a AspnetProfile object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetProfile object to Save.</param>
            <remarks>After Saveing into the datasource, the AspnetProfile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AspnetProfile entity = AspnetProfileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AspnetProfileService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetProfile})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetProfile</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AspnetProfile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AspnetProfile.
             <code><![CDATA[
             TList<AspnetProfile> list = new TList<AspnetProfile>();
             AspnetProfile entity = new AspnetProfile();
             entity.StringProperty = "foo";
             AspnetProfile entity2 = new AspnetProfile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetProfileService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Delete(NDMSInvestigation.Entities.AspnetProfile)">
            <summary>
            public virtual method that Deletes a AspnetProfile object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetProfile object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AspnetProfile object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AspnetProfile entity = AspnetProfileService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AspnetProfileService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetProfile})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetProfile</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AspnetProfile</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AspnetProfile.
             <code><![CDATA[
             TList<AspnetProfile> list = new TList<AspnetProfile>();
             AspnetProfile entity = new AspnetProfile();
             entity.StringProperty = "foo";
             AspnetProfile entity2 = new AspnetProfile();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetProfileService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Delete(NDMSInvestigation.Entities.AspnetProfileKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.Delete(System.Guid)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid _userId
            </summary>
            <param name="_userId">AspnetProfile pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepLoadByUserId(System.Guid,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_userId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetProfile Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetProfile)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AspnetProfile Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetProfile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetProfile,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetProfile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AspnetProfile Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetProfile,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetProfile Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetProfile})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetProfile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetProfile},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetProfile)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetProfile},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetProfile)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.AspnetProfile"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AspnetProfile Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetProfile,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AspnetProfile object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AspnetProfile Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AspnetProfile</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetProfile})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AspnetProfile} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetProfile},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AspnetProfile Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.AspnetProfileServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetProfileService.#ctor">
            <summary>
            Initializes a new instance of the AspnetProfileService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetPathsService">
            <summary>
            An component type implementation of the 'aspnet_Paths' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPathsService.#ctor">
            <summary>
            Initializes a new instance of the AspnetPathsService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetRolesServiceBase">
            <summary>
             An object representation of the 'aspnet_Roles' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AspnetRoles.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.CreateAspnetRoles(System.Guid,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> instance.
            </summary>
            <param name="_applicationId"></param>
            <param name="_roleName"></param>
            <param name="_loweredRoleName"></param>
            <param name="_description"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetByApplicationId(System.Guid)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Ro__Appli__32E0915F key.
            	FK__aspnet_Ro__Appli__32E0915F Description: 
            </summary>
            <param name="_applicationId"></param>
            <returns>Returns a generic collection of AspnetRoles objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetByApplicationId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the FK__aspnet_Ro__Appli__32E0915F key.
            	FK__aspnet_Ro__Appli__32E0915F Description: 
            </summary>
            <param name="_applicationId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:NDMSInvestigation.Entities.TList`1"/> of <c>AspnetRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Get(NDMSInvestigation.Entities.AspnetRolesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetByApplicationIdLoweredRoleName(System.Guid,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_Roles_index1 index.
            </summary>
            <param name="_applicationId"></param>
            <param name="_loweredRoleName"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetByApplicationIdLoweredRoleName(System.Guid,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key aspnet_Roles_index1 index.
            </summary>
            <param name="_applicationId"></param>
            <param name="_loweredRoleName"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetByRoleId(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Roles__31EC6D26 index.
            </summary>
            <param name="_roleId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetByRoleId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Roles__31EC6D26 index.
            </summary>
            <param name="_roleId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AspnetRoles} of <c>AspnetRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AspnetRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetRoles</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Insert(NDMSInvestigation.Entities.AspnetRoles)">
            <summary>
            public virtual method that Inserts a AspnetRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetRoles object to Insert.</param>
            <remarks>After Inserting into the datasource, the AspnetRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AspnetRoles entity = new AspnetRoles();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AspnetRolesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetRoles})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetRoles</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AspnetRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AspnetRoles.
             <code><![CDATA[
             TList<AspnetRoles> list = new TList<AspnetRoles>();
             AspnetRoles entity = new AspnetRoles();
             entity.StringProperty = "foo";
             AspnetRoles entity2 = new AspnetRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetRolesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Update(NDMSInvestigation.Entities.AspnetRoles)">
            <summary>
            public virtual method that Updates a AspnetRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetRoles object to Update.</param>
            <remarks>After Updateing into the datasource, the AspnetRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AspnetRoles entity = AspnetRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AspnetRolesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetRoles})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetRoles</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AspnetRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AspnetRoles.
             <code><![CDATA[
             TList<AspnetRoles> list = new TList<AspnetRoles>();
             AspnetRoles entity = new AspnetRoles();
             entity.StringProperty = "foo";
             AspnetRoles entity2 = new AspnetRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetRolesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Save(NDMSInvestigation.Entities.AspnetRoles)">
            <summary>
            public virtual method that Saves a AspnetRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetRoles object to Save.</param>
            <remarks>After Saveing into the datasource, the AspnetRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AspnetRoles entity = AspnetRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AspnetRolesService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetRoles})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetRoles</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AspnetRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AspnetRoles.
             <code><![CDATA[
             TList<AspnetRoles> list = new TList<AspnetRoles>();
             AspnetRoles entity = new AspnetRoles();
             entity.StringProperty = "foo";
             AspnetRoles entity2 = new AspnetRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetRolesService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Delete(NDMSInvestigation.Entities.AspnetRoles)">
            <summary>
            public virtual method that Deletes a AspnetRoles object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetRoles object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AspnetRoles object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AspnetRoles entity = AspnetRolesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AspnetRolesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetRoles})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetRoles</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AspnetRoles</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AspnetRoles.
             <code><![CDATA[
             TList<AspnetRoles> list = new TList<AspnetRoles>();
             AspnetRoles entity = new AspnetRoles();
             entity.StringProperty = "foo";
             AspnetRoles entity2 = new AspnetRoles();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetRolesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Delete(NDMSInvestigation.Entities.AspnetRolesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.Delete(System.Guid)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid _roleId
            </summary>
            <param name="_roleId">AspnetRoles pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetByUserIdFromAspnetUsersInRoles(System.Guid)">
            <summary>
            	Gets aspnet_Roles objects from the datasource by UserId in the
            	aspnet_UsersInRoles table. Table aspnet_Roles is related to table aspnet_Users
            	through the (M:N) relationship defined in the aspnet_UsersInRoles table.
            </summary>
            <param name="_userId"></param>
            <returns>Returns a typed collection of AspnetRoles objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.GetByUserIdFromAspnetUsersInRoles(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets aspnet_Roles objects from the datasource by UserId in the
            	aspnet_UsersInRoles table. Table aspnet_Roles is related to table aspnet_Users
            	through the (M:N) relationship defined in the aspnet_UsersInRoles table.
            </summary>
            <param name="_userId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AspnetRoles objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepLoadByApplicationIdLoweredRoleName(System.Guid,System.String,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_applicationId"></param>
            <param name="_loweredRoleName"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetRoles Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepLoadByRoleId(System.Guid,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_roleId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetRoles Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetRoles)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AspnetRoles Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetRoles)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetRoles,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetRoles)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AspnetRoles Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetRoles,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetRoles Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetRoles})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetRoles)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetRoles},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetRoles)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetRoles},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetRoles)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.AspnetRoles"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AspnetRoles Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetRoles,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AspnetRoles object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AspnetRoles Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AspnetRoles</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetRoles})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AspnetRoles} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetRoles},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AspnetRoles Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.AspnetRolesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase">
            <summary>
             An object representation of the 'aspnet_PersonalizationAllUsers' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AspnetPersonalizationAllUsers.cs file instead.
             All custom implementations should be done in the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> class.
             </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> instance .
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.CreateAspnetPersonalizationAllUsers(System.Guid,System.Byte[],System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> instance.
            </summary>
            <param name="_pathId"></param>
            <param name="_pageSettings"></param>
            <param name="_lastUpdatedDate"></param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Get(NDMSInvestigation.Entities.AspnetPersonalizationAllUsersKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.GetByPathId(System.Guid)">
            <summary>
             method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Personali__4AB81AF0 index.
            </summary>
            <param name="_pathId"></param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.GetByPathId(System.Guid,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the datasource based on the primary key PK__aspnet_Personali__4AB81AF0 index.
            </summary>
            <param name="_pathId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> class.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:NDMSInvestigation.Entities.TList`1"/> </returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetPersonalizationAllUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:NDMSInvestigation.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetPersonalizationAllUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:NDMSInvestigation.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AspnetPersonalizationAllUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AspnetPersonalizationAllUsers} of <c>AspnetPersonalizationAllUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetPersonalizationAllUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AspnetPersonalizationAllUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AspnetPersonalizationAllUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,NDMSInvestigation.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:NDMSInvestigation.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetPersonalizationAllUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Find(NDMSInvestigation.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:NDMSInvestigation.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AspnetPersonalizationAllUsers</c> objects.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Insert(NDMSInvestigation.Entities.AspnetPersonalizationAllUsers)">
            <summary>
            public virtual method that Inserts a AspnetPersonalizationAllUsers object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetPersonalizationAllUsers object to Insert.</param>
            <remarks>After Inserting into the datasource, the AspnetPersonalizationAllUsers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AspnetPersonalizationAllUsers entity = new AspnetPersonalizationAllUsers();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AspnetPersonalizationAllUsersService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Insert(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationAllUsers})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetPersonalizationAllUsers</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AspnetPersonalizationAllUsers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AspnetPersonalizationAllUsers.
             <code><![CDATA[
             TList<AspnetPersonalizationAllUsers> list = new TList<AspnetPersonalizationAllUsers>();
             AspnetPersonalizationAllUsers entity = new AspnetPersonalizationAllUsers();
             entity.StringProperty = "foo";
             AspnetPersonalizationAllUsers entity2 = new AspnetPersonalizationAllUsers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetPersonalizationAllUsersService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Update(NDMSInvestigation.Entities.AspnetPersonalizationAllUsers)">
            <summary>
            public virtual method that Updates a AspnetPersonalizationAllUsers object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetPersonalizationAllUsers object to Update.</param>
            <remarks>After Updateing into the datasource, the AspnetPersonalizationAllUsers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AspnetPersonalizationAllUsers entity = AspnetPersonalizationAllUsersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AspnetPersonalizationAllUsersService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Update(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationAllUsers})">
             <summary>
             public virtual method that Updates rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetPersonalizationAllUsers</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AspnetPersonalizationAllUsers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AspnetPersonalizationAllUsers.
             <code><![CDATA[
             TList<AspnetPersonalizationAllUsers> list = new TList<AspnetPersonalizationAllUsers>();
             AspnetPersonalizationAllUsers entity = new AspnetPersonalizationAllUsers();
             entity.StringProperty = "foo";
             AspnetPersonalizationAllUsers entity2 = new AspnetPersonalizationAllUsers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetPersonalizationAllUsersService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Save(NDMSInvestigation.Entities.AspnetPersonalizationAllUsers)">
            <summary>
            public virtual method that Saves a AspnetPersonalizationAllUsers object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetPersonalizationAllUsers object to Save.</param>
            <remarks>After Saveing into the datasource, the AspnetPersonalizationAllUsers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AspnetPersonalizationAllUsers entity = AspnetPersonalizationAllUsersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AspnetPersonalizationAllUsersService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Save(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationAllUsers})">
             <summary>
             public virtual method that Saves rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetPersonalizationAllUsers</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AspnetPersonalizationAllUsers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AspnetPersonalizationAllUsers.
             <code><![CDATA[
             TList<AspnetPersonalizationAllUsers> list = new TList<AspnetPersonalizationAllUsers>();
             AspnetPersonalizationAllUsers entity = new AspnetPersonalizationAllUsers();
             entity.StringProperty = "foo";
             AspnetPersonalizationAllUsers entity2 = new AspnetPersonalizationAllUsers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetPersonalizationAllUsersService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Delete(NDMSInvestigation.Entities.AspnetPersonalizationAllUsers)">
            <summary>
            public virtual method that Deletes a AspnetPersonalizationAllUsers object into the datasource using a transaction.
            </summary>
            <param name="entity">AspnetPersonalizationAllUsers object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AspnetPersonalizationAllUsers object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AspnetPersonalizationAllUsers entity = AspnetPersonalizationAllUsersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AspnetPersonalizationAllUsersService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Delete(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationAllUsers})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:NDMSInvestigation.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AspnetPersonalizationAllUsers</c> objects in a <see cref="T:NDMSInvestigation.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AspnetPersonalizationAllUsers</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AspnetPersonalizationAllUsers.
             <code><![CDATA[
             TList<AspnetPersonalizationAllUsers> list = new TList<AspnetPersonalizationAllUsers>();
             AspnetPersonalizationAllUsers entity = new AspnetPersonalizationAllUsers();
             entity.StringProperty = "foo";
             AspnetPersonalizationAllUsers entity2 = new AspnetPersonalizationAllUsers();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AspnetPersonalizationAllUsersService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Delete(NDMSInvestigation.Entities.AspnetPersonalizationAllUsersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.Delete(System.Guid)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Guid _pathId
            </summary>
            <param name="_pathId">AspnetPersonalizationAllUsers pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepLoadByPathId(System.Guid,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <param name="_pathId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetPersonalizationAllUsers Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationAllUsers)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AspnetPersonalizationAllUsers Object</param>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationAllUsers)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationAllUsers,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationAllUsers)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AspnetPersonalizationAllUsers Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationAllUsers,System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:NDMSInvestigation.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:NDMSInvestigation.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AspnetPersonalizationAllUsers Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationAllUsers})">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationAllUsers)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationAllUsers},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.AspnetPersonalizationAllUsers)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:NDMSInvestigation.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepLoad(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationAllUsers},System.Boolean,NDMSInvestigation.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:NDMSInvestigation.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:NDMSInvestigation.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetPersonalizationAllUsers)">
            <summary>
            public virtualDeep Saves the <see cref="T:NDMSInvestigation.Entities.AspnetPersonalizationAllUsers"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AspnetPersonalizationAllUsers Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepSave(NDMSInvestigation.Entities.AspnetPersonalizationAllUsers,NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AspnetPersonalizationAllUsers object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AspnetPersonalizationAllUsers Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AspnetPersonalizationAllUsers</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationAllUsers})">
            <summary>
            Deep Save the entire <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AspnetPersonalizationAllUsers} Object</param>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.DeepSave(NDMSInvestigation.Entities.TList{NDMSInvestigation.Entities.AspnetPersonalizationAllUsers},NDMSInvestigation.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:NDMSInvestigation.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:NDMSInvestigation.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AspnetPersonalizationAllUsers Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:NDMSInvestigation.Services.AspnetPersonalizationAllUsersServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetUsersService">
            <summary>
            An component type implementation of the 'aspnet_Users' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersService.#ctor">
            <summary>
            Initializes a new instance of the AspnetUsersService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetRolesService">
            <summary>
            An component type implementation of the 'aspnet_Roles' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetRolesService.#ctor">
            <summary>
            Initializes a new instance of the AspnetRolesService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:NDMSInvestigation.Services.ProcessorBase.ChangeProcessorState(NDMSInvestigation.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.ProcessorBase.OnNotifyProcessorStateChanging(NDMSInvestigation.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:NDMSInvestigation.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:NDMSInvestigation.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:NDMSInvestigation.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:NDMSInvestigation.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:NDMSInvestigation.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:NDMSInvestigation.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:NDMSInvestigation.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:NDMSInvestigation.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:NDMSInvestigation.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.UserService">
            <summary>
            An component type implementation of the 'User' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.UserService.#ctor">
            <summary>
            Initializes a new instance of the UserService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.QuestionAnswerService">
            <summary>
            An component type implementation of the 'Question_Answer' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.QuestionAnswerService.#ctor">
            <summary>
            Initializes a new instance of the QuestionAnswerService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetUsersInRolesService">
            <summary>
            An component type implementation of the 'aspnet_UsersInRoles' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetUsersInRolesService.#ctor">
            <summary>
            Initializes a new instance of the AspnetUsersInRolesService class.
            </summary>
        </member>
        <member name="T:NDMSInvestigation.Services.AspnetPersonalizationAllUsersService">
            <summary>
            An component type implementation of the 'aspnet_PersonalizationAllUsers' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:NDMSInvestigation.Services.AspnetPersonalizationAllUsersService.#ctor">
            <summary>
            Initializes a new instance of the AspnetPersonalizationAllUsersService class.
            </summary>
        </member>
    </members>
</doc>
